Directory structure:
└── codeconnectlab-connectcrm-webapp-fe-template/
    ├── README.md
    ├── eslint.config.js
    ├── index.html
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.ts
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vercel.json
    ├── vite.config.ts
    ├── public/
    │   ├── firebase-messaging-sw.js
    │   ├── sampleSheet.xlsx
    │   └── images/
    │       ├── brand/
    │       ├── cover/
    │       ├── grids/
    │       ├── icon/
    │       ├── illustration/
    │       ├── logo/
    │       ├── task/
    │       ├── todo/
    │       └── user/
    └── src/
        ├── App.tsx
        ├── index.css
        ├── main.tsx
        ├── scrollBar.css
        ├── vite-env.d.ts
        ├── Pages/
        │   ├── Logout.tsx
        │   ├── ApiIntegeration/
        │   │   └── ApiIntegeration.tsx
        │   ├── CallManage/
        │   │   ├── EmployeeList.tsx
        │   │   ├── EmployeeReport.tsx
        │   │   └── components/
        │   │       ├── AnalysisReport.tsx
        │   │       ├── CallDetails.tsx
        │   │       └── Summary.tsx
        │   ├── Components/
        │   │   ├── AdditionalInformation.tsx
        │   │   ├── AdvanceFilterUI.tsx
        │   │   ├── AllDetailsFields.tsx
        │   │   └── AttachmentTab.tsx
        │   ├── ContactsUpload/
        │   │   ├── ContactList.tsx
        │   │   └── ContactUpload.tsx
        │   ├── Dashboard/
        │   │   └── Dashboard.tsx
        │   ├── ForgotPassword/
        │   │   └── ForgotPassword.tsx
        │   ├── Leads/
        │   │   ├── AddLeads.tsx
        │   │   ├── AdditionalLeadDetails.tsx
        │   │   ├── AllLeads.tsx
        │   │   ├── Columns.tsx
        │   │   ├── FollowupLeads.tsx
        │   │   ├── ImportLeads.tsx
        │   │   ├── ImportedLeads.tsx
        │   │   ├── LeadAction.tsx
        │   │   ├── LeadsTableHeader.tsx
        │   │   └── OutsourcedLeads.tsx
        │   ├── ManageDoctors/
        │   │   └── ManageDoctors.tsx
        │   ├── NotFound/
        │   │   ├── NotFound.tsx
        │   │   └── Testing.tsx
        │   ├── ProductAndServices/
        │   │   ├── AddNewProduct.tsx
        │   │   └── ProductAndServiceDash.tsx
        │   ├── Reports/
        │   │   ├── CallReport.tsx
        │   │   └── ManageReports.tsx
        │   ├── SMS/
        │   │   ├── SMSCompose.tsx
        │   │   └── SMSReport.tsx
        │   ├── Settings/
        │   │   ├── Settings.tsx
        │   │   └── Components/
        │   │       ├── CRMFields.tsx
        │   │       ├── DepartmentSetting.tsx
        │   │       ├── GeneralSetting.tsx
        │   │       ├── LeadSourceFieldsCRM.tsx
        │   │       ├── LostReasonFieldsCRM.tsx
        │   │       ├── NotificationSettings.tsx
        │   │       ├── RolePermission.tsx
        │   │       ├── StatusFieldsCRM.tsx
        │   │       ├── StorageInsight.tsx
        │   │       ├── SubscriptionInfo.tsx
        │   │       └── Cards/
        │   │           ├── CardApis.ts
        │   │           ├── CompanyInfo.tsx
        │   │           ├── ContactInfo.tsx
        │   │           ├── SubscriptionInfo.tsx
        │   │           └── SystemSettings.tsx
        │   └── WhatsAppPanel/
        │       ├── WhatsAppCompose.tsx
        │       └── WhatsAppReport.tsx
        ├── api/
        │   ├── UrlProvider.ts
        │   ├── index.ts
        │   └── commonAPI/
        │       ├── exportApi.ts
        │       └── index.ts
        ├── assets/
        ├── components/
        │   ├── ClickOutside.tsx
        │   ├── Star.tsx
        │   ├── Alerts/
        │   │   ├── AlertError.tsx
        │   │   ├── AlertSuccess.tsx
        │   │   └── AlertWarning.tsx
        │   ├── Assets/
        │   │   └── Icons/
        │   │       ├── LogoutIcon.tsx
        │   │       └── DashBoardIcons/
        │   │           ├── DollarIcon.tsx
        │   │           ├── FallIconRed.tsx
        │   │           ├── GrowthIconGreen.tsx
        │   │           ├── SquareBoxIcon.tsx
        │   │           ├── UsersIcons.tsx
        │   │           └── ViewsIcon.tsx
        │   ├── AudioPlayer/
        │   │   └── AudioPlayer.tsx
        │   ├── Auth/
        │   │   ├── GoogleSigninButton.tsx
        │   │   ├── OnBoardingForm.tsx
        │   │   ├── SignUpForm.tsx
        │   │   ├── SigninWithPassword.tsx
        │   │   ├── WelcomePage.tsx
        │   │   ├── SignUp/
        │   │   │   └── index.tsx
        │   │   └── Signin/
        │   │       └── index.tsx
        │   ├── Breadcrumbs/
        │   │   └── Breadcrumb.tsx
        │   ├── BulkMessage/
        │   │   └── BulkMessage.tsx
        │   ├── Buttons/
        │   │   └── ButtonDefault.tsx
        │   ├── CalenderBox/
        │   │   ├── CalenderBox.tsx
        │   │   └── index.tsx
        │   ├── Charts/
        │   │   ├── BasicChart.tsx
        │   │   ├── ChartFive.tsx
        │   │   ├── ChartOne.tsx
        │   │   ├── ChartThree.tsx
        │   │   ├── ChartTwo.tsx
        │   │   ├── DonutChart.tsx
        │   │   └── DonutSlickDesign.tsx
        │   ├── Chat/
        │   │   └── ChatCard.tsx
        │   ├── CheckMarks/
        │   │   └── CheckMark.tsx
        │   ├── CloseMarks/
        │   │   └── CloseMark.tsx
        │   ├── CommonUI/
        │   │   ├── BlurScreenOverlay.tsx
        │   │   ├── Card.tsx
        │   │   ├── CommingSoon.tsx
        │   │   ├── Heading.tsx
        │   │   ├── InfoItem.tsx
        │   │   ├── ScrollIndicator.tsx
        │   │   ├── LeadStatus/
        │   │   │   └── LeadStatus.tsx
        │   │   ├── Loader/
        │   │   │   ├── MiniLoader.tsx
        │   │   │   └── index.tsx
        │   │   ├── NoDataFound/
        │   │   │   ├── BlurTv.tsx
        │   │   │   └── NoData.tsx
        │   │   └── StyledComponent/
        │   │       └── Avatar.tsx
        │   ├── Dashboard/
        │   │   └── Overview.tsx
        │   ├── DataStats/
        │   │   └── DataStatsOne.tsx
        │   ├── Dropdowns/
        │   │   ├── DropdownDefault.tsx
        │   │   └── DropdownDefaultTwo.tsx
        │   ├── DynamicDataManagement/
        │   │   └── DynamicDataManagement.tsx
        │   ├── Footer/
        │   │   └── Footer.tsx
        │   ├── FormElements/
        │   │   ├── CustomCollapse.tsx
        │   │   ├── MultiSelect.tsx
        │   │   ├── index.tsx
        │   │   ├── Checkboxes/
        │   │   │   ├── CheckboxFive.tsx
        │   │   │   ├── CheckboxFour.tsx
        │   │   │   ├── CheckboxOne.tsx
        │   │   │   ├── CheckboxThree.tsx
        │   │   │   └── CheckboxTwo.tsx
        │   │   ├── DatePicker/
        │   │   │   ├── AntDateTimePicker.tsx
        │   │   │   ├── DatePickerOne.tsx
        │   │   │   ├── DatePickerTwo.tsx
        │   │   │   └── DateTimePicker.tsx
        │   │   ├── FileUpload/
        │   │   │   └── FileUploadFillType.tsx
        │   │   ├── InputGroup/
        │   │   │   └── index.tsx
        │   │   ├── SelectGroup/
        │   │   │   ├── SelectGroupOne.tsx
        │   │   │   ├── SelectGroupThree.tsx
        │   │   │   └── SelectGroupTwo.tsx
        │   │   ├── Switchers/
        │   │   │   ├── SwitcherFour.tsx
        │   │   │   ├── SwitcherOne.tsx
        │   │   │   ├── SwitcherThree.tsx
        │   │   │   └── SwitcherTwo.tsx
        │   │   └── TextArea/
        │   │       └── TextAreaCustom.tsx
        │   ├── Header/
        │   │   ├── DarkModeSwitcher.tsx
        │   │   ├── DropdownNotification.tsx
        │   │   ├── DropdownUser.tsx
        │   │   ├── SearchForm.tsx
        │   │   └── index.tsx
        │   ├── Maps/
        │   │   └── MapOne.tsx
        │   ├── Modals/
        │   │   ├── ConfirmationModal.tsx
        │   │   └── QuickEdit.tsx
        │   ├── Notification/
        │   │   └── NotificationSetup.tsx
        │   ├── ProfileBox/
        │   │   └── index.tsx
        │   ├── SelectOption/
        │   │   └── DefaultSelectOption.tsx
        │   ├── SettingBoxes/
        │   │   └── index.tsx
        │   ├── Sidebar/
        │   │   ├── SidebarDropdown.tsx
        │   │   ├── SidebarItem.tsx
        │   │   └── index.tsx
        │   ├── StatusStats/
        │   │   └── StatusStats.tsx
        │   ├── TabPanel/
        │   │   └── TabPanel.tsx
        │   ├── Tables/
        │   │   ├── CustomAntdTable.tsx
        │   │   ├── DashboardCallReport.tsx
        │   │   ├── EmployeePerformance.tsx
        │   │   ├── TableOne.tsx
        │   │   ├── TableThree.tsx
        │   │   └── TableTwo.tsx
        │   ├── TargetStats/
        │   │   └── TargetStats.tsx
        │   └── Utils/
        │       ├── PrivateRoute.tsx
        │       └── TableColumnSelector.tsx
        ├── css/
        │   ├── linePattern.css
        │   ├── satoshi.css
        │   └── style.css
        ├── fonts/
        │   ├── Satoshi-Black.eot
        │   ├── Satoshi-Black.ttf
        │   ├── Satoshi-Black.woff
        │   ├── Satoshi-Black.woff2
        │   ├── Satoshi-BlackItalic.eot
        │   ├── Satoshi-BlackItalic.ttf
        │   ├── Satoshi-BlackItalic.woff
        │   ├── Satoshi-BlackItalic.woff2
        │   ├── Satoshi-Bold.eot
        │   ├── Satoshi-Bold.ttf
        │   ├── Satoshi-Bold.woff
        │   ├── Satoshi-Bold.woff2
        │   ├── Satoshi-BoldItalic.eot
        │   ├── Satoshi-BoldItalic.ttf
        │   ├── Satoshi-BoldItalic.woff
        │   ├── Satoshi-BoldItalic.woff2
        │   ├── Satoshi-Italic.eot
        │   ├── Satoshi-Italic.ttf
        │   ├── Satoshi-Italic.woff
        │   ├── Satoshi-Italic.woff2
        │   ├── Satoshi-Light.eot
        │   ├── Satoshi-Light.ttf
        │   ├── Satoshi-Light.woff
        │   ├── Satoshi-Light.woff2
        │   ├── Satoshi-LightItalic.eot
        │   ├── Satoshi-LightItalic.ttf
        │   ├── Satoshi-LightItalic.woff
        │   ├── Satoshi-LightItalic.woff2
        │   ├── Satoshi-Medium.eot
        │   ├── Satoshi-Medium.ttf
        │   ├── Satoshi-Medium.woff
        │   ├── Satoshi-Medium.woff2
        │   ├── Satoshi-MediumItalic.eot
        │   ├── Satoshi-MediumItalic.ttf
        │   ├── Satoshi-MediumItalic.woff
        │   ├── Satoshi-MediumItalic.woff2
        │   ├── Satoshi-Regular.eot
        │   ├── Satoshi-Regular.ttf
        │   ├── Satoshi-Regular.woff
        │   ├── Satoshi-Regular.woff2
        │   ├── Satoshi-Variable.eot
        │   ├── Satoshi-Variable.ttf
        │   ├── Satoshi-Variable.woff
        │   ├── Satoshi-Variable.woff2
        │   ├── Satoshi-VariableItalic.eot
        │   ├── Satoshi-VariableItalic.ttf
        │   ├── Satoshi-VariableItalic.woff
        │   └── Satoshi-VariableItalic.woff2
        ├── hooks/
        │   ├── useColorMode.tsx
        │   ├── useGetLocation.ts
        │   ├── useLocalStorage.tsx
        │   └── useScreenHook.tsx
        ├── js/
        │   └── us-aea-en.js
        ├── layouts/
        │   └── DefaultLayout.tsx
        ├── routes/
        │   └── routes.ts
        ├── types/
        │   ├── Lead.ts
        │   ├── UrlProvider.d.ts
        │   ├── api.ts
        │   ├── brand.ts
        │   ├── cards.ts
        │   ├── chat.ts
        │   ├── companyDetailsTypes.ts
        │   ├── country.ts
        │   ├── dataStats.ts
        │   ├── deviceType.ts
        │   ├── employeePerformance.ts
        │   ├── environment.d.ts
        │   ├── faq.ts
        │   ├── faqItem.ts
        │   ├── package.ts
        │   ├── product.ts
        │   ├── scrollIndicatorTypes.ts
        │   ├── selectType.ts
        │   ├── statusStats.ts
        │   ├── targetStats.ts
        │   └── topData.ts
        └── utils/
            ├── GetLocation.tsx
            ├── TokenVerify.ts
            ├── handleApiError.ts
            ├── handleLogOut.ts
            ├── useFullFunctions.ts
            ├── Constants/
            │   └── UsefullJSON.tsx
            └── localStorage/
                ├── index.ts
                └── localStorage.d.ts

================================================
File: README.md
================================================
# React + TypeScript + Vite


This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```


================================================
File: eslint.config.js
================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)


================================================
File: index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="Connect Docs - A powerful Doctor - Patients management tool that helps you track Patients, manage Pharmacy, and boost your performance. Your ultimate tool for business growth!"
    />
    <title>Connect Docs</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


================================================
File: package.json
================================================
{
  "name": "connectcrm",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "CI=false tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "antd": "^5.22.2",
    "apexcharts": "^3.41.0",
    "axios": "^1.7.9",
    "dayjs": "^1.11.13",
    "firebase": "^11.1.0",
    "flatpickr": "^4.6.13",
    "formik": "^2.4.6",
    "jsvectormap": "^1.6.0",
    "jwt-decode": "^4.0.0",
    "lodash": "^4.17.21",
    "react": "^18.3.1",
    "react-apexcharts": "^1.4.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-router-dom": "^7.0.1",
    "react-toastify": "^10.0.6",
    "styled-components": "^6.1.13",
    "yup": "^1.4.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/lodash": "^4.17.13",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.15.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.15",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.15.0",
    "vite": "^6.0.1"
  }
}


================================================
File: postcss.config.js
================================================
export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }

================================================
File: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";
import defaultTheme from "tailwindcss/defaultTheme";

const config: Config = {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  darkMode: "class",
  theme: {
    fontFamily: {
      satoshi: ["Satoshi", "sans-serif"],
    },
    screens: {
      ...defaultTheme.screens,
      "2xsm": "375px",
      xsm: "425px",
      // "3xl": "2000px",
    },
    extend: {
      colors: {
        current: "currentColor",
        transparent: "transparent",
        white: "#FFFFFF",
        primary: "#5750F1",
        stroke: "#E6EBF1",
        "stroke-dark": "#27303E",
        dark: {
          DEFAULT: "#111928",
          2: "#1F2A37",
          3: "#374151",
          4: "#4B5563",
          5: "#6B7280",
          6: "#9CA3AF",
          7: "#D1D5DB",
          8: "#E5E7EB",
        },
        gray: {
          DEFAULT: "#EFF4FB",
          dark: "#122031",
          1: "#F9FAFB",
          2: "#F3F4F6",
          3: "#E5E7EB",
          4: "#D1D5DB",
          5: "#9CA3AF",
          6: "#6B7280",
          7: "#374151",
        },
        green: {
          DEFAULT: "#22AD5C",
          dark: "#1A8245",
          light: {
            DEFAULT: "#2CD673",
            1: "#10B981",
            2: "#57DE8F",
            3: "#82E6AC",
            4: "#ACEFC8",
            5: "#C2F3D6",
            6: "#DAF8E6",
            7: "#E9FBF0",
          },
        },
        red: {
          DEFAULT: "#F23030",
          dark: "#E10E0E",
          light: {
            DEFAULT: "#F56060",
            2: "#F89090",
            3: "#FBC0C0",
            4: "#FDD8D8",
            5: "#FEEBEB",
            6: "#FEF3F3",
          },
        },
        blue: {
          DEFAULT: "#3C50E0",
          dark: "#1C3FB7",
          light: {
            DEFAULT: "#5475E5",
            2: "#8099EC",
            3: "#ADBCF2",
            4: "#C3CEF6",
            5: "#E1E8FF",
          },
        },
        orange: {
          DEFAULT: "#F59460",
          light: {
            DEFAULT: "#F59460",
          },
        },
        yellow: {
          DEFAULT: "#F59E0B",
          dark: {
            DEFAULT: "#F59E0B",
            2: "#D97706",
          },
          light: {
            DEFAULT: "#FCD34D",
            4: "#FFFBEB",
          },
        },
      },
      fontSize: {
        "heading-1": ["60px", "72px"],
        "heading-2": ["48px", "58px"],
        "heading-3": ["40px", "48px"],
        "heading-4": ["35px", "45px"],
        "heading-5": ["28px", "40px"],
        "heading-6": ["24px", "30px"],
        "body-2xlg": ["22px", "28px"],
        "body-sm": ["14px", "22px"],
        "body-xs": ["12px", "20px"],
      },
      spacing: {
        4.5: "1.125rem",
        5.5: "1.375rem",
        6.5: "1.625rem",
        7.5: "1.875rem",
        8.5: "2.125rem",
        9.5: "2.375rem",
        10.5: "2.625rem",
        11: "2.75rem",
        11.5: "2.875rem",
        12.5: "3.125rem",
        13: "3.25rem",
        13.5: "3.375rem",
        14: "3.5rem",
        14.5: "3.625rem",
        15: "3.75rem",
        15.5: "3.875rem",
        16: "4rem",
        16.5: "4.125rem",
        17: "4.25rem",
        17.5: "4.375rem",
        18: "4.5rem",
        18.5: "4.625rem",
        19: "4.75rem",
        19.5: "4.875rem",
        21: "5.25rem",
        21.5: "5.375rem",
        22: "5.5rem",
        22.5: "5.625rem",
        24.5: "6.125rem",
        25: "6.25rem",
        25.5: "6.375rem",
        26: "6.5rem",
        27: "6.75rem",
        27.5: "6.875rem",
        28.5: "7.125rem",
        29: "7.25rem",
        29.5: "7.375rem",
        30: "7.5rem",
        31: "7.75rem",
        32.5: "8.125rem",
        33: "8.25rem",
        34: "8.5rem",
        34.5: "8.625rem",
        35: "8.75rem",
        36.5: "9.125rem",
        37.5: "9.375rem",
        39: "9.75rem",
        39.5: "9.875rem",
        40: "10rem",
        42.5: "10.625rem",
        44: "11rem",
        45: "11.25rem",
        46: "11.5rem",
        46.5: "11.625rem",
        47.5: "11.875rem",
        49: "12.25rem",
        50: "12.5rem",
        52: "13rem",
        52.5: "13.125rem",
        54: "13.5rem",
        54.5: "13.625rem",
        55: "13.75rem",
        55.5: "13.875rem",
        59: "14.75rem",
        60: "15rem",
        62.5: "15.625rem",
        65: "16.25rem",
        67: "16.75rem",
        67.5: "16.875rem",
        70: "17.5rem",
        72.5: "18.125rem",
        73: "18.25rem",
        75: "18.75rem",
        90: "22.5rem",
        94: "23.5rem",
        95: "23.75rem",
        100: "25rem",
        103: "25.75rem",
        115: "28.75rem",
        125: "31.25rem",
        132.5: "33.125rem",
        150: "37.5rem",
        171.5: "42.875rem",
        180: "45rem",
        187.5: "46.875rem",
        203: "50.75rem",
        230: "57.5rem",
        242.5: "60.625rem",
      },
      maxWidth: {
        2.5: "0.625rem",
        3: "0.75rem",
        4: "1rem",
        7: "1.75rem",
        9: "2.25rem",
        10: "2.5rem",
        10.5: "2.625rem",
        11: "2.75rem",
        13: "3.25rem",
        14: "3.5rem",
        15: "3.75rem",
        16: "4rem",
        22.5: "5.625rem",
        25: "6.25rem",
        30: "7.5rem",
        34: "8.5rem",
        35: "8.75rem",
        40: "10rem",
        42.5: "10.625rem",
        44: "11rem",
        45: "11.25rem",
        46.5: "11.625rem",
        60: "15rem",
        70: "17.5rem",
        90: "22.5rem",
        94: "23.5rem",
        100: "25rem",
        103: "25.75rem",
        125: "31.25rem",
        132.5: "33.125rem",
        142.5: "35.625rem",
        150: "37.5rem",
        180: "45rem",
        203: "50.75rem",
        230: "57.5rem",
        242.5: "60.625rem",
        270: "67.5rem",
        280: "70rem",
        292.5: "73.125rem",
      },
      maxHeight: {
        35: "8.75rem",
        70: "17.5rem",
        90: "22.5rem",
        550: "34.375rem",
        300: "18.75rem",
      },
      minWidth: {
        22.5: "5.625rem",
        42.5: "10.625rem",
        47.5: "11.875rem",
        75: "18.75rem",
      },
      zIndex: {
        999999: "999999",
        99999: "99999",
        9999: "9999",
        999: "999",
        99: "99",
        9: "9",
        1: "1",
      },
      opacity: {
        65: ".65",
      },
      aspectRatio: {
        "4/3": "4 / 3",
        "21/9": "21 / 9",
      },
      backgroundImage: {
        video: "url('../images/video/video.png')",
      },
      content: {
        "icon-copy": 'url("../images/icon/icon-copy-alt.svg")',
      },
      transitionProperty: { width: "width", stroke: "stroke" },
      borderWidth: {
        6: "6px",
        10: "10px",
        12: "12px",
      },
      boxShadow: {
        default: "0px 4px 7px 0px rgba(0, 0, 0, 0.14)",
        error: "0px 12px 34px 0px rgba(13, 10, 44, 0.05)",
        card: "0px 1px 2px 0px rgba(0, 0, 0, 0.12)",
        "card-2": "0px 8px 13px -3px rgba(0, 0, 0, 0.07)",
        "card-3": "0px 2px 3px 0px rgba(183, 183, 183, 0.50)",
        "card-4": "0px 1px 3px 0px rgba(0, 0, 0, 0.12)",
        "card-5": "0px 1px 3px 0px rgba(0, 0, 0, 0.13)",
        "card-6": "0px 3px 8px 0px rgba(0, 0, 0, 0.08)",
        "card-7": "0px 0.5px 3px 0px rgba(0, 0, 0, 0.18)",
        "card-8": "0px 1px 2px 0px rgba(0, 0, 0, 0.10)",
        "card-9": "0px 1px 3px 0px rgba(0, 0, 0, 0.08)",
        "card-10": "0px 2px 3px 0px rgba(0, 0, 0, 0.10)",
        switcher:
          "0px 2px 4px rgba(0, 0, 0, 0.2), inset 0px 2px 2px #FFFFFF, inset 0px -1px 1px rgba(0, 0, 0, 0.1)",
        "switch-1": "0px 0px 4px 0px rgba(0, 0, 0, 0.10)",
        "switch-2": "0px 0px 5px 0px rgba(0, 0, 0, 0.15)",
        datepicker: "-5px 0 0 #1f2a37, 5px 0 0 #1f2a37",
        1: "0px 1px 2px 0px rgba(84, 87, 118, 0.12)",
        2: "0px 2px 3px 0px rgba(84, 87, 118, 0.15)",
        3: "0px 8px 8.466px 0px rgba(113, 116, 152, 0.05), 0px 8px 16.224px 0px rgba(113, 116, 152, 0.07), 0px 18px 31px 0px rgba(113, 116, 152, 0.10)",
        4: "0px 13px 40px 0px rgba(13, 10, 44, 0.22), 0px -8px 18px 0px rgba(13, 10, 44, 0.04)",
        5: "0px 10px 30px 0px rgba(85, 106, 235, 0.12), 0px 4px 10px 0px rgba(85, 106, 235, 0.04), 0px -18px 38px 0px rgba(85, 106, 235, 0.04)",
        6: "0px 12px 34px 0px rgba(13, 10, 44, 0.08), 0px 34px 26px 0px rgba(13, 10, 44, 0.05)",
        7: "0px 18px 25px 0px rgba(113, 116, 152, 0.05)",
      },
      dropShadow: {
        card: "0px 8px 13px rgba(0, 0, 0, 0.07)",
        1: "0px 1px 0px #E2E8F0",
        2: "0px 1px 4px rgba(0, 0, 0, 0.12)",
        3: "0px 0px 4px rgba(0, 0, 0, 0.15)",
        4: "0px 0px 2px rgba(0, 0, 0, 0.2)",
        5: "0px 1px 5px rgba(0, 0, 0, 0.2)",
      },
      keyframes: {
        linspin: {
          "100%": { transform: "rotate(360deg)" },
        },
        easespin: {
          "12.5%": { transform: "rotate(135deg)" },
          "25%": { transform: "rotate(270deg)" },
          "37.5%": { transform: "rotate(405deg)" },
          "50%": { transform: "rotate(540deg)" },
          "62.5%": { transform: "rotate(675deg)" },
          "75%": { transform: "rotate(810deg)" },
          "87.5%": { transform: "rotate(945deg)" },
          "100%": { transform: "rotate(1080deg)" },
        },
        "left-spin": {
          "0%": { transform: "rotate(130deg)" },
          "50%": { transform: "rotate(-5deg)" },
          "100%": { transform: "rotate(130deg)" },
        },
        "right-spin": {
          "0%": { transform: "rotate(-130deg)" },
          "50%": { transform: "rotate(5deg)" },
          "100%": { transform: "rotate(-130deg)" },
        },
        rotating: {
          "0%, 100%": { transform: "rotate(360deg)" },
          "50%": { transform: "rotate(0deg)" },
        },
        topbottom: {
          "0%, 100%": { transform: "translate3d(0, -100%, 0)" },
          "50%": { transform: "translate3d(0, 0, 0)" },
        },
        bottomtop: {
          "0%, 100%": { transform: "translate3d(0, 0, 0)" },
          "50%": { transform: "translate3d(0, -100%, 0)" },
        },
        line: {
          "0%, 100%": { transform: "translateY(0)" },
          "50%": { transform: "translateY(100%)" },
        },
        "line-revert": {
          "0%, 100%": { transform: "translateY(100%)" },
          "50%": { transform: "translateY(0)" },
        },
      },
      animation: {
        linspin: "linspin 1568.2353ms linear infinite",
        easespin: "easespin 5332ms cubic-bezier(0.4, 0, 0.2, 1) infinite both",
        "left-spin":
          "left-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both",
        "right-spin":
          "right-spin 1333ms cubic-bezier(0.4, 0, 0.2, 1) infinite both",
        "ping-once": "ping 5s cubic-bezier(0, 0, 0.2, 1)",
        rotating: "rotating 30s linear infinite",
        topbottom: "topbottom 60s infinite alternate linear",
        bottomtop: "bottomtop 60s infinite alternate linear",
        "spin-1.5": "spin 1.5s linear infinite",
        "spin-2": "spin 2s linear infinite",
        "spin-3": "spin 3s linear infinite",
        line1: "line 10s infinite linear",
        line2: "line-revert 8s infinite linear",
        line3: "line 7s infinite linear",
      },
    },
  },
  plugins: [],
};
export default config;


================================================
File: tsconfig.app.json
================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}


================================================
File: tsconfig.json
================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


================================================
File: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}


================================================
File: vercel.json
================================================
{
  "rewrites": [{ "source": "/(.*)", "destination": "/index.html" }]
}


================================================
File: vite.config.ts
================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})


================================================
File: public/firebase-messaging-sw.js
================================================
/* eslint-disable no-undef */
// Give the service worker access to Firebase Messaging.
// Note that you can only use Firebase Messaging here
importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js');

// Initialize the Firebase app in the service worker by passing in
// your app's Firebase config object.
firebase.initializeApp({
  apiKey: "AIzaSyCozUySs4wmujXlY_NZl8MKkIu8rZkpgic",
  authDomain: "connectcrm-b29a2.firebaseapp.com",
  projectId: "connectcrm-b29a2",
  storageBucket: "connectcrm-b29a2.firebasestorage.app",
  messagingSenderId: "690967737660",
  appId: "1:690967737660:web:d542a11843a7241c9d5a39",
  measurementId: "G-G3NC1QYNWK"
});

// Retrieve an instance of Firebase Messaging so that it can handle background messages.
const messaging = firebase.messaging();

messaging.onBackgroundMessage((payload) => {
  console.log('Received background message:', payload);

  const notificationTitle = payload.notification.title;
  const notificationOptions = {
    body: payload.notification.body,
    icon: '/firebase-logo.png'
  };

  navigator.serviceWorker.registration.showNotification(notificationTitle, notificationOptions);
});


================================================
File: src/App.tsx
================================================
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import NotFound from "./Pages/NotFound/NotFound";
import navRoutes from "./routes/routes";
import Dashboard from "./Pages/Dashboard/Dashboard";
import Overview from "./components/Dashboard/Overview";
import { PrivateRoute } from "./components/Utils/PrivateRoute";
import { ToastContainer } from "react-toastify";
import SignUp from "./components/Auth/SignUp";
import Signin from "./components/Auth/Signin";
import "react-toastify/dist/ReactToastify.css";
import UniversalLoader from "./components/CommonUI/Loader";
import { useEffect, useState } from "react";
import ForgotPassword from "./Pages/ForgotPassword/ForgotPassword";
import SMSReport from "./Pages/SMS/SMSReport";

export default function App() {
  const [loaderTime, setLoaderTime] = useState(true);
  //   const [loginState, setLoginState] = useState(false);
  //   useEffect(() => {
  //     const authenticated = islogined();
  //     if (!authenticated) {
  //       navigate("/login");
  //     }
  //     setLoginState(true);
  //   }, []);

  //   if (!loginState)
  //     return (
  //       <div className="w-full h-screen flex justify-center items-center">
  //         <Spin size="large" />
  //       </div>
  //     );
  useEffect(() => {
    setTimeout(() => {
      setLoaderTime(false);
    }, 2800);
  }, []);
  if (loaderTime) return <UniversalLoader />;
  return (
    <>
      <ToastContainer
        position="top-center"
        autoClose={4000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
      <Router>
        <Routes>
          {/* Define your routes here */}
          <Route
            path="/"
            element={
              // <PrivateRoute>
                <Dashboard />
              // </PrivateRoute>
            }
          >
            <Route index element={<SMSReport />} />;
            {navRoutes?.map((route, item) => {
              const routProps = {
                path: route.path,
                Component: route.component,
              };
              return <Route key={route.path + item} {...routProps} />;
            })}
          </Route>
          <Route path="/login" element={<Signin />} />
          <Route path="/signup" element={<SignUp />} />
          <Route path="*" element={<NotFound text={"Not found 404"} />} />
          <Route path="/forgot-password" element={<ForgotPassword />} />
          {/* <Route path="/reset-password" element={<ResetPassword />} />   */}
        </Routes>
      </Router>
    </>
  );
}


================================================
File: src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;


================================================
File: src/main.tsx
================================================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import App from "./App.tsx";
import "./index.css";
import "./scrollBar.css";
import "./css/linePattern.css";
import "./css/satoshi.css";
import "./css/style.css";
import "flatpickr/dist/flatpickr.min.css";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <App />
  </StrictMode>
);


================================================
File: src/scrollBar.css
================================================
/* Modern Scrollbar Styles */
:root {
    --scrollbar-track-color: transparent;
    --scrollbar-thumb-color: rgba(0, 0, 0, 0.2);
    --scrollbar-thumb-hover-color: rgba(0, 0, 0, 0.3);
    --scrollbar-width: 8px;
    --scrollbar-height: 8px;
    --scrollbar-minlen: 30px;
  }
  
  /* Dark mode variables */
  [data-theme='dark'], .dark {
    --scrollbar-thumb-color: rgba(255, 255, 255, 0.2);
    --scrollbar-thumb-hover-color: rgba(255, 255, 255, 0.3);
  }
  
  /* Firefox scrollbar */
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);
  }
  
  /* WebKit/Chromium scrollbar */
  ::-webkit-scrollbar {
    width: var(--scrollbar-width);
    height: var(--scrollbar-height);
  }
  
  ::-webkit-scrollbar-track {
    background: var(--scrollbar-track-color);
    border-radius: var(--scrollbar-width);
  }
  
  ::-webkit-scrollbar-thumb {
    background: var(--scrollbar-thumb-color);
    border-radius: var(--scrollbar-width);
    min-height: var(--scrollbar-minlen);
    min-width: var(--scrollbar-minlen);
    transition: background-color 0.2s ease-in-out;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: var(--scrollbar-thumb-hover-color);
  }
  
  /* Hide scrollbar while not scrolling */
  ::-webkit-scrollbar-thumb {
    opacity: 0;
    visibility: hidden;
  }
  
  /* Show scrollbar when hovering or scrolling */
  :hover::-webkit-scrollbar-thumb,
  ::-webkit-scrollbar-thumb:hover,
  ::-webkit-scrollbar-thumb:active {
    opacity: 1;
    visibility: visible;
  }
  
  /* Corner where vertical and horizontal scrollbars meet */
  ::-webkit-scrollbar-corner {
    background: transparent;
  }
  
  /* Optional: Hide scrollbar on mobile devices */
  @media (max-width: 768px) {
    ::-webkit-scrollbar {
      width: 4px;
      height: 4px;
    }
  }

================================================
File: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />


================================================
File: src/Pages/Logout.tsx
================================================
import React, { useEffect } from "react";
import { handleLogout } from "../utils/handleLogOut";

export default function Logout() {
  useEffect(() => {
    handleLogout();
  }, []);
  return <div></div>;
}


================================================
File: src/Pages/ApiIntegeration/ApiIntegeration.tsx
================================================
import { useEffect, useState } from "react";
import { CopyOutlined } from "@ant-design/icons";
import TextAreaCustom from "../../components/FormElements/TextArea/TextAreaCustom";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import Heading from "../../components/CommonUI/Heading";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { Link } from "react-router-dom";
import BlurTv from "../../components/CommonUI/NoDataFound/BlurTv";
import MiniLoader from "../../components/CommonUI/Loader/MiniLoader";
import { getStoredSources } from "../../api/commonAPI";
import { toast } from "react-toastify";

interface LeadSource {
  value: string;
  label: string;
}

const tempData = getStoredSources(true);
export default function ApiIntegeration() {
  const [curl, setCurl] = useState("");

  const [selectedService, setSelectedService] = useState("");
  const [data, setData] = useState<LeadSource[]>([]);
  // const [data, setData] = useState<LeadSource[]>(tempData);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    fetchLeadSources();
  }, []);

  const fetchLeadSources = async () => {
    try {
      setIsLoading(true);
      const { data: response, error } = await API.getAuthAPI(
        END_POINT.LEAD_SOURCES,
        true
      );

      if (error) return;

      if (response) {
        // Transform API response to match component's data structure
        const filteredData = response.filter(
          (item: { isApiRequired: boolean }) => item.isApiRequired
        );
        const transformedData: LeadSource[] = filteredData.map((item: any) => ({
          value: item._id,
          label: item.name,
        }));
        setData(transformedData);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to fetch lead sources");
    } finally {
      setIsLoading(false);
    }
  };

  const fetchCurl = async (id: string) => {
    try {
      setIsLoading(true);

      const { data, error } = await API.getAuthAPI(
        `${END_POINT.GET_CURL}?leadSource=${id}`,
        true
      );

      if (error) return;

      setCurl(data?.curlCommand);
    } catch (error: any) {
      console.error(error.message || "Failed to fetch leads");
    } finally {
      setIsLoading(false);
    }
  };

  const copyText = () => {
    navigator.clipboard
      .writeText(curl)
      .then(() => {
        toast.success("Text copied to clipboard");
      })
      .catch((err) => {
        toast.error("Failed to copy text: ", err);
      });
  };

  const handleChange = (value: string) => {
    fetchCurl(value);
    setSelectedService(value);
  };

  if (isLoading) {
    return <MiniLoader />;
  }
  return (
    <div className="flex w-full h-full flex-col items-start gap-3 rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
      <Heading title="Integerate Lead Outsourcing Partner" />

      {data?.length ? (
        <>
          <div className="flex flex-col items-center gap-3 w-full sm:w-auto sm:flex-row ">
            <span className="sm:w-[347px] w-auto text-base font-semibold text-dark dark:text-white">
              Choose your API Service:
            </span>
            <SelectGroupOne
              options={data}
              wrapperClasses="w-[300px]"
              selectedOption={selectedService}
              setSelectedOption={handleChange}
            />
          </div>
          <div className="relative w-full">
            {curl && (
              <CopyOutlined
                className={`absolute right-[14px] top-[18px] ${
                  curl
                    ? "cursor-pointer text-blue"
                    : "cursor-not-allowed opacity-50"
                }`}
                onClick={copyText}
              />
            )}
            <TextAreaCustom
              rows={12}
              placeholder="Your curl will appear here."
              customClasses="w-full"
              value={curl}
              readOnly
              onChange={(e) => {
                // e.target.value will be properly typed as string
                console.log(e.target.value);
              }}
            />
          </div>
        </>
      ) : (
        <div className="w-full h-[100%] flex flex-col gap-8 justify-center items-center text-base font-semibold text-dark dark:text-white">
          <BlurTv message="404 No Data Found!" />
          <span className="text-center">
            No API Service found. <br /> You can enable them from <br />
            <Link to="/settings/3">
              <span className="hover:text-blue hover:underline">
                {" Setting >> CRM Field >> Lead Source Name "}
              </span>
            </Link>
          </span>
        </div>
      )}
    </div>
  );
}


================================================
File: src/Pages/CallManage/EmployeeList.tsx
================================================
import React, { useState, useEffect } from "react";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import useScreenHook from "../../hooks/useScreenHook";
import CustomAntdTable from "../../components/Tables/CustomAntdTable";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";
import dayjs from "dayjs";
import Heading from "../../components/CommonUI/Heading";
import AntDateTimePicker from "../../components/FormElements/DatePicker/AntDateTimePicker";

interface EmployeeData {
  key: string;
  srNo: number;
  user: string;
  higstestNoOfCall: number;
  totalDuration: string;
  averageCallDuration: string;
}

interface EmployeeResponse {
  employeeId: string;
  userId: string;
  user: string;
  email: string;
  phone: string;
  role: string;
  highestCalls: number;
  totalDuration: string;
  averageCallDuration: string;
  callDetails: {
    incoming: number;
    outgoing: number;
    missed: number;
    rejected: number;
    unknown: number;
  };
}

const fromDateInitial = new Date(
  new Date().setMonth(new Date().getMonth() - 1)
);

const EmployeeList: React.FC = () => {
  const [startDate, setStartDate] = useState<string>(
    fromDateInitial?.toISOString()
  );
  const [endDate, setEndDate] = useState<string>(new Date()?.toISOString());
  const [data, setData] = useState<EmployeeData[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { deviceType } = useScreenHook();

  const columns = [
    {
      title: "Sr. No.",
      dataIndex: "srNo",
      key: "srNo",
      align: "center" as const,
      minWidth: 80,
    },
    {
      title: "User",
      dataIndex: "user",
      key: "user",
      align: "center" as const,
    },
    {
      title:
        deviceType === "mobile" ? "Number of Calls" : "Highest No. of Calls",
      dataIndex: "higstestNoOfCall",
      key: "higstestNoOfCall",
      minWidth: 142,
      align: "center" as const,
    },
    {
      title: "Total Duration",
      dataIndex: "totalDuration",
      key: "totalDuration",
      minWidth: 127,
      align: "center" as const,
    },
    {
      title: "Average Call Duration",
      dataIndex: "averageCallDuration",
      key: "averageCallDuration",
      minWidth: 180,
      align: "center" as const,
    },
  ];

  useEffect(() => {
    fetchEmployeeData();
  }, []); // Initial fetch

  const fetchEmployeeData = async () => {
    try {
      setIsLoading(true);
      const payload = {
        startDate,
        endDate,
      };

      const { data: response, error } = await API.postAuthAPI(
        payload,
        END_POINT.EMPLOYEE_REPORT,
        true
      );

      if (error) throw new Error(error);

      if (response?.employeeList) {
        const transformedData: EmployeeData[] = response.employeeList.map(
          (employee: EmployeeResponse, index: number) => ({
            key: employee.userId,
            srNo: index + 1,
            user: employee.user,
            higstestNoOfCall: employee.highestCalls,
            totalDuration: employee.totalDuration,
            averageCallDuration: employee.averageCallDuration,
          })
        );
        setData(transformedData);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to fetch employee data");
    } finally {
      setIsLoading(false);
    }
  };

  const handleStartDateChange = (_selectedDates: Date[], dateStr: string) => {
    setStartDate(dateStr);
  };

  const handleEndDateChange = (_selectedDates: Date[], dateStr: string) => {
    setEndDate(dateStr);
  };

  const handleSubmit = () => {
    if (!startDate || !endDate) {
      toast.error("Please select both start and end dates");
      return;
    }
    if (dayjs(endDate).isBefore(dayjs(startDate))) {
      toast.error("End date cannot be before start date");
      return;
    }
    fetchEmployeeData();
  };

  const handleRefresh = () => {
    fetchEmployeeData();
  };

  return (
    <div className="rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
      <Heading title="Employee List" />

      <div className="mb-6 flex flex-col gap-4 items-center justify-between sm:flex-row">
        <div className="flex flex-col w-full items-center gap-4 sm:flex-row">
          <div className="w-full lg:w-1/4">
            <AntDateTimePicker
              label="From Date"
              onChange={handleStartDateChange}
              defaultValue={startDate}
              // enableTime
            />
          </div>
          <div className="w-full lg:w-1/4">
            <AntDateTimePicker
              label="To Date"
              onChange={handleEndDateChange}
              defaultValue={endDate}
              // enableTime
            />
          </div>
        </div>
        <div className="flex items-center space-x-4">
          <ButtonDefault
            label={isLoading ? "Loading..." : "Submit"}
            onClick={handleSubmit}
            variant="primary"
            customClasses="bg-primary text-white"
            disabled={isLoading}
          />
          <ButtonDefault
            label="Refresh"
            onClick={handleRefresh}
            variant="secondary"
            customClasses="bg-green-500 text-white"
            disabled={isLoading}
          />
        </div>
      </div>

      <CustomAntdTable
        columns={columns}
        dataSource={data}
        pagination={false}
        className="w-full"
        isLoading={isLoading}
      />
    </div>
  );
};

export default EmployeeList;


================================================
File: src/Pages/CallManage/EmployeeReport.tsx
================================================
import React, { useEffect, useMemo, useState, useCallback } from "react";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import CallDetails from "./components/CallDetails";
import AnalysisReport from "./components/AnalysisReport";
import Summary from "./components/Summary";
import TabPanel from "../../components/TabPanel/TabPanel";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import { getStoredAgents } from "../../api/commonAPI";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";
import dayjs from "dayjs";
import AntDateTimePicker from "../../components/FormElements/DatePicker/AntDateTimePicker";

interface CallListResponse {
  calls: any[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    pages: number;
  };
}

interface CallReport {
  summary: {
    callType: Array<{
      calltype: string;
      calls: number;
      duration: string;
    }>;
    stats: {
      missCall: number;
      notConnectedCall: number;
      connectedCalls: number;
      rejected: number;
      workingHours: string;
    };
  };
  analysis: {
    mobileCallAnalysis: {
      topCaller: {
        number: string;
        totalCalls: number;
      };
    };
    totalCallDurationAnalysis: {
      longestDuration: {
        duration: string;
        callTo: string;
        callTime: string;
      };
    };
    averageCallDurationAnalysis: {
      perCall: string;
      totalCalls: number;
      perDay: string;
      totalDays: number;
    };
  };
}

const fromDateInitial = new Date(
  new Date().setMonth(new Date().getMonth() - 1)
);

const EmployeeReport: React.FC = () => {
  const [employee, setEmployee] = useState<any[]>([]);
  const [selectedEmployee, setSelectedEmployee] = useState<{
    value: string;
    label: string;
  } | null>(null);
  const [fromDate, setFromDate] = useState(fromDateInitial);
  const [toDate, setToDate] = useState(new Date());
  const [reportData, setReportData] = useState<CallReport | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [callListData, setCallListData] = useState<any[]>([]);
  const [searchText, setSearchText] = useState("");
  const [callListLoading, setCallListLoading] = useState(false);
  const [activeEmployee, setActiveEmployee] = useState<{
    value: string;
    label: string;
  } | null>({ value: "", label: "" });
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0,
  });

  const employeeList = useMemo(() => getStoredAgents() || [], []);

  const fetchCallList = useCallback(
    async (
      page: number,
      pageSize: number,
      search: string,
      userId: string,
      startDate: Date,
      endDate: Date
    ) => {
      if (!userId) return;

      try {
        setCallListLoading(true);
        const payload = {
          userId,
          startDate: dayjs(startDate).format("YYYY-MM-DD"),
          endDate: dayjs(endDate).format("YYYY-MM-DD"),
        };
        const params = new URLSearchParams({
          page: page.toString(),
          limit: pageSize.toString(),
          ...(search && { search }),
        });

        const { data, error } = await API.postAuthAPI<CallListResponse>(
          payload,
          `${END_POINT.CALL_LIST}?${params.toString()}`,
          true
        );

        if (error) throw new Error(error);
        if (data) {
          setCallListData(data.calls);
          setPagination({
            current: data.pagination.page,
            pageSize: data.pagination.limit,
            total: data.pagination.total,
          });
        }
      } catch (error: any) {
        console.error(error.message || "Failed to fetch call list");
      } finally {
        setCallListLoading(false);
      }
    },
    []
  );

  const fetchReportData = async (
    initialRender = false,
    initialEmployee: { value: string; label: string }
  ) => {
    try {
      setIsLoading(true);
      const currentUser = initialRender ? initialEmployee : selectedEmployee;

      setActiveEmployee(currentUser);

      const payload = {
        userId: currentUser?.value,
        startDate: dayjs(fromDate).format("YYYY-MM-DD"),
        endDate: dayjs(toDate).format("YYYY-MM-DD"),
      };

      const { data, error } = await API.postAuthAPI(
        payload,
        END_POINT.EMPLOYEE_REPORT,
        true
      );

      if (error) throw new Error(error);

      setReportData(data);

      // Fetch call list with same parameters
      if (currentUser?.value) {
        fetchCallList(
          1,
          pagination.pageSize,
          searchText,
          currentUser?.value,
          fromDate,
          toDate
        );
      }
    } catch (error: any) {
      console.error(error.message || "Failed to fetch report data");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (!employeeList.length) return;
    const obj = employeeList.map((item) => ({
      value: item._id,
      label: item.name,
    }));
    setEmployee(obj);
    setSelectedEmployee(obj[0]);
    fetchReportData(true, obj[0]);
  }, [employeeList]);

  const handleEmployeeChange = (value: string) => {
    const obj = employee.find((item) => item.value === value);
    setSelectedEmployee(obj || null);
  };

  const handleFromDateChange = (_selectedDates: Date[], dateStr: string) => {
    setFromDate(new Date(dateStr));
  };

  const handleToDateChange = (_selectedDates: Date[], dateStr: string) => {
    setToDate(new Date(dateStr));
  };

  const handleApply = () => {
    if (!selectedEmployee) {
      toast.error("Please select an employee");
      return;
    }
    fetchReportData(false, { value: "", label: "" });
  };

  const handleSearch = useCallback(
    (value: string) => {
      setSearchText(value);
      if (selectedEmployee) {
        fetchCallList(
          1,
          pagination.pageSize,
          value,
          selectedEmployee.value,
          fromDate,
          toDate
        );
      }
    },
    [selectedEmployee, fromDate, toDate, pagination.pageSize, fetchCallList]
  );

  const handleTableChange = useCallback(
    (newPagination: any, pageSize: any) => {
      if (selectedEmployee) {
        fetchCallList(
          newPagination,
          pageSize,
          searchText,
          selectedEmployee.value,
          fromDate,
          toDate
        );
      }
    },
    [selectedEmployee, searchText, fromDate, toDate, fetchCallList]
  );

  const memoizedCallDetails = useMemo(
    () => (
      <CallDetails
        data={callListData}
        loading={callListLoading}
        onSearch={handleSearch}
        pagination={pagination}
        onTableChange={handleTableChange}
        searchText={searchText}
      />
    ),
    [
      callListData,
      callListLoading,
      handleSearch,
      pagination,
      handleTableChange,
      searchText,
    ]
  );

  const tabsData = useMemo(
    () => [
      {
        tabName: "Summary",
        component: <Summary data={reportData?.summary} isLoading={isLoading} />,
      },
      {
        tabName: "Analysis",
        component: (
          <AnalysisReport data={reportData?.analysis} isLoading={isLoading} />
        ),
      },
      {
        tabName: "Call Details",
        component: memoizedCallDetails,
      },
    ],
    [reportData, isLoading, memoizedCallDetails]
  );

  return (
    <div className="rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
      <h2 className="text-xl text-center font-semibold text-dark dark:text-white sm:text-2xl">
        {activeEmployee?.label ? `${activeEmployee?.label}'s Report` : "Report"}
      </h2>
      <hr className="my-4" />
      <div className="mb-6 flex flex-wrap items-end gap-4">
        <div className="w-full lg:w-1/4">
          <SelectGroupOne
            label="Select Employee"
            placeholder="Select Employee"
            options={employee}
            selectedOption={selectedEmployee?.value}
            setSelectedOption={handleEmployeeChange}
          />
        </div>
        <div className="w-full lg:w-1/4">
          <AntDateTimePicker
            label="From Date"
            onChange={handleFromDateChange}
            defaultValue={fromDate.toISOString()}
          />
        </div>
        <div className="w-full lg:w-1/4">
          <AntDateTimePicker
            label="To Date"
            onChange={handleToDateChange}
            defaultValue={toDate.toISOString()}
          />
        </div>
        <ButtonDefault
          label={isLoading ? "Loading..." : "Apply"}
          onClick={handleApply}
          customClasses="min-w-[130px]"
          disabled={isLoading || !selectedEmployee}
        />
      </div>

      <TabPanel
        tabsData={tabsData}
        type="line"
        tabPosition="top"
        defaultActiveKey="1"
      />
    </div>
  );
};

export default EmployeeReport;


================================================
File: src/Pages/CallManage/components/AnalysisReport.tsx
================================================
import React from "react";
import { Card, Row, Col, Typography, Spin } from "antd";
import { PhoneOutlined, ClockCircleOutlined, BarChartOutlined } from "@ant-design/icons";

const { Title, Text, Paragraph } = Typography;

interface AnalysisProps {
  data?: {
    mobileCallAnalysis: {
      topCaller: {
        number: string;
        totalCalls: number;
      };
    };
    totalCallDurationAnalysis: {
      longestDuration: {
        duration: string;
        callTo: string;
        callTime: string;
      };
    };
    averageCallDurationAnalysis: {
      perCall: string;
      totalCalls: number;
      perDay: string;
      totalDays: number;
    };
  };
  isLoading?: boolean;
}

interface AnalysisCardProps {
  icon: React.ReactNode;
  title: string;
  children: React.ReactNode;
}

const AnalysisCard: React.FC<AnalysisCardProps> = ({ icon, title, children }) => (
  <Card className="h-full bg-white dark:bg-gray-800 shadow-md">
    <div className="flex items-center mb-4">
      {icon}
      <Title level={4} className="ml-2 mb-0 dark:text-white">
        {title}
      </Title>
    </div>
    {children}
  </Card>
);

const AnalysisReport: React.FC<AnalysisProps> = ({ data, isLoading }) => {
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[400px]">
        <Spin size="large" />
      </div>
    );
  }

  if (!data) {
    return (
      <div className="text-center p-6 text-gray-500 dark:text-gray-400">
        No analysis data available
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-100 dark:bg-gray-900">
      <Row gutter={[16, 16]}>
        {/* Mobile Call Analysis Card */}
        <Col xs={24} md={8}>
          <AnalysisCard
            icon={<PhoneOutlined className="text-2xl text-blue-500" />}
            title="Mobile Call Analysis"
          >
            <div className="border-l-4 border-yellow-500 pl-4 mb-4">
              <Text strong className="block mb-2 dark:text-white">
                Top Caller
              </Text>
              <Text className="dark:text-gray-300">
                {data.mobileCallAnalysis?.topCaller?.number}
              </Text>
              <Text strong className="block mt-4 mb-2 dark:text-white">
                Total Calls: {data.mobileCallAnalysis?.topCaller?.totalCalls} (Incoming + Outgoing)
              </Text>
            </div>
            <Paragraph className="text-sm text-gray-600 dark:text-gray-400">
              Highest total number of outgoing (dialed), incoming (answered) or both (caller) among all registered mobile numbers.
            </Paragraph>
          </AnalysisCard>
        </Col>

        {/* Total Call Duration Analysis Card */}
        <Col xs={24} md={8}>
          <AnalysisCard
            icon={<ClockCircleOutlined className="text-2xl text-green-500" />}
            title="Total Call Duration Analysis"
          >
            <div className="border-l-4 border-yellow-500 pl-4 mb-4">
              <Text strong className="block mb-2 dark:text-white">
                Longest Duration
              </Text>
              <Text className="dark:text-gray-300">
                Duration: {data.totalCallDurationAnalysis?.longestDuration?.duration}
              </Text>
              <Text strong className="block mt-2 mb-2 dark:text-white">
                Call To: {data.totalCallDurationAnalysis?.longestDuration?.callTo}
              </Text>
              <Text strong className="block mb-2 dark:text-white">
                Call Time: {data.totalCallDurationAnalysis?.longestDuration?.callTime}
              </Text>
            </div>
            <Paragraph className="text-sm text-gray-600 dark:text-gray-400">
              Highest total call duration (incoming and outgoing) among all registered mobile numbers and longest call duration (incoming or outgoing) from one mobile number among all.
            </Paragraph>
          </AnalysisCard>
        </Col>

        {/* Average Call Duration Analysis Card */}
        <Col xs={24} md={8}>
          <AnalysisCard
            icon={<BarChartOutlined className="text-2xl text-purple-500" />}
            title="Average Call Duration Analysis"
          >
            <div className="border-l-4 border-yellow-500 pl-4 mb-4">
              <Text strong className="block mb-2 dark:text-white">
                Average Duration per Call
              </Text>
              <Text className="dark:text-gray-300">
                {data.averageCallDurationAnalysis?.perCall} (Total Calls: {data.averageCallDurationAnalysis?.totalCalls})
              </Text>
              <Text strong className="block mt-4 mb-2 dark:text-white">
                Average Duration per Day
              </Text>
              <Text className="dark:text-gray-300">
                {data.averageCallDurationAnalysis?.perDay} (Total Days: {data.averageCallDurationAnalysis?.totalDays})
              </Text>
            </div>
            <Paragraph className="text-sm text-gray-600 dark:text-gray-400">
              Average call duration (incoming and outgoing) among all registered mobile numbers, (i) per Call (ii) per Day
            </Paragraph>
          </AnalysisCard>
        </Col>
      </Row>

      <style>{`
        .dark .ant-card-bordered {
          border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .ant-typography {
          margin-bottom: 0;
        }
      `}</style>
    </div>
  );
};

export default AnalysisReport;

================================================
File: src/Pages/CallManage/components/CallDetails.tsx
================================================
import React, { memo } from "react";
import { Input } from "antd";
import type { ColumnsType } from "antd/es/table";
import CustomAntdTable from "../../../components/Tables/CustomAntdTable";

const { Search } = Input;

interface CallDetailsProps {
  data: any[];
  loading: boolean;
  onSearch: (value: string) => void;
  pagination: {
    current: number;
    pageSize: number;
    total: number;
  };
  onTableChange: (pagination: any, pageSize: any) => void;
  searchText: string;
}

const CallDetails: React.FC<CallDetailsProps> = ({
  data,
  loading,
  onSearch,
  pagination,
  onTableChange,
  searchText,
}) => {
  const columns: ColumnsType<any> = [
    {
      title: <span className="min-w-[80px]">Sr. No.</span>,
      key: "srNo",
      minWidth: 80,
      render: (_text, _record, index) => (
        <span>
          {(pagination.current - 1) * pagination.pageSize + index + 1}
        </span>
      ),
    },
    {
      title: "Client Name",
      dataIndex: "clientName",
      key: "clientName",
    },
    {
      title: "Mobile No.",
      dataIndex: "mobileNo",
      key: "mobileNo",
    },
    {
      title: <span className="min-w-[144px]">Call Date Time</span>,
      dataIndex: "callDateTime",
      key: "callDateTime",
      minWidth: 144,
    },
    {
      title: <span className="min-w-[103px]">Duration</span>,
      dataIndex: "duration",
      key: "duration",
      minWidth: 103,
    },
    {
      title: "Call Type",
      dataIndex: "callType",
      key: "callType",
      render: (text: string) => (
        <span
          style={{
            color:
              text === "INCOMING"
                ? "#10b981"
                : text === "MISSED"
                ? "red"
                : "#3b82f6",
          }}
        >
          {text}
        </span>
      ),
    },
  ];

  return (
    <div className="dark:bg-gray-800">
      <div className="mb-4 flex justify-end">
        <Search
          placeholder="Search here"
          onSearch={onSearch}
          value={searchText}
          onChange={(e) => onSearch(e.target.value)}
          style={{ width: 200 }}
          className="h-[51px] dark:text-white"
        />
      </div>
      <CustomAntdTable
        columns={columns}
        dataSource={data}
        loading={loading}
        pagination={{
          ...pagination,
          showSizeChanger: true,
          showQuickJumper: true,
          onChange: onTableChange,
          showTotal: (total: number, range: any) =>
            `${range[0]}-${range[1]} of ${total} items`,
        }}
      />
      <style>{`
        .dark .ant-select-selector {
          background-color: #374151 !important;
          color: #fff !important;
        }
        .dark .ant-select-arrow {
          color: #fff;
        }
        .dark .ant-input-search {
          background-color: #374151;
        }
        .dark .ant-input-search input {
          background-color: #374151;
          color: #fff;
        }
        .ant-input-search input {
          height: 51px;
        }
        .ant-input-search .ant-input-search-button {
          height: 51px;
        }
        .dark
          .ant-input-search
          > .ant-input-group
          > .ant-input-group-addon:last-child
          .ant-input-search-button:not(.ant-btn-primary) {
          color: white;
        }
        .dark .ant-input::placeholder {
          color: white;
        }
      `}</style>
    </div>
  );
};

export default memo(CallDetails);


================================================
File: src/Pages/CallManage/components/Summary.tsx
================================================
import { useMemo } from "react";
import CustomAntdTable from "../../../components/Tables/CustomAntdTable";
import ReactApexChart from "react-apexcharts";
import { ApexOptions } from "apexcharts";
import useScreenHook from "../../../hooks/useScreenHook";
import { Spin } from "antd";

interface SummaryProps {
  data?: {
    callType: Array<{
      calltype: string;
      calls: number;
      duration: string;
    }>;
    stats: {
      missCall: number;
      notConnectedCall: number;
      connectedCalls: number;
      rejected: number;
      workingHours: string;
    };
  };
  isLoading?: boolean;
}

export default function Summary({ data, isLoading }: SummaryProps) {
  const { deviceType } = useScreenHook();

  const summaryColumns = [
    {
      title: "Call Type",
      dataIndex: "callType",
      key: "callType",
      render: (text: string) => (
        <span style={{ color: returnColorCode(text) }}>
          {text.charAt(0).toUpperCase() + text.slice(1)}
        </span>
      ),
    },
    { title: "Calls", dataIndex: "calls", key: "calls" },
    { title: "Duration", dataIndex: "duration", key: "duration" },
  ];

  const summaryData = useMemo(() => {
    if (!data?.callType) return [];
    return data.callType.map((item, index) => ({
      key: index.toString(),
      callType: item.calltype,
      calls: item.calls,
      duration: item.duration,
    }));
  }, [data]);

  const statsData = useMemo(() => {
    if (!data?.stats) return [];
    return [
      { type: "Miss Call", count: data.stats.missCall },
      { type: "Not Connected Call", count: data.stats.notConnectedCall },
      { type: "Connected Calls", count: data.stats.connectedCalls },
      { type: "Rejected", count: data.stats.rejected },
      { type: "Working Hours", count: data.stats.workingHours },
    ];
  }, [data]);

  const chartData = useMemo(() => {
    if (!data?.callType) return { series: [], labels: [] };
    const filtered = data.callType.filter((item) => item.calltype !== "total");
    return {
      series: filtered.map((item) => item.calls),
      labels: filtered.map(
        (item) =>
          `${
            item.calltype.charAt(0).toUpperCase() + item.calltype.slice(1)
          } Call`
      ),
    };
  }, [data]);

  const donutChartOptions: ApexOptions = {
    chart: { type: "donut" },
    labels: chartData.labels,
    colors: ["#10b981", "#3b82f6", "#fbbf24", "#ec4899", "#e74acb"],
    legend: {
      position: "right",
      fontSize: deviceType === "mobile" ? "7px" : "14px",
      fontFamily: "Helvetica, Arial, sans-serif",
      fontWeight: 400,
      itemMargin: { horizontal: 5, vertical: 2 },
    },
    plotOptions: {
      pie: {
        donut: { size: "65%" },
      },
    },
    dataLabels: {
      enabled: true,
      // distributed:true,
      style: {
        // fontSize: "14px",
        // fontFamily?: string
        // fontWeight?: string | number
        // colors: ["#ffffff","#ffffff","#ffffff","#ffffff","#ffffff"],
      },
      formatter: (val: number) => val.toFixed(0) + "%",
    },
    responsive: [
      {
        breakpoint: 480,
        options: {
          chart: { width: "100%" },
        },
      },
    ],
  };

  const returnColorCode = (type: string): string => {
    const colors: {
      [key in
        | "incoming"
        | "outgoing"
        | "missed"
        | "rejected"
        | "unknown"]: string;
    } = {
      incoming: "#10b981",
      outgoing: "#3b82f6",
      missed: "#fbbf24",
      rejected: "#ec4899",
      unknown: "#e74acb",
    };

    return colors[type.toLowerCase() as keyof typeof colors] || "#000000";
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-[400px]">
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center gap-3 lg:flex-row lg:gap-0">
      <div className="w-full max-w-[560px] pr-4">
        <CustomAntdTable
          columns={summaryColumns}
          dataSource={summaryData}
          pagination={false}
        />
      </div>
      <div className="flex w-full min-w-[167px] flex-wrap gap-3 lg:w-auto">
        {statsData.map((item) => (
          <div
            key={item.type}
            className="flex w-full max-w-[159px] flex-col justify-center bg-gray-100 p-2 px-4 dark:bg-gray-7 sm:max-w-[200px]"
          >
            <span className="text-gray-6 dark:text-gray-5">{item.type}</span>
            <span className="font-semibold text-dark dark:text-white">
              {item.count}
            </span>
          </div>
        ))}
      </div>
      <div className="w-full">
        {parseInt(data?.stats?.workingHours || "0") ? (
          <ReactApexChart
            options={donutChartOptions}
            series={chartData.series}
            type="donut"
            height={350}
          />
        ) : null}
      </div>
    </div>
  );
}


================================================
File: src/Pages/Components/AdditionalInformation.tsx
================================================
import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import InputGroup from "../../components/FormElements/InputGroup";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import { getStoredCountries } from "../../api/commonAPI";
import { API } from "../../api";

interface LeadData {
  _id: string;
  country: string;
  fullAddress: string;
  state: string;
  pinCode: string;
  city: string;
}

interface AdditionalInformationProps {
  leadData?: LeadData;
  onUpdate: (data: any) => Promise<void>;
  leadStatus?: string;
}

interface StateOption {
  value: string;
  label: string;
}

const AdditionalInformation: React.FC<AdditionalInformationProps> = ({
  leadData,
  onUpdate,
  leadStatus,
}) => {
  const countryOptions = getStoredCountries(true);

  const [isLoading, setIsLoading] = useState(false);
  const [stateOptions, setStateOptions] = useState<StateOption[]>([]);
  const [formData, setFormData] = useState({
    country: "",
    fullAddress: "",
    state: "",
    pinCode: "",
    city: "",
  });

  useEffect(() => {
    if (leadData) {
      setFormData({
        country: leadData.country || "",
        fullAddress: leadData.fullAddress || "",
        state: leadData.state || "",
        pinCode: leadData.pinCode || "",
        city: leadData.city || "",
      });
    }
  }, [leadData]);

  const fetchStates = async (countryCode: string) => {
    try {
      const response = await API.getAuthAPI(
        `locations/states/${countryCode}`,
        true
      );

      if (response.error) throw new Error(response.error);

      const states = response.data.map(
        (state: { name: string; _id: string }) => ({
          value: state._id,
          label: state.name,
        })
      );

      setStateOptions(states);
    } catch (error: any) {
      console.error(error.message || "Failed to fetch states");
      setStateOptions([]);
    }
  };

  useEffect(() => {
    if (formData.country) {
      fetchStates(formData.country);
    }
  }, [formData.country]);

  const validateForm = () => {
    const errors: string[] = [];

    // if (!formData.country) errors.push("Country is required");
    // if (!formData.fullAddress.trim()) errors.push("Full address is required");
    // if (!formData.state) errors.push("State is required");
    // if (!formData.city.trim()) errors.push("City is required");
    // if (!formData.pinCode.trim()) errors.push("Pincode is required");
    // if (formData.pinCode && !/^\d{6}$/.test(formData.pinCode)) {
    //   errors.push("Pincode must be 6 digits");
    // }

    if (errors.length > 0) {
      errors.forEach((error) => toast.error(error));
      return false;
    }
    return true;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
      // Reset state when country changes
      ...(name === "country" ? { state: "" } : {}),
    }));
  };

  const handleSubmit = async () => {
    try {
      if (!validateForm()) return;

      setIsLoading(true);
      const updatePayload = {
        country: formData.country,
        fullAddress: formData.fullAddress,
        state: formData.state,
        pinCode: formData.pinCode,
        city: formData.city,
        leadStatus,
        comment: "System Comment: Additional details updated!",
      };

      await onUpdate(updatePayload);
    } catch (error: any) {
      console.error(error.message || "Failed to update address details");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="rounded-lg bg-white dark:bg-gray-dark dark:text-white">
      <div className="flex w-full items-center border-b-2 border-solid border-gray py-2">
        <span className="w-[220px] text-lg font-medium">Address Details</span>
      </div>

      <div className="mb-8 flex flex-col sm:flex-row w-full justify-between gap-4 sm:gap-8">
        <div className="flex w-full flex-col gap-4 pt-3 border-r-0 pr-0 sm:border-r-2 sm:pr-8 text-dark dark:text-white">
          {/* Left Fields */}
          <SelectGroupOne
            label="Country"
            options={countryOptions}
            selectedOption={formData.country}
            setSelectedOption={(value) => handleSelectChange("country", value)}
            
          />

          <div>
            <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
              Full Address <span className="text-red-500">*</span>
            </label>
            <textarea
              name="fullAddress"
              value={formData.fullAddress}
              onChange={(e) => handleInputChange(e as any)}
              placeholder="Enter complete address"
              className="w-full rounded-lg border-[1.5px] border-stroke bg-transparent px-5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
              rows={3}
              
            />
          </div>

          <SelectGroupOne
            label="State"
            options={stateOptions}
            selectedOption={formData.state}
            setSelectedOption={(value) => handleSelectChange("state", value)}
            
            // isLoading={stateOptions.length === 0}
          />
        </div>

        {/* Right Fields */}
        <div className="flex w-full flex-col pt-3 gap-4">
          <InputGroup
            label="City"
            name="city"
            type="text"
            value={formData.city}
            onChange={handleInputChange}
            placeholder="Enter city name"
            
          />

          <InputGroup
            label="Pincode"
            name="pinCode"
            type="text"
            value={formData.pinCode}
            onChange={handleInputChange}
            placeholder="Enter 6-digit pincode"
            maxLength={6}
            pattern="\d*"
            
          />
        </div>
      </div>

      <div className="flex w-full justify-center">
        <ButtonDefault
          onClick={handleSubmit}
          label={isLoading ? "Updating..." : "Update Address"}
          variant="primary"
          disabled={isLoading}
        />
      </div>
    </div>
  );
};

export default AdditionalInformation;


================================================
File: src/Pages/Components/AdvanceFilterUI.tsx
================================================
import React, { useCallback, useEffect } from "react";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import {
  getStoredAgents,
  getStoredProductsServices,
  getStoredSources,
  getStoredStatus,
} from "../../api/commonAPI";
import dayjs from "dayjs";
import AntDateTimePicker from "../../components/FormElements/DatePicker/AntDateTimePicker";

interface AdvanceFilterUIProps {
  onFilter: (filters: {
    leadStatus?: string;
    assignedAgent?: string;
    productService?: string;
    leadSource?: string;
    startDate?: string;
    endDate?: string;
  }) => void;
  onReset: () => void;
  loading?: boolean;
  initialFilterData?: any;
  setIsAdvanceFilterEnable?: any;
}

interface FilterState {
  leadStatus: string;
  assignedAgent: string;
  productService: string;
  leadSource: string;
  startDate: string;
  endDate: string;
}

interface FilterValidFields {
  leadStatus?: string;
  assignedAgent?: string;
  productService?: string;
  leadSource?: string;
  startDate?: string;
  endDate?: string;
}

const AdvanceFilterUI: React.FC<AdvanceFilterUIProps> = ({
  onFilter,
  onReset,
  loading = false,
  initialFilterData = {},
  setIsAdvanceFilterEnable = () => {},
}) => {
  const agentList = getStoredAgents(true);
  const serviceList = getStoredProductsServices(true);
  const sourceList = getStoredSources(true);
  const statusList = getStoredStatus(true);
  const { filterType, statusId } = initialFilterData;

  const [filters, setFilters] = React.useState({
    leadStatus: "",
    assignedAgent: "",
    productService: "",
    leadSource: "",
    startDate: "",
    endDate: "",
  });
  const handleChange = (name: string, value: string) => {
    setFilters((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleDateChange = (name: string) => (_: Date[], dateStr: string) => {
    setFilters((prev) => ({
      ...prev,
      [name]: dateStr,
    }));
  };

  // Memoized filter submission logic
  const submitFilters = useCallback(
    (currentFilters: FilterState) => {
      const validFilters = Object.entries(currentFilters).reduce(
        (acc, [key, value]) => {
          if (value) {
            if (key === "startDate" || key === "endDate") {
              acc[key] = dayjs(value).format("YYYY-MM-DD");
            } else {
              acc[key] = value;
            }
          }
          return acc;
        },
        {} as any
      );

      onFilter(validFilters);
    },
    [onFilter]
  );

  const handleSubmit = () => {
    submitFilters(filters);
  };

  const handleReset = () => {
    setFilters({
      leadStatus: "",
      assignedAgent: "",
      productService: "",
      leadSource: "",
      startDate: "",
      endDate: "",
    });
    onReset();
  };

  // Effect to handle initial filter data
  useEffect(() => {
    const { filterType, statusId } = initialFilterData;

    if (filterType && statusId) {
      const newFilters = {
        ...filters,
        [filterType]: statusId,
      };
      setFilters(newFilters);
      submitFilters(newFilters);
    }
  }, [filterType, statusId, submitFilters]);

  return (
    <div className="rounded-lg bg-white p-6 mb-4 shadow-md dark:bg-gray-800">
      <div className="mb-4 grid sm:grid-cols-6 grid-cols-2 gap-4">
        <SelectGroupOne
          label="Select Status"
          placeholder="Select Status"
          options={statusList}
          selectedOption={filters.leadStatus}
          setSelectedOption={(value) => handleChange("leadStatus", value)}
          allowClear
        />
        <SelectGroupOne
          label="Select Employee"
          placeholder="Select Employee"
          options={agentList}
          selectedOption={filters.assignedAgent}
          setSelectedOption={(value) => handleChange("assignedAgent", value)}
          allowClear
        />
        <SelectGroupOne
          label="Select Product and Service"
          placeholder="Select Product and Service"
          options={serviceList}
          selectedOption={filters.productService}
          setSelectedOption={(value) => handleChange("productService", value)}
          allowClear
        />
        <SelectGroupOne
          label="Select Source"
          placeholder="Select Source"
          options={sourceList}
          selectedOption={filters.leadSource}
          setSelectedOption={(value) => handleChange("leadSource", value)}
          allowClear
        />
        <AntDateTimePicker
          label="Start Date"
          onChange={handleDateChange("startDate")}
          defaultValue={filters.startDate}
        />
        <AntDateTimePicker
          label="End Date"
          onChange={handleDateChange("endDate")}
          defaultValue={filters.endDate}
        />
      </div>
      <div className="w-full flex justify-center gap-4">
        <ButtonDefault
          label={loading ? "Filtering..." : "Apply Filters"}
          onClick={handleSubmit}
          variant="primary"
          customClasses="bg-blue-500 text-white"
          disabled={loading}
        />
        <ButtonDefault
          label="Reset"
          onClick={handleReset}
          variant="secondary"
          customClasses="bg-black text-white "
          disabled={loading}
        />
      </div>
    </div>
  );
};

export default React.memo(AdvanceFilterUI);


================================================
File: src/Pages/Components/AllDetailsFields.tsx
================================================
import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import InputGroup from "../../components/FormElements/InputGroup";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import {
  getStoredProductsServices,
  getStoredSources,
} from "../../api/commonAPI";

interface LeadData {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  contactNumber: string;
  leadSource: { _id: string; name: string };
  productService: { _id: string; name: string };
  assignedAgent: { _id: string; name: string };
  leadStatus: { _id: string; name: string };
  companyName: string;
  website: string;
  alternatePhone: string;
  leadCost: number;
  position?: string;
}

interface AllDetailsFieldsProps {
  leadData?: LeadData;
  onUpdate: (data: any) => Promise<void>;
  leadStatus: string;
}

const AllDetailsFields: React.FC<AllDetailsFieldsProps> = ({
  leadData,
  onUpdate,
  leadStatus = "",
}) => {
  const serviceList = getStoredProductsServices(true);
  const sourceLis = getStoredSources(true);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    companyName: "",
    website: "",
    productService: "",
    productServiceName: "",
    contactNumber: "",
    alternatePhone: "",
    leadSource: "",
    leadSourceName: "",
    leadCost: "",
    // position: "",
  });

  useEffect(() => {
    if (leadData) {      
      setFormData({
        firstName: leadData?.firstName || "",
        lastName: leadData?.lastName || "",
        email: leadData?.email || "",
        companyName: leadData?.companyName || "",
        website: leadData?.website || "",
        productService: leadData?.productService?._id || "",
        productServiceName: leadData?.productService?.name || "",
        contactNumber: leadData?.contactNumber || "",
        alternatePhone: leadData?.alternatePhone || "",
        leadSource: leadData?.leadSource?._id || "",
        leadSourceName: leadData?.leadSource?.name || "",
        leadCost: leadData?.leadCost?.toString() || "",
        // position: leadData.position || "",
      });
    }
  }, [leadData]);

  const validateForm = () => {
    const errors: string[] = [];

    if (!formData.firstName.trim()) errors.push("Name is required");
    // if (!formData.lastName.trim()) errors.push("Last name is required");
    // if (!formData.email.trim()) errors.push("Email is required");
    // if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
    //   errors.push("Please enter a valid email address");
    // }
    if (!formData.contactNumber.trim())
      errors.push("Contact number is required");
    if (!/^\d{10}$/.test(formData.contactNumber)) {
      errors.push("Contact number must be 10 digits");
    }
    if (formData.alternatePhone && !/^\d{10}$/.test(formData.alternatePhone)) {
      errors.push("Alternate phone number must be 10 digits");
    }
    if (!formData.leadSource) errors.push("Lead source is required");
    if (!formData.productService) errors.push("Service is required");
    if (formData.leadCost && isNaN(Number(formData.leadCost))) {
      errors.push("Lead cost must be a valid number");
    }

    if (errors.length > 0) {
      errors.forEach((error) => toast.error(error));
      return false;
    }
    return true;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async () => {
    try {
      if (!validateForm()) return;

      setIsLoading(true);
      const updatePayload = {
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        contactNumber: formData.contactNumber,
        leadSource: formData.leadSource,
        productService: formData.productService,
        companyName: formData.companyName,
        website: formData.website,
        alternatePhone: formData.alternatePhone,
        leadCost: Number(formData.leadCost) || 0,
        leadStatus,
        comment: "System Comment: Details update",
        // position: formData.position,
      };

      await onUpdate(updatePayload);
    } catch (error: any) {
      console.error(error.message || "Failed to update details");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="rounded-lg bg-white dark:bg-gray-dark dark:text-white">
      <div className="mb-8 flex w-full flex-col sm:flex-row justify-between gap-4 sm:gap-8">
        <div className="flex w-full flex-col gap-4 sm:border-r-2 sm:pr-8 border-r-0 pr-0 text-dark dark:text-white">
          {/* Left Fields */}
          <InputGroup
            label="Full Name"
            name="firstName"
            type="text"
            value={formData.firstName}
            onChange={handleInputChange}
            required
            placeholder="Enter full name"
          />

          {/* <InputGroup
            label="Last Name"
            name="lastName"
            type="text"
            value={formData.lastName}
            onChange={handleInputChange}
            required
            placeholder="Enter last name"
          /> */}

          <InputGroup
            label="Company Name"
            name="companyName"
            type="text"
            value={formData.companyName}
            onChange={handleInputChange}
            placeholder="Enter company name"
          />

          <SelectGroupOne
            label="Service"
            options={serviceList}
            selectedOption={formData.productService}
            setSelectedOption={(value) =>
              handleSelectChange("productService", value)
            }
            required
          />

          <InputGroup
            label="Alternative Phone"
            name="alternatePhone"
            type="tel"
            value={formData.alternatePhone}
            onChange={handleInputChange}
            placeholder="Enter alternative phone"
            maxLength={10}
          />

          <SelectGroupOne
            label="Lead Source"
            options={sourceLis}
            selectedOption={formData.leadSource}
            setSelectedOption={(value) =>
              handleSelectChange("leadSource", value)
            }
            required
          />
        </div>

        {/* Right Fields */}
        <div className="flex w-full flex-col gap-4">
          <InputGroup
            label="Email"
            name="email"
            type="email"
            value={formData.email}
            onChange={handleInputChange}
            placeholder="Enter email address"
          />

          <InputGroup
            label="Website"
            name="website"
            type="text"
            value={formData.website}
            onChange={handleInputChange}
            placeholder="Enter website URL"
          />

          <InputGroup
            label="Contact Number"
            name="contactNumber"
            type="tel"
            value={formData.contactNumber}
            onChange={handleInputChange}
            required
            placeholder="Enter contact number"
            maxLength={10}
          />

          {/* <InputGroup
            label="Position"
            name="position"
            type="text"
            value={formData.position}
            onChange={handleInputChange}
            placeholder="Enter position"
          /> */}

          <InputGroup
            label="Lead Cost"
            name="leadCost"
            type="number"
            value={formData.leadCost}
            onChange={handleInputChange}
            placeholder="Enter lead cost"
          />
        </div>
      </div>

      <div className="flex w-full justify-center">
        <ButtonDefault
          onClick={handleSubmit}
          label={isLoading ? "Updating..." : "Update Details"}
          variant="primary"
          disabled={isLoading}
        />
      </div>
    </div>
  );
};

export default AllDetailsFields;


================================================
File: src/Pages/Components/AttachmentTab.tsx
================================================
// AttachmentTab.tsx
import React, { useState, useRef, useEffect } from "react";
import { Button, Spin, message, Tooltip } from "antd";
import { DeleteFilled, EditFilled } from "@ant-design/icons";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import InputGroup from "../../components/FormElements/InputGroup";
import { FaMapMarkedAlt } from "react-icons/fa";
import FileUploadFillType from "../../components/FormElements/FileUpload/FileUploadFillType";
import CustomAntdTable from "../../components/Tables/CustomAntdTable";
import useGetLocation from "../../hooks/useGetLocation";

interface Location {
  latitude: number;
  longitude: number;
}

interface GeoLocation {
  _id: string;
  fileName: string;
  originalName: string;
  s3Url: string;
  coordinates: string;
  createdAt: string;
}

interface AttachmentTabProps {
  geoLocations: GeoLocation[];
}

const AttachmentTab: React.FC<AttachmentTabProps> = ({ geoLocations }) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [fileName, setFileName] = useState("");
  const [uploadedFiles, setUploadedFiles] = useState<any[]>([]);
  const [getLocationToggle, setGetLocationToggle] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const { error, location: locationValue, loading } = useGetLocation({
    getLocationToggle,
    setGetLocationToggle,
  });

  useEffect(() => {
    // Transform geoLocation data to match table format
    const transformedFiles = geoLocations?.map((item, index) => {
      const [lat, lng] = item.coordinates.split(",");
      return {
        key: item._id,
        serial: index + 1,
        file: item.originalName,
        fileName: item.fileName,
        fileUrl: item.s3Url,
        location: {
          latitude: parseFloat(lat),
          longitude: parseFloat(lng)
        },
        created: new Date(item.createdAt).toLocaleString()
      };
    }) || [];
    setUploadedFiles(transformedFiles);
  }, [geoLocations]);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setSelectedFile(event.target.files[0]);
      setGetLocationToggle(true);
    }
  };

  const handleFileNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFileName(event.target.value);
  };

  const handleUpload = () => {
    if (selectedFile) {
      const newFile = {
        key: Date.now().toString(),
        serial: uploadedFiles.length + 1,
        file: selectedFile.name,
        fileName: fileName || selectedFile.name,
        location: locationValue,
        created: new Date().toLocaleString()
      };
      setUploadedFiles([...uploadedFiles, newFile]);
      setSelectedFile(null);
      setFileName("");
      setGetLocationToggle(false);
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }
  };

  useEffect(() => {
    if (!error) return;
    message.error(error, 3);
  }, [error]);

  const columns = [
    { title: "Serial", dataIndex: "serial", key: "serial" },
    { 
      title: "File", 
      dataIndex: "file", 
      key: "file",
      render: (text: string, record: any) => (
        <a href={record.fileUrl} target="_blank" rel="noopener noreferrer">
          {text}
        </a>
      )
    },
    { title: "File Name", dataIndex: "fileName", key: "fileName" },
    {
      title: "Location",
      dataIndex: "location",
      key: "location",
      render: (value: Location) => (
        <span>
          {value ? `${value.latitude}, ${value.longitude}` : "No location available"}
        </span>
      )
    },
    { title: "Created", dataIndex: "created", key: "created" },
    {
      title: "Action",
      dataIndex: "location",
      key: "action",
      render: (record: Location) => (
        <div className="flex items-center gap-2">
          <a
            href={`https://www.google.com/maps?q=${record?.latitude},${record?.longitude}`}
            target="_blank"
          >
            <Tooltip title="Click to Reveal location on Google Maps">
              <Button
                icon={<FaMapMarkedAlt className="text-xl text-blue-light dark:text-blue-light-2" />}
                size="middle"
                className="dark:text-white"
              />
            </Tooltip>
          </a>
          {/* <Tooltip title="Edit this record">
            <Button
              icon={<EditFilled className="text-xl text-green" />}
              size="middle"
              className="dark:text-white"
            />
          </Tooltip>
          <Tooltip title="Delete this record">
            <Button
              icon={<DeleteFilled className="text-xl text-red-500" />}
              size="middle"
              className="dark:text-white"
            />
          </Tooltip> */}
        </div>
      ),
    },
  ];

  return (
    <div className="rounded-lg bg-white dark:bg-transparent dark:text-white">
      <div className="mb-6">
        <div className="mb-4 flex w-full items-center border-b-2 border-solid border-gray py-2">
          <span className="w-[220px] text-lg font-medium">Attach file </span>
        </div>
        <div className="flex w-full flex-col items-center space-x-4">
          <div className="flex w-full flex-col items-center gap-3 sm:flex-row">
            <div className="w-full">
              <FileUploadFillType
                onChange={handleFileChange}
                ref={fileInputRef}
                id="fileInput"
                required={true}
              />
            </div>
            {loading ? (
              <div className="flex w-full items-center justify-center gap-4">
                <Spin />
                Fetching location...
              </div>
            ) : (
              <InputGroup
                placeholder="Upload file to fetch your current location."
                customClasses="w-full"
                value={
                  locationValue
                    ? `${locationValue.latitude}, ${locationValue.longitude}`
                    : "Upload file to fetch your current location."
                }
                readOnly
              />
            )}
            <InputGroup
              placeholder="Enter File Name"
              value={fileName}
              onChange={handleFileNameChange}
              customClasses="w-full"
            />
            <div className="flex gap-3">
              <ButtonDefault
                mode="link"
                disabled={!locationValue}
                label="View on Map"
                link={`https://www.google.com/maps?q=${locationValue?.latitude},${locationValue?.longitude}`}
                target="_blank"
              />
              <ButtonDefault
                onClick={handleUpload}
                disabled={!selectedFile}
                label="Upload"
                variant="primary"
              />
            </div>
          </div>
        </div>
      </div>

      <CustomAntdTable
        columns={columns}
        dataSource={uploadedFiles}
        pagination={false}
        className="w-full"
      />
    </div>
  );
};

export default AttachmentTab;

================================================
File: src/Pages/ContactsUpload/ContactList.tsx
================================================
import BulkMessage from "../../components/BulkMessage/BulkMessage";

export default function ContactList() {
  return (
    <>
      <div className="rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
        <h2 className="text-xl font-semibold text-dark dark:text-white sm:text-2xl mb-4">Send Bulk Message</h2>{" "}
        <BulkMessage type="none" mode="sms" showActionControl={false} />
      </div>
    </>
  );
}


================================================
File: src/Pages/ContactsUpload/ContactUpload.tsx
================================================
import React, { useState, useRef } from "react";
import { message } from "antd";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import FileUploadFillType from "../../components/FormElements/FileUpload/FileUploadFillType";
import CustomAntdTable from "../../components/Tables/CustomAntdTable";
import { Link } from "react-router-dom";

const ContactUpload: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [formData, setFormData] = useState({
    leadSource: "",
    status: "",
    assignToAgent: "",
    service: "",
    country: "",
    state: "",
  });
  const fileInputRef = useRef<HTMLInputElement>(null);

  const data = [
    {
      key: "1",
      documentName: "Personal contact.csv",
      uploadDate: "2024-12-13",
    },
    {
      key: "2",
      documentName: "Sample.csv",
      uploadDate: "2024-12-13",
    },
  ];

  const columns = [
    {
      title: "Document Name",
      dataIndex: "documentName",
      key: "documentName",
      render: (key: any) => (
        <span>
          <Link to={"/Upload-contacts/1"}>{key}</Link>
        </span>
      ),
    },
    {
      title: "Uploaded Date",
      dataIndex: "uploadDate",
      key: "uploadDate",
    },
  ];

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const fileExtension = file.name.split(".").pop()?.toLowerCase();
      if (fileExtension === "xlsx" || fileExtension === "xls") {
        setSelectedFile(file);
        message.success("Excel file selected successfully");
      } else {
        message.error("Please select only Excel files (.xlsx or .xls)");
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
      }
    }
  };

  const handleSelectChange = (name: string, value: string | number) => {
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleNextClick = () => {
    console.log("Form data:", formData);
    console.log("Selected file:", selectedFile);
    // Here you would typically process the file and form data
  };

  const handleDownloadSample = () => {
    // Implement the logic to download a sample CSV file
    console.log("Downloading sample file...");
  };

  // Mock options for select inputs
  const mockOptions = [
    { value: "option1", label: "Option 1" },
    { value: "option2", label: "Option 2" },
    { value: "option3", label: "Option 3" },
  ];

  return (
    <div className="rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
      <div className="mb-6 flex flex-col items-center justify-between gap-3 sm:flex-row">
        <label className="block text-lg font-medium text-gray-700 dark:text-gray-300">
          Upload Contacts (CSV File)
        </label>
        <FileUploadFillType
          onChange={handleFileChange}
          customClasses="w-full"
          accept=".xlsx,.xls,.csv"
          ref={fileInputRef}
          tooltipInfo="Only .xls and .xlsx formats are allowed to upload"
        />
        <ButtonDefault
          label="Download Sample File"
          onClick={handleDownloadSample}
          variant="secondary"
          customClasses="w-fit"
        />
      </div>
      <div className="flex w-full justify-center">
        <ButtonDefault
          label="Next"
          onClick={handleNextClick}
          variant="primary"
          customClasses="bg-primary text-white"
        />
      </div>
      <hr className="my-6" />
      <CustomAntdTable
        columns={columns}
        dataSource={data}
        pagination={{
          pageSize: 10,
          total: data?.length,
        }}
      />
    </div>
  );
};

export default ContactUpload;


================================================
File: src/Pages/Dashboard/Dashboard.tsx
================================================
import { useEffect, useState } from "react";
import DefaultLayout from "../../layouts/DefaultLayout";
// import { islogined } from "../../utils/loginHandler";
import { Outlet } from "react-router-dom";
import UniversalLoader from "../../components/CommonUI/Loader";
import { fetchGeneralData } from "../../api/commonAPI";
import NotificationSetup from "../../components/Notification/NotificationSetup";
// import Footer from "../../components/common/footer/Footer";
// import Sidebar from "../../components/common/sidebar/Sidebar";
// import ResponsiveSidebar from "../../components/mobileUI/ResponsiveSidebar";
// import { Spin } from "antd";

export default function Dashboard() {
  //   const navigate = useNavigate();
  useEffect(() => {
    fetchGeneralData();
  }, []);

  return (
    <>
      <DefaultLayout>
        <NotificationSetup />
        <Outlet />
      </DefaultLayout>
    </>
    // <div className="flex md:flex-row flex-col bg-softGrey h-screen">
    //   {/* Side Bar  */}
    //   <div className="md:flex hidden">
    //     <Sidebar />
    //   </div>
    //   <ResponsiveSidebar />

    //   {/* Main dashBoard  */}
    //   <div className="w-full overflow-auto flex flex-col md:shadow-md">
    //     <div
    //       className="md:block hidden w-full h-[64px] bg-white z-10"
    //       style={{ boxShadow: "0px 0px 4px 0px #999999" }}
    //     ></div>
    //     <div id="outletContainer" className="w-full  overflow-auto flex-1">
    //       <div className="md:pt-[50px] md:p-[26px] p-[16px] pt-[1px] md:pb-[74px] pb-[74px]">
    //         <Outlet />
    //       </div>
    //       <Footer />
    //     </div>
    //   </div>
    // </div>
  );
}


================================================
File: src/Pages/ForgotPassword/ForgotPassword.tsx
================================================
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import InputGroup from "../../components/FormElements/InputGroup";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import { toast } from "react-toastify";
import { API } from "../../api";

type Step = "email" | "otp" | "reset";

const ForgotPassword = () => {
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState<Step>("email");
  const [formData, setFormData] = useState({
    email: "",
    otp: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [isLoading, setIsLoading] = useState(false);
  const [timeLeft, setTimeLeft] = useState(30);
  const [canResend, setCanResend] = useState(false);

  useEffect(() => {
    let timer: any;
    if (timeLeft > 0 && currentStep === "otp") {
      timer = setTimeout(() => setTimeLeft((prev) => prev - 1), 1000);
    } else if (timeLeft === 0) {
      setCanResend(true);
    }
    return () => clearTimeout(timer);
  }, [timeLeft, currentStep]);

  const handleRequestOTP = async () => {
    try {
      setIsLoading(true);
      const { data, error } = await API.postAuthAPI(
        { email: formData.email },
        "forget-password/request-otp"
      );

      if (error) return;

     // setFormData((prev) => ({ ...prev, otp: data.otp }));
      setCurrentStep("otp");
      setTimeLeft(30);
      setCanResend(false);
    } catch (error: any) {
      console.error(error.message || "Failed to send OTP");
    } finally {
      setIsLoading(false);
    }
  };

  const handleVerifyOTP = async () => {
    try {
      setIsLoading(true);
      const { error } = await API.postAuthAPI(
        { email: formData.email, otp: formData.otp },
        "forget-password/verify-otp"
      );

      if (error) return;

      setCurrentStep("reset");
    } catch (error: any) {
      console.error(error.message || "Failed to verify OTP");
    } finally {
      setIsLoading(false);
    }
  };

  const handleResetPassword = async () => {
    if (formData.newPassword !== formData.confirmPassword) {
      toast.error("Passwords do not match");
      return;
    }

    try {
      setIsLoading(true);
      const { error } = await API.postAuthAPI(
        {
          email: formData.email,
          newPassword: formData.newPassword,
          confirmPassword: formData.confirmPassword,
        },
        "forget-password/reset-password"
      );

      if (error) return;

      toast.success("Password reset successful!");
      navigate("/login");
    } catch (error: any) {
      console.error(error.message || "Failed to reset password");
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case "email":
        return (
          <>
            <h2 className="text-center text-2xl font-bold text-gray-900 dark:text-white">
              Forgot your password?
            </h2>
            <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
              Enter your email address and we'll send you a verification code.
            </p>
            <InputGroup
              label=""
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              placeholder="Enter your email address"
              required
            />
            <ButtonDefault
              label={isLoading ? "Sending..." : "Send OTP"}
              onClick={handleRequestOTP}
              disabled={isLoading || !formData.email}
              customClasses="w-full"
            />
          </>
        );

      case "otp":
        return (
          <>
            <h2 className="text-center text-2xl font-bold text-gray-900 dark:text-white">
              Enter Verification Code
            </h2>
            <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
              Enter the verification code we just sent to your email address.
            </p>
            <InputGroup
              label=""
              type="text"
              name="otp"
              value={formData.otp}
              onChange={handleInputChange}
              placeholder="Enter verification code"
              required
            />
            <div className="mb-4 text-center text-sm text-gray-600 dark:text-gray-400">
              {timeLeft > 0 ? (
                `Resend OTP in ${Math.floor(timeLeft / 60)}:${String(
                  timeLeft % 60
                ).padStart(2, "0")}`
              ) : (
                <button
                  onClick={handleRequestOTP}
                  disabled={!canResend}
                  className="text-primary hover:text-primary/80"
                >
                  Resend OTP
                </button>
              )}
            </div>
            <ButtonDefault
              label={isLoading ? "Verifying..." : "Verify"}
              onClick={handleVerifyOTP}
              disabled={isLoading || !formData.otp}
              customClasses="w-full"
            />
          </>
        );

      case "reset":
        return (
          <>
            <h2 className="text-center text-2xl font-bold text-gray-900 dark:text-white">
              Reset Password
            </h2>
            <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
              Enter your new password below.
            </p>
            <div className="space-y-4">
              <InputGroup
                label="New Password"
                type="password"
                name="newPassword"
                value={formData.newPassword}
                onChange={handleInputChange}
                placeholder="Enter new password"
                required
              />
              <InputGroup
                label="Confirm Password"
                type="password"
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                placeholder="Confirm new password"
                required
              />
            </div>
            <ButtonDefault
              label={isLoading ? "Resetting..." : "Reset Password"}
              onClick={handleResetPassword}
              disabled={
                isLoading || !formData.newPassword || !formData.confirmPassword
              }
              customClasses="w-full"
            />
          </>
        );
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-12 dark:bg-gray-900 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        {/* Illustration */}
        <div className="flex justify-center">
          <div className="mb-6 flex h-32 w-32 items-center justify-center rounded-full bg-primary/10 dark:bg-primary/5">
            <svg
              width="120"
              height="120"
              viewBox="0 0 120 120"
              fill="none"
              className="text-primary"
            >
              <circle
                cx="60"
                cy="60"
                r="50"
                fill="currentColor"
                fillOpacity="0.1"
              />
              <path
                d="M45 40C45 37.2386 47.2386 35 50 35H70C72.7614 35 75 37.2386 75 40V80C75 82.7614 72.7614 85 70 85H50C47.2386 85 45 82.7614 45 80V40Z"
                fill="currentColor"
                fillOpacity="0.2"
              />
              <path
                d="M55 50H65M55 60H65M55 70H65"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
              />
              <circle cx="60" cy="30" r="10" fill="currentColor" />
            </svg>
          </div>
        </div>

        {/* Form */}
        <div className="rounded-lg bg-white p-8 shadow-md dark:bg-gray-800">
          <div className="space-y-6">{renderStepContent()}</div>
        </div>
      </div>
    </div>
  );
};

export default ForgotPassword;


================================================
File: src/Pages/Leads/AddLeads.tsx
================================================
import React, { useState } from "react";
import { toast } from "react-toastify";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import type { CollapseProps } from "antd";
import AdditionalLeadDetails from "./AdditionalLeadDetails";
import CustomCollapse from "../../components/FormElements/CustomCollapse";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import InputGroup from "../../components/FormElements/InputGroup";
import LeadStatusUI from "../../components/CommonUI/LeadStatus/LeadStatus";
import { API } from "../../api";
import {
  getStoredAgents,
  getStoredProductsServices,
  getStoredSources,
} from "../../api/commonAPI";
import MiniLoader from "../../components/CommonUI/Loader/MiniLoader";
import { useNavigate } from "react-router-dom";
import AntDateTimePicker from "../../components/FormElements/DatePicker/AntDateTimePicker";

interface AdditionalDetails {
  fullAddress: string;
  country: string;
  state: string;
  city: string;
  website: string;
  companyName: string;
  leadCost: string;
  alternatePhone: string;
  pinCode: string;
}

interface LeadFormData {
  firstName: string;
  lastName: string;
  email: string;
  contactNumber: string;
  leadSource: string;
  productService: string;
  assignedAgent: string;
  leadStatus: string;
  followUpDate: string;
  description: string;
  // leadLostReasonId: string;
  additionalDetails?: AdditionalDetails;
}

const initialFormState: LeadFormData = {
  firstName: "",
  lastName: "",
  email: "",
  contactNumber: "",
  leadSource: "",
  productService: "",
  assignedAgent: "",
  leadStatus: "",
  followUpDate: "",
  description: "",
  // leadLostReasonId: "",
  additionalDetails: {
    fullAddress: "",
    country: "",
    state: "",
    city: "",
    website: "",
    companyName: "",
    leadCost: "",
    alternatePhone: "",
    pinCode: "",
  },
};

export default function AddLeads() {
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<LeadFormData>(initialFormState);
  const navigate = useNavigate();

  // Get stored data for dropdowns
  const agentList = getStoredAgents(true);
  const serviceList = getStoredProductsServices(true);
  const sourceList = getStoredSources(true);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSelectChange = (
    name: string,
    value: string | number | string[] | number[]
  ) => {
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleDateChange = (_selectedDates: Date[], dateStr: string) => {
    setFormData((prevData) => ({
      ...prevData,
      followUpDate: dateStr || "",
    }));
  };

  const handleAdditionalDetailsChange = (details: AdditionalDetails) => {
    setFormData((prev) => ({
      ...prev,
      additionalDetails: details,
    }));
  };

  const validateForm = () => {
    // Explicitly define which fields we can access with string index
    type RequiredFieldKey = keyof Pick<
      LeadFormData,
      // | "email"
      | "contactNumber"
      | "leadSource"
      | "productService"
      | "assignedAgent"
      | "leadStatus"
      | "firstName"
    >;
    const requiredFields: RequiredFieldKey[] = [
      // "email",
      "contactNumber",
      "leadSource",
      "productService",
      "assignedAgent",
      "leadStatus",
      "firstName",
    ];

    const missingFields = requiredFields.filter((field) => !formData[field]);

    if (missingFields.length > 0) {
      toast.error(
        `Please fill in required fields: ${missingFields.join(", ")}`
      );
      return false;
    }

    if (!/^\d{10}$/.test(formData.contactNumber)) {
      toast.error("Contact number must be 10 digits");
      return false;
    }

    if (formData.email && !formData.email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
      toast.error("Please enter a valid email address");
      return false;
    }

    return true;
  };

  const handleSave = async (
    e: React.FormEvent,
    saveAndAdd: boolean = false
  ) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    try {
      setIsLoading(true);

      const payload = {
        ...formData,
        ...(formData.additionalDetails || {}),
        leadCost: formData.additionalDetails?.leadCost
          ? Number(formData.additionalDetails.leadCost)
          : undefined,
      };

      delete payload.additionalDetails;

      const { data, error, message } = await API.postAuthAPI(
        payload,
        "lead",
        true
      );

      if (error || !data) {
        throw new Error(error);
      }

      toast.success(message || "Lead created successfully!");

      if (saveAndAdd) {
        // Reset form for new entry but keep some fields like leadSource, productService, assignedAgent
        setFormData((prev) => ({
          ...initialFormState,
          leadSource: prev.leadSource,
          productService: prev.productService,
          assignedAgent: prev.assignedAgent,
          leadStatus: prev.leadStatus,
        }));
      } else {
        // Navigate back
        navigate(-1);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to create lead");
    } finally {
      setIsLoading(false);
    }
  };

  // Configure collapse items for additional details
  const items: CollapseProps["items"] = [
    {
      key: "1",
      label: (
        <span className="text-body-sm font-medium text-white">
          Additional details
        </span>
      ),
      children: (
        <AdditionalLeadDetails
          onDetailsChange={handleAdditionalDetailsChange}
          initialData={formData.additionalDetails}
        />
      ),
    },
  ];

  if (isLoading) {
    return <MiniLoader />;
  }

  return (
    <div className="mt-auto w-auto">
      <div className="grid grid-cols-1 gap-9 sm:grid-cols-1">
        <div className="flex flex-col gap-9">
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="flex items-center justify-between border-b border-stroke px-6.5 py-4 dark:border-dark-3">
              <h3 className="font-semibold text-dark dark:text-white">
                Basic Details
              </h3>
              <ButtonDefault label="↓ Import" mode="link" link="/import" />
            </div>

            <form>
              <div className="w-full p-6.5">
                {/* Name Fields */}
                <div className="mb-4.5 flex flex-col gap-4.5 xl:flex-row">
                  <InputGroup
                    label="Full name"
                    name="firstName"
                    type="text"
                    placeholder="Enter lead's full name"
                    customClasses="w-full "
                    value={formData.firstName}
                    onChange={handleInputChange}
                    required
                  />
                  {/* <InputGroup
                    label="Last name"
                    name="lastName"
                    type="text"
                    placeholder="Enter lead's last name"
                    customClasses="w-full xl:w-1/2"
                    value={formData.lastName}
                    onChange={handleInputChange}
                  /> */}
                </div>

                {/* Contact Fields */}
                <div className="mb-4.5 flex flex-col gap-4.5 xl:flex-row">
                  <InputGroup
                    label="Email"
                    name="email"
                    type="email"
                    placeholder="Enter lead's email address"
                    customClasses="w-full xl:w-1/2"
                    value={formData.email}
                    onChange={handleInputChange}
                  />
                  <InputGroup
                    label="Contact number"
                    name="contactNumber"
                    type="tel"
                    required
                    placeholder="Enter lead's contact number"
                    customClasses="w-full xl:w-1/2"
                    value={formData.contactNumber}
                    onChange={handleInputChange}
                  />
                </div>

                {/* Source and Service Fields */}
                <div className="mb-4.5 flex flex-col gap-4.5 xl:flex-row">
                  <div className="w-full xl:w-1/2">
                    <SelectGroupOne
                      label="Lead source"
                      options={sourceList}
                      required
                      selectedOption={formData.leadSource}
                      setSelectedOption={(value) =>
                        handleSelectChange("leadSource", value)
                      }
                    />
                  </div>
                  <div className="w-full xl:w-1/2">
                    <SelectGroupOne
                      label="Product & Service"
                      options={serviceList}
                      required
                      selectedOption={formData.productService}
                      setSelectedOption={(value) =>
                        handleSelectChange("productService", value)
                      }
                    />
                  </div>
                </div>

                {/* Agent and Status Fields */}
                <div className="mb-4.5 flex flex-col gap-4.5 xl:flex-row">
                  <div className="w-full xl:w-1/2">
                    <SelectGroupOne
                      label="Assign to agents"
                      options={agentList}
                      required
                      selectedOption={formData.assignedAgent}
                      setSelectedOption={(value) =>
                        handleSelectChange("assignedAgent", value)
                      }
                    />
                  </div>
                  <div className="w-full xl:w-1/2">
                    <LeadStatusUI
                      handleInputChange={handleInputChange}
                      handleSelectChange={handleSelectChange}
                      formData={formData}
                      required
                      statusFieldName="leadStatus"
                      // lostReasonValue={formData.leadLostReasonId}
                      value={formData.leadStatus}
                    />
                  </div>
                </div>

                {/* Follow-up Date */}
                <div className="mb-4.5 w-full">
                  <AntDateTimePicker
                    label="Follow-up date"
                    onChange={handleDateChange}
                    defaultValue={formData.followUpDate}
                    enableTime
                  />
                </div>

                {/* Description */}
                <div className="mb-6 w-full">
                  <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                    Description
                  </label>
                  <textarea
                    name="description"
                    rows={3}
                    placeholder="Enter description / note about lead."
                    className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5 py-3 text-dark outline-none transition placeholder:text-dark-6 focus:border-primary active:border-primary disabled:cursor-default dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                    value={formData.description}
                    onChange={handleInputChange}
                  />
                </div>

                {/* Additional Details Section */}
                <div className="mb-6 w-full">
                  <CustomCollapse items={items} />
                </div>

                {/* Submit Button */}
                <div className="flex gap-4 item-center w-full">
                  <button
                    type="button"
                    disabled={isLoading}
                    onClick={(e) => handleSave(e, false)}
                    className="flex w-full justify-center rounded-[7px] bg-primary p-[13px] font-medium text-white hover:bg-opacity-90 disabled:opacity-50"
                  >
                    {isLoading ? "Creating lead..." : "Save"}
                  </button>
                  <button
                    type="button"
                    disabled={isLoading}
                    onClick={(e) => handleSave(e, true)}
                    className="flex w-full justify-center rounded-[7px] bg-primary p-[13px] font-medium text-white hover:bg-opacity-90 disabled:opacity-50"
                  >
                    {isLoading ? "Creating lead..." : "Save & Add Another Lead"}
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
File: src/Pages/Leads/AdditionalLeadDetails.tsx
================================================
import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import { getStoredCountries } from "../../api/commonAPI";
import InputGroup from "../../components/FormElements/InputGroup";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import { API } from "../../api";

interface AdditionalDetailsData {
  fullAddress: string;
  country: string;
  state: string;
  city: string;
  website: string;
  companyName: string;
  leadCost: string;
  alternatePhone: string;
  pinCode: string;
}

interface Props {
  onDetailsChange: (details: AdditionalDetailsData) => void;
  initialData?: Partial<AdditionalDetailsData>;
}

interface StateOption {
  value: string;
  label: string;
}

export default function AdditionalLeadDetails({ onDetailsChange, initialData = {} }: Props) {
  const countryOptions = getStoredCountries(true);
  const [stateOptions, setStateOptions] = useState<StateOption[]>([]);
  const [isLoadingStates, setIsLoadingStates] = useState(false);

  const [formData, setFormData] = useState<AdditionalDetailsData>({
    fullAddress: initialData.fullAddress || "",
    country: initialData.country || "",
    state: initialData.state || "",
    city: initialData.city || "",
    website: initialData.website || "",
    companyName: initialData.companyName || "",
    leadCost: initialData.leadCost || "",
    alternatePhone: initialData.alternatePhone || "",
    pinCode: initialData.pinCode || "",
  });

  const fetchStates = async (countryCode: string) => {
    try {
      setIsLoadingStates(true);
      const response = await API.getAuthAPI(
        `locations/states/${countryCode}`,
        true
      );

      if (response.error) throw new Error(response.error);

      const states = response.data.map(
        (state: { name: string; _id: string }) => ({
          value: state._id,
          label: state.name,
        })
      );

      setStateOptions(states);
    } catch (error: any) {
      console.error(error.message || "Failed to fetch states");
      setStateOptions([]);
    } finally {
      setIsLoadingStates(false);
    }
  };

  useEffect(() => {
    if (formData.country) {
      fetchStates(formData.country);
      // Reset state when country changes
      setFormData((prev) => ({ ...prev, state: "" }));
    }
  }, [formData.country]);

  // Notify parent component whenever form data changes
  useEffect(() => {
    onDetailsChange(formData);
  }, [formData]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  return (
    <div className="flex w-full flex-col gap-4.5 xl:flex-row">
      <div className="flex w-full flex-col justify-between gap-3.5 xl:w-1/2">
        <div className="w-full">
          <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
            Full address
          </label>
          <textarea
            name="fullAddress"
            rows={5}
            value={formData.fullAddress}
            onChange={handleInputChange}
            placeholder="Enter lead's full address"
            className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5 py-3 text-dark outline-none transition placeholder:text-dark-6 focus:border-primary active:border-primary disabled:cursor-default dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
          />
        </div>

        <SelectGroupOne
          label="Country"
          options={countryOptions}
          selectedOption={formData.country}
          setSelectedOption={(value) => handleSelectChange("country", value)}
        />

        <SelectGroupOne
          label="State"
          options={stateOptions}
          selectedOption={formData.state}
          setSelectedOption={(value) => handleSelectChange("state", value)}
          // isLoading={isLoadingStates}
        />

        <InputGroup
          name="city"
          label="City"
          type="text"
          placeholder="Enter lead's City"
          value={formData.city}
          onChange={handleInputChange}
        />
      </div>

      <div className="flex w-full flex-col justify-between gap-3.5 xl:w-1/2">
        <InputGroup
          label="Website"
          type="text"
          name="website"
          placeholder="Enter lead's website URL"
          value={formData.website}
          onChange={handleInputChange}
        />

        <InputGroup
          label="Company name"
          type="text"
          name="companyName"
          placeholder="Enter lead's company name"
          value={formData.companyName}
          onChange={handleInputChange}
        />

        <InputGroup
          label="Lead cost"
          type="number"
          name="leadCost"
          placeholder="Enter lead acquisition cost"
          value={formData.leadCost}
          onChange={handleInputChange}
        />

        <InputGroup
          label="Alternate phone"
          type="tel"
          name="alternatePhone"
          placeholder="Enter lead's alternate phone"
          value={formData.alternatePhone}
          onChange={handleInputChange}
          maxLength={10}
        />

        <InputGroup
          label="Pin Code"
          name="pinCode"
          type="text"
          placeholder="Enter lead's pin code"
          value={formData.pinCode}
          onChange={handleInputChange}
          maxLength={6}
          pattern="\d*"
        />
      </div>
    </div>
  );
}

================================================
File: src/Pages/Leads/AllLeads.tsx
================================================
import { useState, useEffect, useCallback, useMemo } from "react";
import CustomAntdTable from "../../components/Tables/CustomAntdTable";
import LeadsTableHeader from "./LeadsTableHeader";
import { useLocation } from "react-router-dom";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { debounce } from "lodash";
import QuickEditModal from "../../components/Modals/QuickEdit";
import { toast } from "react-toastify";
import {
  handleExportExcel,
  handleExportPDF,
} from "../../api/commonAPI/exportApi";
import { getTableColumns } from "./Columns";
import { DEFAULT_VISIBLE_COLUMNS } from './Columns';

interface Lead {
  key: string;
  name: string;
  number: string;
  leadSource: string;
  agent: string;
  status: string;
  service: string;
  leadWonAmount: number;
  addCalender: boolean;
  followUpDate: any;
  statusData: any;
  leadLostReasonId: string;
  comment: string;
  leadCost: number;
  companyName: string;
  fullAddress: string;
  city: string;
  website: string;
  createdAt: string;
  pinCode: string;
  email: string;
  description: string;
  updatedAt: string;
  leadAddType: string;
  alternatePhone: string;
  state: string;
  country: string;
}

interface APILead {
  _id: string;
  firstName: string;
  lastName: string;
  contactNumber: string;
  leadSource: { name: string } | null;
  assignedAgent: { name: string } | null;
  leadStatus: { name: string } | null;
  productService: { name: string } | null;
  leadWonAmount: number;
  addCalender: boolean;
  followUpDate: any;
  leadLostReasonId: string;
  comment: string;
  leadCost: number;
  companyName: string;
  fullAddress: string;
  city: string;
  website: string;
  createdAt: string;
  pinCode: string;
  email: string;
  description: string;
  updatedAt: string;
  leadAddType: string;
  alternatePhone: string;
  state: string;
  country: string;
}

const AllLeads = ({ derivativeEndpoint = "", showExportButtons = true }) => {
  const location = useLocation();
  const { statusId, filterType } = location.state || {};
  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([]);
  const [leads, setLeads] = useState<Lead[]>([]);
  const [loading, setLoading] = useState(false);
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);
  const [isQuickEditOpen, setIsQuickEditOpen] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [advancedFilters, setAdvancedFilters] = useState<any>({});
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0,
  });

   // Initialize columns configuration
   const columns = useMemo(
    () =>
      getTableColumns(
        handleSelectAll,
        areAllVisibleRowsSelected,
        rowSelection,
        selectedRowKeys,
        setSelectedLead,
        setIsQuickEditOpen
      ),
    [selectedRowKeys, leads]
  );

  // Initialize visible columns state after columns are defined
  const [visibleColumns, setVisibleColumns] = useState(() => {
    const savedColumns = localStorage.getItem("tableColumns");
    if (savedColumns) {
      const parsed = JSON.parse(savedColumns);
      return parsed.length > 0 ? parsed : DEFAULT_VISIBLE_COLUMNS;
    }
    return DEFAULT_VISIBLE_COLUMNS;
  });

  const transformLeadData = (apiLeads: APILead[]): Lead[] => {
    return apiLeads.map((lead) => ({
      key: lead?._id,
      name: `${lead?.firstName || ""} ${lead?.lastName || ""}`.trim() || "-",
      number: lead?.contactNumber || "-",
      leadSource: lead?.leadSource?.name || "-",
      agent: lead?.assignedAgent?.name || "-",
      status: lead?.leadStatus?.name || "-",
      service: lead?.productService?.name || "-",
      statusData: lead?.leadStatus || {},
      leadWonAmount: lead?.leadWonAmount,
      addCalender: lead?.addCalender,
      followUpDate: new Date(lead?.followUpDate),
      leadLostReasonId: lead?.leadLostReasonId || "-",
      comment: lead?.comment || "-",
      leadCost: lead?.leadCost,
      companyName: lead?.companyName || "-",
      fullAddress: lead?.fullAddress || "-",
      city: lead?.city || "-",
      createdAt: lead?.createdAt || "-",
      website: lead?.website || "-",
      pinCode: lead?.pinCode || "-",
      email: lead?.email || "-",
      description: lead?.description || "-",
      updatedAt: lead?.updatedAt || "-",
      leadAddType: lead?.leadAddType || "-",
      alternatePhone: lead?.alternatePhone || "-",
      state: lead?.state || "-",
      country: lead?.country || "-",
    }));
  };

  const handleQuickUpdate = async (updateData: any) => {
    if (!selectedLead) return;

    try {
      setIsUpdating(true);
      const response = await API.updateAuthAPI(
        updateData,
        selectedLead.key,
        "lead",
        true
      );

      if (response.error) return;
      toast.success("Lead updated successfully");
      setIsQuickEditOpen(false);
      fetchLeads(); // Refresh the leads list
    } catch (error: any) {
      console.error(error.message || "Failed to update lead");
    } finally {
      setIsUpdating(false);
    }
  };

  const fetchLeads = async () => {
    try {
      setLoading(true);
      const params = {
        page: pagination.current,
        limit: pagination.pageSize,
        ...advancedFilters,
      };
      if (debouncedSearchTerm) {
        params.search = debouncedSearchTerm;
      }

      const { data, error, options } = await API.getAuthAPI(
        `${END_POINT.LEADS_DATA}${derivativeEndpoint}`,
        true,
        params
      );

      if (error) throw new Error(error);

      const transformedLeads = transformLeadData(data);
      setLeads(transformedLeads);
      setPagination({
        ...pagination,
        total: options?.pagination?.total,
      });
    } catch (error: any) {
      console.error(error.message || "Failed to fetch leads");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchLeads();
  }, [
    pagination.current,
    pagination.pageSize,
    debouncedSearchTerm,
    advancedFilters,
  ]);

  const handleAdvancedFilter = useCallback((filters: any) => {
    setPagination((prev) => ({ ...prev, current: 1 }));
    setAdvancedFilters(filters);
  }, []);

  const handleResetFilters = useCallback(() => {
    setAdvancedFilters({});
    setPagination((prev) => ({ ...prev, current: 1 }));
  }, []);

  const handleTableChange = (page: number, pageSize: number) => {
    setPagination({
      ...pagination,
      current: page,
      pageSize: pageSize,
    });
  };

  const debouncedSearch = useCallback(
    debounce((value: string) => {
      setDebouncedSearchTerm(value);
      setPagination({ ...pagination, current: 1 });
    }, 500),
    []
  );

  const handleSearch = (value: string) => {
    setSearchTerm(value);
    debouncedSearch(value);
  };

  // Handle select all checkbox
  function handleSelectAll({ isChecked }: { isChecked: boolean }) {
    if (isChecked) {
      const visibleKeys = leads.map((lead) => lead.key);
      setSelectedRowKeys((prevSelected) => {
        const uniqueKeys = new Set([...prevSelected, ...visibleKeys]);
        return Array.from(uniqueKeys);
      });
    } else {
      const visibleKeys = new Set(leads.map((lead) => lead.key));
      setSelectedRowKeys((prevSelected) =>
        prevSelected.filter((key) => !visibleKeys.has(key))
      );
    }
  }

  const handleBulkUpdate = async (data: {
    agentId?: string;
    statusId?: string;
  }) => {
    if (selectedRowKeys.length === 0) return;

    try {
      const payload = {
        leadIds: selectedRowKeys,
        ...(data.agentId && { assignedAgent: data.agentId }),
        ...(data.statusId && { leadStatus: data.statusId }),
      };

      const { data: response, error } = await API.updateAuthAPI(
        payload,
        "",
        END_POINT.BULK_UPDATE,
        true
      );

      if (error) throw new Error(error);

      toast.success(
        response.message ||
          `Successfully updated ${response.modifiedCount} leads`
      );

      // Reset selected rows and refresh data
      setSelectedRowKeys([]);
      fetchLeads();
    } catch (error: any) {
      console.error(error.message || "Failed to update leads");
    }
  };

  const handleDelete = async () => {
    if (selectedRowKeys.length === 0) {
      toast.error("Select alteast one lead.");
      return;
    }

    try {
      const payload = {
        leadIds: selectedRowKeys,
      };

      const { data: response, error } = await API.DeleteAuthAPI(
        "",
        END_POINT.BULK_DELETE,
        true,
        payload
      );

      if (error) throw new Error(error);
      // handleTableChange(1, 10);
      toast.success(
        response.message ||
          `Successfully updated ${response.modifiedCount} leads`
      );

      // Reset selected rows and refresh data
      setSelectedRowKeys([]);
      fetchLeads();
    } catch (error: any) {
      console.error(error.message || "Failed to update leads");
    }
  };

  // Add this function to handle column visibility changes
  const handleColumnChange = (newColumns: string[]) => {
    setVisibleColumns(newColumns);
    localStorage.setItem("tableColumns", JSON.stringify(newColumns));
  };

  // Filter columns based on visibility
  const getVisibleColumns = () => {
    return columns.filter(
      (col) =>
        col.key === "checkbox" ||
        col.key === "action" ||
        visibleColumns.includes(col.key)
    );
  };

  function areAllVisibleRowsSelected() {
    if (leads.length === 0) return false;
    return leads.every((lead) => selectedRowKeys.includes(lead.key));
  }

  function rowSelection({
    value,
    isChecked,
  }: {
    value: string;
    isChecked: boolean;
  }) {
    if (isChecked) {
      setSelectedRowKeys((prev) => [...prev, value]);
    } else {
      setSelectedRowKeys((prev) => prev.filter((key) => key !== value));
    }
  }

  const handleRowClick = (record: any) => {
    setSelectedLead(record);
    setIsQuickEditOpen(true);
  };

  const handleExportPDFLogic = async () => {
    setLoading(true);
    try {
      await handleExportPDF();
    } finally {
      setLoading(false);
    }
  };

  const handleExportExcelLogic = async () => {
    setLoading(true);
    try {
      await handleExportExcel();
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    console.log("Selected rows:", selectedRowKeys);
  }, [selectedRowKeys]);

  return (
    <div className="space-y-4">
      <LeadsTableHeader
        handleSearch={handleSearch}
        searchTerm={searchTerm}
        selectedCount={selectedRowKeys.length}
        onBulkUpdate={handleBulkUpdate}
        disabled={loading}
        handleDelete={handleDelete}
        onAdvancedFilter={handleAdvancedFilter}
        onResetFilters={handleResetFilters}
        loading={loading}
        initialFilterData={{ statusId, filterType }}
        showExportButtons={showExportButtons}
        onExportPDF={handleExportPDFLogic}
        onExportExcel={handleExportExcelLogic}
        columns={columns}
        selectedColumns={visibleColumns}
        onColumnChange={handleColumnChange}
      />

      <CustomAntdTable
        columns={getVisibleColumns()}
        dataSource={leads}
        pagination={{
          current: pagination.current,
          pageSize: pagination.pageSize,
          total: pagination.total,
          onChange: handleTableChange,
          pageSizeOptions: ["10", "20", "50", "100"],
          showSizeChanger: true,
        }}
        isLoading={loading}
        onRow={(record: any) => ({ onClick: () => handleRowClick(record) })}
      />

      {selectedLead && (
        <QuickEditModal
          isOpen={isQuickEditOpen}
          onClose={() => {
            fetchLeads();
            setIsQuickEditOpen(false);
            setSelectedLead(null);
          }}
          initialData={{
            id: selectedLead.key,
            status: selectedLead.statusData?._id || "",
            followUpDate: selectedLead.followUpDate,
            leadWonAmount: selectedLead.leadWonAmount,
            addCalender: selectedLead.addCalender,
            leadLostReasonId: selectedLead.leadLostReasonId, // You might want to get this from your lead data
            comment: selectedLead.comment, // You might want to get this from your lead data
            leadName: selectedLead.name,
          }}
          isLoading={isUpdating}
        />
      )}
    </div>
  );
};

export default AllLeads;


================================================
File: src/Pages/Leads/Columns.tsx
================================================
// columns.ts - Create this as a separate file
import { Button, Tooltip } from "antd";
import CheckboxTwo from "../../components/FormElements/Checkboxes/CheckboxTwo";
import { Link } from "react-router-dom";
import { EditFilled } from "@ant-design/icons";
import {
  isWithinNext24Hours,
  isWithinPast24Hours,
} from "../../utils/useFullFunctions";

export const DEFAULT_VISIBLE_COLUMNS = [
  "checkbox",
  "name",
  "number",
  "comment",
  "followUpDate",
  "agent",
  "status",
  "action",
];

const getRowClassName = (record: any): string => {
  const followUpDate = new Date(record.followUpDate);

  if (isWithinNext24Hours(followUpDate)) {
    return "upcoming-followup pulse-green";
  }
  if (isWithinPast24Hours(followUpDate)) {
    return "missed-followup pulse-red";
  }
  return "";
};

export const getTableColumns = (
  handleSelectAll: ({ isChecked }: { isChecked: boolean }) => void,
  areAllVisibleRowsSelected: () => boolean,
  rowSelection: ({
    value,
    isChecked,
  }: {
    value: string;
    isChecked: boolean;
  }) => void,
  selectedRowKeys: string[],
  setSelectedLead: (lead: any) => void,
  setIsQuickEditOpen: (open: boolean) => void
) => [
  {
    title: (
      <div>
        <CheckboxTwo
          id="selectAllLeads"
          onChange={handleSelectAll}
          checked={areAllVisibleRowsSelected()}
        />
      </div>
    ),
    dataIndex: "key",
    key: "checkbox",
    render: (key: string) => (
      <div onClick={(e) => e.stopPropagation()}>
        <CheckboxTwo
          id={key}
          onChange={({ value: checkboxValue, isChecked }) =>
            rowSelection({ value: checkboxValue, isChecked })
          }
          checked={selectedRowKeys.includes(key)}
        />
      </div>
    ),
  },
  {
    title: "Name",
    dataIndex: "name",
    key: "name",
  },
  {
    title: "Contact",
    dataIndex: "number",
    key: "number",
  },
  {
    title: "Comment",
    dataIndex: "comment",
    key: "comment",
    minWidth: 123,
    render: (record: any) =>
      record?.length ? (
        <span>
          {record.length > 75 ? (
            <Tooltip title={record}>{`${record.slice(0, 75)}...`}</Tooltip>
          ) : (
            record
          )}
        </span>
      ) : null,
  },
  {
    title: "Follow-Up Date",
    dataIndex: "followUpDate",
    key: "followUpDate",
    minWidth: 143,
    render: (date: Date) => {
      const options: Intl.DateTimeFormatOptions = {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      };
      const formattedDate = date.toLocaleDateString("en-GB", options);
      const formattedTime = date.toLocaleTimeString("en-GB", {
        hour: "2-digit",
        minute: "2-digit",
      });
      const formattedDateTime = `${formattedDate} - ${formattedTime}`;
      // const formattedDate = date.toLocaleString();
      const isUpcoming = isWithinNext24Hours(date);
      const isMissed = isWithinPast24Hours(date);

      return (
        <div className="flex items-center gap-2">
          <span>{formattedDateTime}</span>
          {/* {isUpcoming && (
            <span className="px-2 py-0.5 text-xs rounded-full bg-green-100 text-green-800 border border-green-200">
              Due Soon
            </span>
          )} */}
          {isMissed && (
            <span className="px-2 py-0.5 text-xs rounded-full bg-red-100 text-red-800 border border-red-200">
              Overdue
            </span>
          )}
        </div>
      );
    },
  },
  {
    title: "Status",
    dataIndex: "status",
    key: "status",
    minWidth: 103,
  },
  {
    title: "Description",
    dataIndex: "description",
    key: "description",
    minWidth: 123,
    render: (record: any) =>
      record?.length ? (
        <span>
          {record.length > 75 ? (
            <Tooltip title={record}>{`${record.slice(0, 75)}...`}</Tooltip>
          ) : (
            record
          )}
        </span>
      ) : null,
  },
  {
    title: "Product and Service",
    dataIndex: "service",
    key: "service",
    minWidth: 100,
  },
  {
    title: "Agent",
    dataIndex: "agent",
    key: "agent",
    minWidth: 123,
  },
  {
    title: "Lead Source",
    dataIndex: "leadSource",
    key: "leadSource",
    minWidth: 123,
  },
  {
    title: "Email",
    dataIndex: "email",
    key: "email",
  },
  {
    title: "Created Date",
    dataIndex: "createdAt",
    key: "createdAt",
    render: (date: string) => new Date(date).toLocaleDateString(),
  },
  {
    title: "Edited At",
    dataIndex: "updatedAt",
    key: "updatedAt",
    render: (date: string) => new Date(date).toLocaleDateString(),
  },
  {
    title: "Alternate Contact",
    dataIndex: "alternatePhone",
    key: "alternatePhone",
  },
  {
    title: "Pin Code",
    dataIndex: "pinCode",
    key: "pinCode",
  },
  {
    title: "State",
    dataIndex: "state",
    key: "state",
  },
  {
    title: "Country",
    dataIndex: "country",
    key: "country",
  },

  {
    title: "Lead Cost",
    dataIndex: "leadCost",
    key: "leadCost",
    render: (cost: number) => `₹ ${cost.toFixed(2)}`,
  },
  {
    title: "Company",
    dataIndex: "companyName",
    key: "companyName",
  },
  {
    title: "Address",
    dataIndex: "fullAddress",
    key: "fullAddress",
    render: (record: any) =>
      record?.length ? (
        <span>
          {record.length > 56 ? (
            <Tooltip title={record}>{`${record.slice(0, 56)}...`}</Tooltip>
          ) : (
            record
          )}
        </span>
      ) : null,
  },
  {
    title: "City",
    dataIndex: "city",
    key: "city",
  },
  {
    title: "Website",
    dataIndex: "website",
    key: "website",
  },
  {
    title: "Won Amount",
    dataIndex: "leadWonAmount",
    key: "leadWonAmount",
    render: (cost: number) => `₹ ${cost.toFixed(2)}`,
  },
  {
    title: "Lead Add Type",
    dataIndex: "leadAddType",
    key: "leadAddType",
  },
  {
    title: "Action",
    key: "action",
    render: (record: any) => (
      <div className="flex space-x-2">
        <Link to={`/leads/${record.key}`}>
          <Button
            icon={<EditFilled />}
            className="bg-transparent text-primary dark:text-blue-400"
          />
        </Link>
        <Button
          onClick={(e) => {
            e.stopPropagation();
            setSelectedLead(record);
            setIsQuickEditOpen(true);
          }}
          className="bg-primary text-white hover:bg-primary/90"
        >
          Quick Edit
        </Button>
        {record?.statusData?.name && (
          <Tooltip title={`Stands for : ${record?.statusData?.name}`}>
            <Button
              icon={record?.statusData?.name[0]}
              className={`text-sm font-semibold text-white`}
              style={{
                background: record?.statusData?.color
                  ? record?.statusData?.color
                  : "green",
              }}
              onClick={(e) => {
                e.stopPropagation();
                setSelectedLead(record);
                setIsQuickEditOpen(true);
              }}
            />
          </Tooltip>
        )}
      </div>
    ),
  },
];


================================================
File: src/Pages/Leads/FollowupLeads.tsx
================================================
import { useState, useEffect, useCallback, useMemo } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Button, Tooltip } from "antd";
import { EditFilled } from "@ant-design/icons";
import CustomAntdTable from "../../components/Tables/CustomAntdTable";
import CheckboxTwo from "../../components/FormElements/Checkboxes/CheckboxTwo";
import LeadsTableHeader from "./LeadsTableHeader";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { debounce } from "lodash";
import { toast } from "react-toastify";
import QuickEditModal from "../../components/Modals/QuickEdit";
import {
  isWithinNext24Hours,
  isWithinPast24Hours,
} from "../../utils/useFullFunctions";
import { DEFAULT_VISIBLE_COLUMNS, getTableColumns } from "./Columns";

interface Lead {
  key: string;
  name: string;
  number: string;
  leadSource: string;
  agent: string;
  followUpDate: any;
  statusData: any;
  leadWonAmount: number;
  addCalender: boolean;
  leadLostReasonId: string;
  productService: any;
  comment: string;
  leadCost: number;
  companyName: string;
  fullAddress: string;
  city: string;
  website: string;
  createdAt: string;
  pinCode: string;
  email: string;
  description: string;
  updatedAt: string;
  leadAddType: string;
  alternatePhone: string;
  state: string;
  country: string;
}

interface APILead {
  _id: string;
  firstName: string;
  lastName: string;
  contactNumber: string;
  leadSource: { name: string } | null;
  assignedAgent: { name: string } | null;
  followUpDate: any;
  leadStatus: any;
  leadWonAmount: number;
  addCalender: boolean;
  leadLostReasonId: string;
  productService: { name: string } | null;
  comment: string;
  leadCost: number;
  companyName: string;
  fullAddress: string;
  city: string;
  website: string;
  createdAt: string;
  pinCode: string;
  email: string;
  description: string;
  updatedAt: string;
  leadAddType: string;
  alternatePhone: string;
  state: string;
  country: string;
}

const FollowupLeads = () => {
  const navigate = useNavigate();
  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([]);
  const [leads, setLeads] = useState<Lead[]>([]);
  const [loading, setLoading] = useState(false);
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);
  const [isQuickEditOpen, setIsQuickEditOpen] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [advancedFilters, setAdvancedFilters] = useState<any>({});
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0,
  });

  // Initialize columns configuration
  const columns = useMemo(
    () =>
      getTableColumns(
        handleSelectAll,
        areAllVisibleRowsSelected,
        rowSelection,
        selectedRowKeys,
        setSelectedLead,
        setIsQuickEditOpen
      ),
    [selectedRowKeys, leads]
  );

  const [visibleColumns, setVisibleColumns] = useState(() => {
    const savedColumns = localStorage.getItem("tableColumns");
    if (savedColumns) {
      const parsed = JSON.parse(savedColumns);
      return parsed.length > 0 ? parsed : DEFAULT_VISIBLE_COLUMNS;
    }
    return DEFAULT_VISIBLE_COLUMNS;
  });

  const transformLeadData = (apiLeads: APILead[]): Lead[] => {
    return apiLeads.map((lead) => ({
      key: lead._id,
      name: `${lead.firstName} ${lead.lastName}`.trim(),
      number: lead.contactNumber,
      leadSource: lead.leadSource?.name || "-",
      productService: lead.productService?.name || "-",
      agent: lead.assignedAgent?.name || "-",
      followUpDate: new Date(lead.followUpDate),
      // followUpDate: new Date(lead.followUpDate).toLocaleString(),
      statusData: lead.leadStatus || {},
      status: lead?.leadStatus?.name || "-",
      service: lead?.productService?.name || "-",
      leadWonAmount: lead.leadWonAmount,
      addCalender: lead.addCalender,
      leadLostReasonId: lead.leadLostReasonId,
      comment: lead.comment,
      leadCost: lead?.leadCost,
      companyName: lead?.companyName || "-",
      fullAddress: lead?.fullAddress || "-",
      city: lead?.city || "-",
      createdAt: lead?.createdAt || "-",
      website: lead?.website || "-",
      pinCode: lead?.pinCode || "-",
      email: lead?.email || "-",
      description: lead?.description || "-",
      updatedAt: lead?.updatedAt || "-",
      leadAddType: lead?.leadAddType || "-",
      alternatePhone: lead?.alternatePhone || "-",
      state: lead?.state || "-",
      country: lead?.country || "-",
    }));
  };

  const fetchLeads = async () => {
    try {
      setLoading(true);
      const params = {
        page: pagination.current,
        limit: pagination.pageSize,
        type: "followup", // Add type parameter to get only followup leads
        ...advancedFilters,
      };

      if (debouncedSearchTerm) {
        params.search = debouncedSearchTerm;
      }

      const { data, error, options } = await API.getAuthAPI(
        END_POINT.LEADS_FOLLOWUP_DATA,
        true,
        params
      );

      if (error) return;

      const transformedLeads = transformLeadData(data);
      setLeads(transformedLeads);
      setPagination({
        ...pagination,
        total: options.pagination.total,
      });
    } catch (error: any) {
      console.error(error.message || "Failed to fetch followup leads");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchLeads();
  }, [
    pagination.current,
    pagination.pageSize,
    debouncedSearchTerm,
    advancedFilters,
  ]);

  const handleAdvancedFilter = useCallback((filters: any) => {
    setPagination((prev) => ({ ...prev, current: 1 }));
    setAdvancedFilters(filters);
  }, []);

  const handleResetFilters = useCallback(() => {
    setAdvancedFilters({});
    setPagination((prev) => ({ ...prev, current: 1 }));
  }, []);

  const handleTableChange = (page: number, pageSize: number) => {
    setPagination({
      ...pagination,
      current: page,
      pageSize: pageSize,
    });
  };

  const debouncedSearch = useCallback(
    debounce((value: string) => {
      setDebouncedSearchTerm(value);
      setPagination({ ...pagination, current: 1 });
    }, 500),
    []
  );

  const handleSearch = (value: string) => {
    setSearchTerm(value);
    debouncedSearch(value);
  };

  const handleQuickUpdate = async (updateData: any) => {
    if (!selectedLead) return;

    try {
      setIsUpdating(true);
      const response = await API.updateAuthAPI(
        updateData,
        selectedLead.key,
        "lead",
        true
      );

      if (response.error) return;
      toast.success("Lead updated successfully");
      setIsQuickEditOpen(false);
      fetchLeads(); // Refresh the leads list
    } catch (error: any) {
      console.error(error.message || "Failed to update lead");
    } finally {
      setIsUpdating(false);
    }
  };

  // Handle select all checkbox
  function handleSelectAll({ isChecked }: { isChecked: boolean }) {
    if (isChecked) {
      const visibleKeys = leads.map((lead) => lead.key);
      setSelectedRowKeys((prevSelected) => {
        const uniqueKeys = new Set([...prevSelected, ...visibleKeys]);
        return Array.from(uniqueKeys);
      });
    } else {
      const visibleKeys = new Set(leads.map((lead) => lead.key));
      setSelectedRowKeys((prevSelected) =>
        prevSelected.filter((key) => !visibleKeys.has(key))
      );
    }
  }

  function areAllVisibleRowsSelected() {
    if (leads.length === 0) return false;
    return leads.every((lead) => selectedRowKeys.includes(lead.key));
  }

  function rowSelection({
    value,
    isChecked,
  }: {
    value: string;
    isChecked: boolean;
  }) {
    if (isChecked) {
      setSelectedRowKeys((prev) => [...prev, value]);
    } else {
      setSelectedRowKeys((prev) => prev.filter((key) => key !== value));
    }
  }

  const handleRowClick = (record: any) => {
    setSelectedLead(record);
    setIsQuickEditOpen(true);
    // navigate(`/leads/${record.key}`);
  };

  const handleBulkUpdate = async (data: {
    agentId?: string;
    statusId?: string;
  }) => {
    if (selectedRowKeys.length === 0) return;

    try {
      const payload = {
        leadIds: selectedRowKeys,
        ...(data.agentId && { assignedAgent: data.agentId }),
        ...(data.statusId && { leadStatus: data.statusId }),
      };

      const { data: response, error } = await API.updateAuthAPI(
        payload,
        "",
        END_POINT.BULK_UPDATE,
        true
      );

      if (error) throw new Error(error);

      toast.success(
        response.message ||
          `Successfully updated ${response.modifiedCount} leads`
      );

      // Reset selected rows and refresh data
      setSelectedRowKeys([]);
      fetchLeads();
    } catch (error: any) {
      console.error(error.message || "Failed to update leads");
    }
  };

  const handleDelete = async () => {
    if (selectedRowKeys.length === 0) {
      toast.error("Select alteast one lead.");
      return;
    }

    try {
      const payload = {
        leadIds: selectedRowKeys,
      };

      const { data: response, error } = await API.DeleteAuthAPI(
        "",
        END_POINT.BULK_DELETE,
        true,
        payload
      );

      if (error) throw new Error(error);
      // handleTableChange(1, 10);
      toast.success(
        response.message ||
          `Successfully updated ${response.modifiedCount} leads`
      );

      // Reset selected rows and refresh data
      setSelectedRowKeys([]);
      fetchLeads();
    } catch (error: any) {
      console.error(error.message || "Failed to update leads");
    }
  };

  useEffect(() => {
    console.log("Selected rows:", selectedRowKeys);
  }, [selectedRowKeys]);

  const handleColumnChange = (newColumns: string[]) => {
    setVisibleColumns(newColumns);
    localStorage.setItem("tableColumns", JSON.stringify(newColumns));
  };

  const getVisibleColumns = () => {
    return columns.filter(
      (col) =>
        col.key === "checkbox" ||
        col.key === "action" ||
        visibleColumns.includes(col.key)
    );
  };

  return (
    <div className="space-y-4">
      <LeadsTableHeader
        handleSearch={handleSearch}
        searchTerm={searchTerm}
        selectedCount={selectedRowKeys.length}
        onBulkUpdate={handleBulkUpdate}
        disabled={loading}
        handleDelete={handleDelete}
        onAdvancedFilter={handleAdvancedFilter}
        onResetFilters={handleResetFilters}
        loading={loading}
        columns={columns}
        selectedColumns={visibleColumns}
        onColumnChange={handleColumnChange}
      />

      <CustomAntdTable
        columns={getVisibleColumns()}
        dataSource={leads}
        pagination={{
          current: pagination.current,
          pageSize: pagination.pageSize,
          total: pagination.total,
          onChange: handleTableChange,
          pageSizeOptions: ["10", "20", "50", "100"],
          showSizeChanger: true,
        }}
        rowClassName={(record: Lead) => {
          if (isWithinNext24Hours(record.followUpDate)) {
            // return "bg-green-50 hover:bg-green-100 transition-colors duration-200 animate-in-range";
            return "bg-green-50 hover:bg-green-100 transition-colors duration-200";
          }
          if (isWithinPast24Hours(record.followUpDate)) {
            return "bg-red-50 hover:bg-red-100 transition-colors duration-200";
            // return "bg-red-50 hover:bg-red-100 transition-colors duration-200 animate-in-range";
          }
          return "animate-slide-in";
        }}
        onRow={(record: Lead) => ({
          style: {
            cursor: "pointer",
            transition: "all 0.2s",
          },
          onClick: () => handleRowClick(record),
        })}
        isLoading={loading}
      />
      {selectedLead && (
        <QuickEditModal
          isOpen={isQuickEditOpen}
          onClose={() => {
            fetchLeads();
            setIsQuickEditOpen(false);
            setSelectedLead(null);
          }}
          onSubmit={handleQuickUpdate}
          initialData={{
            id: selectedLead.key,
            status: selectedLead.statusData?._id || "",
            followUpDate: selectedLead.followUpDate,
            leadWonAmount: selectedLead.leadWonAmount,
            addCalender: selectedLead.addCalender, // You might want to get this from your lead data
            leadLostReasonId: selectedLead.leadLostReasonId, // You might want to get this from your lead data
            comment: selectedLead.comment, // You might want to get this from your lead data
            leadName: selectedLead.name,
          }}
          isLoading={isUpdating}
        />
      )}

      <style>{`
       
      `}</style>
    </div>
  );
};

export default FollowupLeads;


================================================
File: src/Pages/Leads/ImportLeads.tsx
================================================
import React, { useState, useRef } from "react";
import { message } from "antd";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import FileUploadFillType from "../../components/FormElements/FileUpload/FileUploadFillType";
import { API } from "../../api";
import {
  getStoredAgents,
  getStoredCountries,
  getStoredProductsServices,
  getStoredSources,
  getStoredStatus,
} from "../../api/commonAPI";
interface BulkUploadResponse {
  totalProcessed: number;
  successful: number;
  skipped: number;
  duplicateDetails: string[];
}

const ImportLeads: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [uploadResult, setUploadResult] = useState<BulkUploadResponse | null>(
    null
  );
  const fileInputRef = useRef<HTMLInputElement>(null);

  const agentList = getStoredAgents(true);
  const serviceList = getStoredProductsServices(true);
  const sourceList = getStoredSources(true);
  const statusList = getStoredStatus(true);
  const countryOptions = getStoredCountries(true);

  // Form state
  const [formData, setFormData] = useState({
    leadSource: "",
    status: "",
    assignToAgent: "",
    service: "",
    country: "",
    state: "",
  });

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const fileExtension = file.name.split(".").pop()?.toLowerCase();
      if (fileExtension === "xlsx" || fileExtension === "xls") {
        setSelectedFile(file);
        setUploadResult(null); // Reset previous results
        message.success("Excel file selected successfully");
      } else {
        message.error("Please select only Excel files (.xlsx or .xls)");
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
        setSelectedFile(null);
      }
    }
  };

  const handleSelectChange = (name: string, value: string | number) => {
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      message.error("Please select a file first");
      return;
    }

    // if (!formData.leadSource || !formData.status || !formData.assignToAgent) {
    //   message.error("Please fill in all required fields");
    //   return;
    // }

    try {
      setIsLoading(true);

      const formPayload = new FormData();
      formPayload.append("file", selectedFile);
      formPayload.append("leadSource", formData.leadSource);
      formPayload.append("service", formData.service);
      formPayload.append("status", formData.status);
      formPayload.append("country", formData.country);
      // formPayload.append("state", formData.state);
      formPayload.append("assignToAgent", formData.assignToAgent);

      const token = localStorage.getItem("accessToken") || "";

      const response = await API.postAuthAPI1(
        formPayload,
        "bulkUplodeLead",
        token,
        null,
        true,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            Authorization: token,
          },
        }
      );

      if (response.error) {
        throw new Error(response.error);
      }

      setUploadResult(response.data);
      message.success("File processed successfully");

      // Reset form after successful upload
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
      setSelectedFile(null);
      setFormData({
        leadSource: "",
        status: "",
        assignToAgent: "",
        service: "",
        country: "",
        state: "",
      });
    } catch (error: any) {
      message.error(error.message || "Failed to process file");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownloadSample = () => {
    try {
      // Create an anchor element
      const link = document.createElement("a");
      link.href = "/sampleSheet.xlsx"; // Path to the file in public directory
      link.download = "sampleSheet.xlsx";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      message.success("Sample file downloaded successfully");
    } catch (error) {
      console.error("Error downloading sample file:", error);
      message.error("Failed to download sample file");
    }
  };

  return (
    <div className="rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
      {/* File Upload Section */}
      <div className="mb-6 flex flex-col items-center justify-between gap-3 sm:flex-row">
        <label className="block text-lg font-medium text-gray-700 dark:text-gray-300">
          Select File (Excel File)
        </label>
        <FileUploadFillType
          onChange={handleFileChange}
          customClasses="w-full"
          accept=".xlsx,.xls"
          ref={fileInputRef}
          tooltipInfo="Only .xls and .xlsx formats are allowed to upload"
        />
        <ButtonDefault
          label="Download Sample File"
          onClick={handleDownloadSample}
          variant="secondary"
          customClasses="w-fit"
        />
      </div>

      {/* Form Fields */}
      <div className="mb-6 grid grid-cols-1 gap-6 md:grid-cols-2">
        <SelectGroupOne
          label="Lead Source"
          options={sourceList}
          selectedOption={formData.leadSource}
          setSelectedOption={(value) => handleSelectChange("leadSource", value)}
        />
        <SelectGroupOne
          label="Service"
          options={serviceList}
          selectedOption={formData.service}
          setSelectedOption={(value) => handleSelectChange("service", value)}
        />
        <SelectGroupOne
          label="Status"
          options={statusList}
          selectedOption={formData.status}
          setSelectedOption={(value) => handleSelectChange("status", value)}
        />
        <SelectGroupOne
          label="Country"
          options={countryOptions}
          selectedOption={formData.country}
          setSelectedOption={(value) => handleSelectChange("country", value)}
        />
        <SelectGroupOne
          label="Assign to agent"
          options={agentList}
          selectedOption={formData.assignToAgent}
          setSelectedOption={(value) =>
            handleSelectChange("assignToAgent", value)
          }
        />
        {/* <SelectGroupOne
          label="State"
          options={mockOptions}
          selectedOption={formData.state}
          setSelectedOption={(value) => handleSelectChange("state", value)}
        /> */}
      </div>

      {/* Upload Results */}
      {uploadResult && (
        <div className="mb-6 rounded-lg border border-stroke bg-gray-50 p-4 dark:border-strokedark dark:bg-gray-700">
          <h3 className="mb-3 text-lg font-semibold text-gray-900 dark:text-white">
            Upload Results
          </h3>
          <div className="space-y-2 text-gray-700 dark:text-gray-300">
            <p>Total Processed: {uploadResult.totalProcessed}</p>
            <p>Successfully Imported: {uploadResult.successful}</p>
            <p>Skipped: {uploadResult.skipped}</p>
            {uploadResult.duplicateDetails.length > 0 && (
              <div>
                <p className="mb-2 font-medium">Duplicate Entries:</p>
                <ul className="list-inside list-disc space-y-1 text-sm">
                  {uploadResult.duplicateDetails.map((detail, index) => (
                    <li key={index} className="text-red-600 dark:text-red-400">
                      {detail}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Submit Button */}
      <div className="flex w-full justify-center">
        <ButtonDefault
          label={isLoading ? "Processing..." : "Import Leads"}
          onClick={handleUpload}
          variant="primary"
          customClasses="w-full bg-primary text-white"
          disabled={isLoading || !selectedFile}
        />
      </div>
    </div>
  );
};

export default ImportLeads;


================================================
File: src/Pages/Leads/ImportedLeads.tsx
================================================
import AllLeads from "./AllLeads";

export default function ImportedLeads() {
  return <AllLeads derivativeEndpoint="/imported" showExportButtons={false} />;
}


================================================
File: src/Pages/Leads/LeadAction.tsx
================================================
import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { toast } from "react-toastify";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import CheckboxTwo from "../../components/FormElements/Checkboxes/CheckboxTwo";
import AllDetailsFields from "../Components/AllDetailsFields";
import AdditionalInformation from "../Components/AdditionalInformation";
import AttachmentTab from "../Components/AttachmentTab";
import CustomAntdTable from "../../components/Tables/CustomAntdTable";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import TabPanel from "../../components/TabPanel/TabPanel";
import LeadStatusUI from "../../components/CommonUI/LeadStatus/LeadStatus";
import { API } from "../../api";
import { getStoredAgents } from "../../api/commonAPI";
import MiniLoader from "../../components/CommonUI/Loader/MiniLoader";
import ConfirmationModal from "../../components/Modals/ConfirmationModal";
import AntDateTimePicker from "../../components/FormElements/DatePicker/AntDateTimePicker";
import { isEqual } from "lodash";
import { IoCaretBackOutline } from "react-icons/io5";

interface LeadHistory {
  _id: string;
  COMMENTED_BY: string;
  DATE: string;
  STATUS: string;
  FOLLOWUP_DATE: string;
  COMMENT: string;
}

interface LeadData {
  _id: string;
  firstName: string;
  lastName: string;
  email: string;
  contactNumber: string;
  leadSource: { _id: string; name: string };
  productService: { _id: string; name: string };
  assignedAgent: { _id: string; name: string };
  leadStatus: { _id: string; name: string };
  followUpDate: string;
  description: string;
  fullAddress: string;
  website: string;
  companyName: string;
  country: string;
  state: string;
  city: string;
  pinCode: string;
  alternatePhone: string;
  leadCost: number;
  addCalender: boolean;
}

interface LeadFormData {
  firstName: string;
  lastName: string;
  email: string;
  contactNumber: string;
  leadSource: string;
  productService: string;
  assignedAgent: string;
  leadStatus: string;
  description: string;
  companyName: string;
  website: string;
  fullAddress: string;
  country: string;
  state: string;
  city: string;
  pinCode: string;
  alternatePhone: string;
  leadCost: number;
  comment: string;
  followUpDate?: string;
  addCalender?: boolean;
}

interface GeoLocation {
  _id: string;
  fileName: string;
  originalName: string;
  s3Url: string;
  coordinates: string;
  createdAt: string;
}

const LeadAction = ({
  isModalView = false,
  leadIdProp = "",
  onClose = () => {},
}: any) => {
  const { leadId } = isModalView
    ? { leadId: leadIdProp }
    : useParams<{ leadId: string }>();

  const agendList = getStoredAgents(true);
  const [isLoading, setIsLoading] = useState(true);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isFirstCommentClick, setIsFirstCommentClick] = useState(true);
  const [leadData, setLeadData] = useState<{
    lead: LeadData;
    history: LeadHistory[];
    geoLocation: GeoLocation[];
  } | null>(null);
  const [formData, setFormData] = useState({
    status: "",
    description: "",
    addToCalendar: false,
    followup: "",
    comment: "",
    assignedAgent: "",
    leadWonAmount: 0,
    leadLostReasonId: "",
  });
  const [initialFormData, setInitialFormData] = useState(formData);
  const [showNavigationModal, setShowNavigationModal] = useState(false);

  const navigate = useNavigate();

  const hasFormChanges = () => {
    const relevantFormData = {
      ...formData,
      // Exclude comment from comparison if it's the first click
      ...(isFirstCommentClick ? {} : { comment: formData.comment }),
    };

    const relevantInitialData = {
      ...initialFormData,
      // Exclude comment from comparison if it's the first click
      ...(isFirstCommentClick ? {} : { comment: initialFormData.comment }),
    };

    return !isEqual(relevantFormData, relevantInitialData);
  };

  const fetchLeadData = async () => {
    try {
      setIsLoading(true);
      const response = await API.getAuthAPI(`lead/${leadId}`, true);
      if (response.error || !response) return;

      const { leadDetails } = response?.data;
      setLeadData(leadDetails);
      setIsFirstCommentClick(true); // Reset first click state

      const newFormData = {
        status: leadDetails?.lead?.leadStatus?._id,
        description: leadDetails?.lead?.description,
        addToCalendar: leadDetails?.lead?.addCalender,
        followup: leadDetails?.lead?.followUpDate,
        comment: leadDetails?.lead?.comment || "",
        assignedAgent: leadDetails?.lead?.assignedAgent?._id || "",
        leadWonAmount: leadDetails?.lead?.leadWonAmount || 0,
        leadLostReasonId: leadDetails?.lead?.leadLostReasonId || "",
      };

      setFormData(newFormData);
      setInitialFormData(newFormData); // Store initial form data
    } catch (error: any) {
      console.error(error.message || "Failed to fetch lead details");
    } finally {
      setIsLoading(false);
    }
  };

  const handleCommentFocus = () => {
    if (isFirstCommentClick) {
      setFormData((prev) => ({ ...prev, comment: "" }));
      setIsFirstCommentClick(false);
    }
  };

  useEffect(() => {
    if (leadId) {
      fetchLeadData();
      setIsFirstCommentClick(true); // Reset first click state
    }
  }, [leadId]);

  const hasFormChanged = () => {
    return JSON.stringify(formData) !== JSON.stringify(initialFormData);
  };
  // Add this function to handle navigation
  const handleNavigation = () => {
    // Check if there are unsaved changes here if needed
    setShowNavigationModal(true);
  };

  const handleEditMore = () => {
    onClose();
    navigate(`/leads/${leadId}`);
  };

  const handleNavigationConfirm = () => {
    setShowNavigationModal(false);
    navigate(-1);
  };

  const handleUpdateLead = async (updateData: Partial<LeadFormData>) => {
    try {
      setIsUpdating(true);

      const response = await API.updateAuthAPI(
        updateData,
        leadId!,
        "lead",
        true
      );

      if (response.error) return;

      toast.success(response.message || "Lead updated successfully");
      if (isModalView) {
        onClose();
      } else {
        navigate(-1);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to update lead");
    } finally {
      setIsUpdating(false);
    }
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (name: string, value: string | number) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (_selectedDates: Date[], dateStr: string) => {
    setFormData((prev) => ({ ...prev, followup: dateStr }));
  };

  const handleCheckboxChange = ({
    value,
    isChecked,
  }: {
    value: string;
    isChecked: boolean;
  }) => {
    setFormData((prev) => ({ ...prev, [value]: isChecked }));
  };

  const handleMainFormSubmit = async () => {
    if (!formData.comment.trim()) {
      toast.error("Please add a comment");
      return;
    }

    const updateData = {
      leadStatus: formData.status,
      description: formData.description,
      addCalender: formData.addToCalendar,
      followUpDate: formData.followup,
      comment: formData.comment,
      assignedAgent: formData.assignedAgent,
      leadWonAmount: formData.leadWonAmount,
      leadLostReasonId: formData.leadLostReasonId || null,
    };

    await handleUpdateLead(updateData);
  };

  const historyColumns = [
    {
      title: "COMMENTED BY",
      dataIndex: "COMMENTED_BY",
      key: "COMMENTED_BY",
    },
    {
      title: "DATE",
      dataIndex: "DATE",
      key: "DATE",
      render: (date: string) => new Date(date).toLocaleString(),
    },
    {
      title: "STATUS",
      dataIndex: "STATUS",
      key: "STATUS",
    },
    {
      title: "FOLLOWUP DATE",
      dataIndex: "FOLLOWUP_DATE",
      key: "FOLLOWUP_DATE",
      render: (date: string) => new Date(date).toLocaleString(),
    },
    {
      title: "COMMENT",
      dataIndex: "COMMENT",
      key: "COMMENT",
    },
  ];

  const staticData = leadData?.lead
    ? [
        {
          fieldName: "Full Name",
          fieldNameValue: `${leadData.lead?.firstName} ${leadData.lead?.lastName}`,
        },
        {
          fieldName: "Email",
          fieldNameValue: leadData.lead?.email,
        },
        {
          fieldName: "Contact Number",
          fieldNameValue: leadData.lead?.contactNumber,
        },
        {
          fieldName: "Region",
          fieldNameValue: `${leadData.lead?.city}, ${leadData.lead?.state}`,
        },
        {
          fieldName: "Lead Source",
          fieldNameValue: leadData.lead?.leadSource?.name,
        },
        {
          fieldName: "Service",
          fieldNameValue: leadData.lead?.productService?.name,
        },
      ]
    : [];

  const tabsData = isModalView
    ? []
    : [
        {
          tabName: "History",
          component: (
            <CustomAntdTable
              columns={historyColumns}
              dataSource={leadData?.history || []}
            />
          ),
        },
        {
          tabName: "All Details",
          component: (
            <AllDetailsFields
              leadData={leadData?.lead}
              onUpdate={handleUpdateLead}
              leadStatus={formData.status}
            />
          ),
        },
        {
          tabName: "Additional Information",
          component: (
            <AdditionalInformation
              leadData={leadData?.lead}
              onUpdate={handleUpdateLead}
              leadStatus={formData.status}
            />
          ),
        },
        {
          tabName: "Geo-Location Record",
          component: (
            <AttachmentTab geoLocations={leadData?.geoLocation || []} />
          ),
        },
      ];

  if (isLoading) {
    return <MiniLoader />;
  }

  return (
    <div
      className={`rounded-lg bg-white ${
        isModalView ? "" : "p-6 shadow-md"
      } dark:bg-gray-dark`}
    >
      <div className="mb-6 flex items-center justify-between">
        <h2 className="text-2xl font-semibold text-dark dark:text-white flex gap-2">
          {!isModalView && (
            <span
              className="flex self-center cursor-pointer"
              onClick={() => {
                 if(hasFormChanged()){
                  setShowNavigationModal(true); 
                 }else{
                  navigate(-1);
                 }
               
              }}
            >
              <IoCaretBackOutline className="inline" />{" "}
            </span>
          )}
          Basic Details
        </h2>
      </div>

      <div className="mb-8 flex w-full flex-col justify-between gap-4 sm:flex-row sm:gap-8">
        <div className="flex w-full flex-col gap-4 border-r-0 pr-0 text-dark dark:text-white sm:border-r-2 sm:pr-8">
          {staticData?.map((item) => (
            <div
              key={item.fieldName}
              className="flex w-full items-center border-b-2 border-solid border-gray py-2"
            >
              <span className="w-[220px] text-lg font-medium">
                {item.fieldName}
              </span>
              <span className="text-base">{item.fieldNameValue}</span>
            </div>
          ))}
          <SelectGroupOne
            label="Agent Name"
            options={agendList}
            selectedOption={formData?.assignedAgent}
            setSelectedOption={(value) =>
              handleSelectChange("assignedAgent", value)
            }
          />
        </div>

        <div className="flex w-full flex-col gap-4">
          <LeadStatusUI
            handleInputChange={handleInputChange}
            handleSelectChange={handleSelectChange}
            formData={formData}
            defaultValue={formData.status}
            value={formData.status}
            lostReasonValue={formData.leadLostReasonId}
          />

          <AntDateTimePicker
            label="Followup"
            onChange={handleDateChange}
            defaultValue={formData.followup}
            enableTime
          />

          <div>
            <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
              Description
            </label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              placeholder="Notes about Lead"
              className="w-full rounded-lg border-[1.5px] border-stroke bg-transparent px-5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
              rows={2}
            />
          </div>

          <div>
            <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
              Comment
            </label>
            <textarea
              name="comment"
              value={formData.comment}
              onChange={handleInputChange}
              onFocus={handleCommentFocus}
              placeholder="Add your comment"
              className="w-full rounded-lg border-[1.5px] border-stroke bg-transparent px-5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
              rows={2}
            />
          </div>

          <div className="flex items-center">
            <CheckboxTwo
              label="Add to Calendar"
              onChange={handleCheckboxChange}
              checked={formData.addToCalendar}
              id="addToCalendar"
            />
          </div>
        </div>
      </div>

      <div className="flex w-full gap-3 justify-center">
        <ButtonDefault
          onClick={handleMainFormSubmit}
          label={isUpdating ? "Updating..." : "Update Lead"}
          variant="primary"
          disabled={isUpdating || !hasFormChanges()}
        />
        {isModalView ? (
          <>
            <ButtonDefault
              onClick={handleEditMore}
              label={"Edit More"}
              variant="secondary"
              disabled={isUpdating}
            />
            <ButtonDefault
              onClick={onClose}
              label={"Cancel"}
              variant="primary"
              customClasses="bg-red-500"
              disabled={isUpdating}
            />
          </>
        ) : // <ButtonDefault
        //   onClick={handleNavigation}
        //   label={"Go Back"}
        //   variant="primary"
        //   disabled={isUpdating}
        // />
        null}
      </div>
      {isModalView ? null : (
        <TabPanel
          tabsData={tabsData}
          type="card"
          defaultActiveKey="1"
          customClassName="mt-6"
        />
      )}

      <ConfirmationModal
        isOpen={showNavigationModal}
        onClose={() => setShowNavigationModal(false)}
        onConfirm={handleNavigationConfirm}
        type="warning"
        title="Confirm Navigation"
        message="Are you sure you want to leave this page? Any unsaved changes will be lost."
        confirmLabel="Leave Page"
        cancelLabel="Stay"
      />
    </div>
  );
};

export default LeadAction;


================================================
File: src/Pages/Leads/LeadsTableHeader.tsx
================================================
import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import { SearchOutlined } from "@ant-design/icons";
import AdvanceFilterUI from "../Components/AdvanceFilterUI";
import useScreenHook from "../../hooks/useScreenHook";
import SearchForm from "../../components/Header/SearchForm";
import { getStoredAgents, getStoredStatus } from "../../api/commonAPI";
import ConfirmationModal from "../../components/Modals/ConfirmationModal";
import ColumnSelector from "../../components/Utils/TableColumnSelector";

interface LeadsTableHeaderProps {
  handleSearch: (value: string) => void;
  searchTerm: string;
  selectedCount: number;
  onBulkUpdate: (data: {
    agentId?: string;
    statusId?: string;
  }) => Promise<void>;
  disabled?: boolean;
  handleDelete: () => void;
  onAdvancedFilter: (filters: any) => void;
  onResetFilters: () => void;
  loading?: boolean;
  initialFilterData?: any;
  showExportButtons?: any;
  onExportPDF?: () => any;
  onExportExcel?: () => any;
  // Add these new props
  columns?: any[];
  selectedColumns?: string[];
  onColumnChange?: (columns: string[]) => void;
}

export default function LeadsTableHeader({
  handleSearch,
  searchTerm,
  selectedCount = 0,
  onBulkUpdate,
  disabled = false,
  handleDelete,
  onAdvancedFilter,
  onResetFilters,
  loading = false,
  initialFilterData = {},
  showExportButtons = false,
  onExportPDF = () => {},
  onExportExcel = () => {},
  columns = [],
  selectedColumns = [],
  onColumnChange,
}: LeadsTableHeaderProps) {
  // Get stored data
  const statusList = getStoredStatus(true);
  const agentList = getStoredAgents(true);
  const { filterType, statusId } = initialFilterData;

  // States
  const [isLoading, setIsLoading] = useState(false);
  const [selectedStatus, setSelectedStatus] = useState<string>("");
  const [selectedAgent, setSelectedAgent] = useState<string>("");
  const [isAdvanceFilterEnable, setIsAdvanceFilterEnable] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);

  // Hooks
  const { deviceType } = useScreenHook();

  const showDeleteConfirmation = () => {
    setIsDeleteModalOpen(true);
  };

  const handleDeleteConfirm = () => {
    setIsDeleteModalOpen(false);
    handleDelete();
  };

  const handleSubmit = async () => {
    if (!selectedStatus && !selectedAgent) {
      toast.error("Please select either status or agent");
      return;
    }

    if (selectedCount === 0) {
      toast.error("Please select at least one lead");
      return;
    }

    try {
      setIsLoading(true);
      await onBulkUpdate({
        agentId: selectedAgent || undefined,
        statusId: selectedStatus || undefined,
      });

      // Reset selections after successful update
      setSelectedStatus("");
      setSelectedAgent("");
    } catch (error) {
      // Error handling is done in parent component
    } finally {
      setIsLoading(false);
    }
  };

  const handleExportPDF = async () => {
    await onExportPDF();
  };

  const handleExportExcel = async () => {
    await onExportExcel();
  };

  const exportButtons = (
    <>
      <ButtonDefault
        label="Export PDF"
        variant="outline"
        customClasses="bg-black text-white w-full sm:w-fit"
        onClick={handleExportPDF}
        disabled={loading}
      />
      <ButtonDefault
        label="Export Excel"
        variant="outline"
        customClasses="bg-black text-white w-full sm:w-fit"
        onClick={handleExportExcel}
        disabled={loading}
      />
    </>
  );

  // Update the export buttons section in both desktop and mobile views
  const renderDesktopExportButtons = () => (
    <div className="flex space-x-2">
       {columns && selectedColumns && onColumnChange && (
        <ColumnSelector
          allColumns={columns}
          selectedColumns={selectedColumns}
          onColumnChange={onColumnChange}
          disabled={loading}
        />
      )}
      {showExportButtons && exportButtons}
      {deleteButtons}
    </div>
  );

  const renderMobileExportButtons = () => (
    <div className="mb-4 flex justify-center gap-2">
      {showExportButtons && exportButtons}
      {deleteButtons}
    </div>
  );

  const deleteButtons = (
    <ButtonDefault
      label="Delete"
      variant="outline"
      customClasses="bg-red-500 text-white w-full sm:w-fit"
      disabled={selectedCount === 0}
      onClick={showDeleteConfirmation}
    />
  );

  const renderMobileView = () => {
    return (
      <>
        <div className="mb-3 flex flex-row gap-2">
          <div className="w-full">
            <SearchForm
              customClasses="border-stroke-dark"
              onSearch={handleSearch}
              searchTerm={searchTerm}
              placeholder="Search leads..."
            />
          </div>
          <div className="w-[30%]">
            <ButtonDefault
              label="Advance Filter"
              variant="outline"
              onClick={() => setIsAdvanceFilterEnable(!isAdvanceFilterEnable)}
            />
          </div>
        </div>
        {isAdvanceFilterEnable && (
          <AdvanceFilterUI
            onFilter={onAdvancedFilter}
            onReset={onResetFilters}
            loading={loading}
          />
        )}

        {selectedCount > 0 && (
          <div className="mb-4 flex flex-col gap-2">
            <span className="text-center text-sm font-medium text-dark dark:text-white">
              Bulk Action on {selectedCount} selected rows
            </span>
            <div className="flex flex-col gap-2">
              <SelectGroupOne
                options={statusList}
                placeholder="Select Status"
                setSelectedOption={setSelectedStatus}
                selectedOption={selectedStatus}
                disabled={disabled || isLoading}
              />
              <SelectGroupOne
                options={agentList}
                placeholder="Select Employee"
                setSelectedOption={setSelectedAgent}
                selectedOption={selectedAgent}
                disabled={disabled || isLoading}
              />
              <ButtonDefault
                label={isLoading ? "Updating..." : "Update Selected"}
                variant="primary"
                onClick={handleSubmit}
                disabled={disabled || isLoading}
                fullWidth
              />
            </div>
          </div>
        )}
        {renderMobileExportButtons()}
      </>
    );
  };

  useEffect(() => {
    if (!filterType && !statusId) {
      setIsAdvanceFilterEnable(false);
    } else {
      setIsAdvanceFilterEnable(true);
    }
  }, [filterType, statusId]);

  return (
    <>
      <div className="mb-4 hidden justify-between sm:flex">
        <div className="hidden flex-col items-center justify-center gap-3 rounded-md border border-stroke bg-white px-6.5 py-4 shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card sm:flex min-w-[530px]">
          <span className="text-base font-medium text-dark dark:text-white">
            Bulk Action{" "}
            {selectedCount ? `on ${selectedCount} selected rows` : null}
          </span>
          <div className="flex gap-2 w-full">
            <SelectGroupOne
              options={statusList}
              placeholder="Select Status"
              setSelectedOption={setSelectedStatus}
              selectedOption={selectedStatus}
              wrapperClasses="w-full"
              disabled={disabled || isLoading}
            />
            <SelectGroupOne
              options={agentList}
              placeholder="Select Employee"
              setSelectedOption={setSelectedAgent}
              selectedOption={selectedAgent}
              wrapperClasses="w-full"
              disabled={disabled || isLoading}
            />
            <ButtonDefault
              label={isLoading ? "Updating..." : "Submit"}
              variant="primary"
              onClick={handleSubmit}
              disabled={disabled || isLoading || selectedCount === 0}
            />
          </div>
        </div>
        <div className="hidden flex-col gap-2 sm:flex">
          <ButtonDefault
            icon={<SearchOutlined />}
            label="Advance Filter"
            variant="outline"
            onClick={() => setIsAdvanceFilterEnable(!isAdvanceFilterEnable)}
            fullWidth
          />
          <div className="flex gap-2">
            <ButtonDefault
              mode="link"
              link="/import"
              label="↓ Import"
              variant="outline"
            />
            <ButtonDefault
              mode="link"
              link="/leads/add"
              label="+ Add Lead"
              variant="outline"
            />
          </div>
        </div>
      </div>
      {isAdvanceFilterEnable && deviceType !== "mobile" && (
        <AdvanceFilterUI
          onFilter={onAdvancedFilter}
          onReset={onResetFilters}
          loading={loading}
          initialFilterData={initialFilterData}
          setIsAdvanceFilterEnable={setIsAdvanceFilterEnable}
        />
      )}
      <div className="mb-4 hidden justify-between sm:flex">
        <div className="w-full">
          <SearchForm
            customClasses="border-stroke-dark"
            onSearch={handleSearch}
            searchTerm={searchTerm}
            placeholder="Search leads..."
          />
        </div>
        {renderDesktopExportButtons()}
      </div>
      {deviceType === "mobile" && renderMobileView()}
      {/* // Delete confirmation */}
      <ConfirmationModal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        onConfirm={handleDeleteConfirm}
        type="delete"
        title="Confirm Deletion"
        message={`Are you sure you want to delete ${selectedCount} item`}
        count={selectedCount}
        confirmLabel="Delete"
      />
    </>
  );
}


================================================
File: src/Pages/Leads/OutsourcedLeads.tsx
================================================
import AllLeads from "./AllLeads";

export default function OutsourcedLeads() {
  return (
    <AllLeads derivativeEndpoint="/outsourced" showExportButtons={false} />
  );
}


================================================
File: src/Pages/ManageDoctors/ManageDoctors.tsx
================================================
import React from 'react'

export default function ManageDoctors() {
  return (
    <div>ManageDoctors</div>
  )
}


================================================
File: src/Pages/NotFound/NotFound.tsx
================================================

export default function NotFound({text}:any) {
  return (
    <div className="p-4 text-center">
      <h1 className="text-2xl font-bold text-red-500">{text|| "skdskldjlsdlksd sjdjslkdjskldsd"}</h1>
    </div>
  );
}


================================================
File: src/Pages/NotFound/Testing.tsx
================================================
export default function Testing() {
  return (
    <div>Testing</div>
  )
}


================================================
File: src/Pages/ProductAndServices/AddNewProduct.tsx
================================================
import React, { useState } from "react";
import InputGroup from "../../components/FormElements/InputGroup";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
interface ProductService {
  key?: string;
  productName?: string;
  price?: number;
  setupFee?: number;
}

const AddNewProduct = ({
  data,
  handleSubmit,
}: {
  data: ProductService;
  handleSubmit: (enable: boolean, productData: ProductService) => void;
}) => {
  const [formData, setFormData] = useState({
    productServiceName: data?.productName || "",
    setupFee: data?.setupFee || 0,
    price: data?.price || 0,
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmitLocal = () => {
    console.log("Submitting new service:", formData);
    handleSubmit(false, formData);
    // Implement your submit logic here
  };

  return (
    <div className="mx-auto max-w-2xl rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
      <h2 className="mb-6 text-2xl font-semibold text-dark dark:text-white">
        Add New Services
      </h2>

      <div className="space-y-4">
        <InputGroup
          label="Product & Service Name"
          name="productServiceName"
          type="text"
          placeholder="Product & Service Name"
          value={formData.productServiceName}
          onChange={handleInputChange}
        />

        <InputGroup
          label="Setup fee"
          name="setupFee"
          type="number"
          placeholder="Setup fee"
          value={formData.setupFee}
          onChange={handleInputChange}
        />

        <InputGroup
          label="Price"
          name="price"
          type="number"
          placeholder="Payment"
          value={formData.price}
          onChange={handleInputChange}
        />
      </div>

      <div className="mt-6 flex justify-end">
        <ButtonDefault label="Submit" onClick={handleSubmitLocal} />
      </div>
    </div>
  );
};

export default AddNewProduct;


================================================
File: src/Pages/ProductAndServices/ProductAndServiceDash.tsx
================================================
import { useState, useEffect } from "react";
import DynamicDataManagement from "../../components/DynamicDataManagement/DynamicDataManagement";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";

interface ProductService {
  key: string;
  sn: number;
  productName: string;
  price: number;
  setupFee: number;
}
const fields = [
  {
    name: "productName",
    label: "Product & Service Name",
    type: "text",
  },
  { name: "setupFee", label: "Setup fee", type: "number" },
  { name: "price", label: "Price", type: "number" },
];

const columns = [
  {
    title: "S.N.",
    dataIndex: "sn",
    key: "sn",
  },
  {
    title: "Product Name",
    dataIndex: "productName",
    key: "productName",
    minWidth: 150,
  },
  {
    title: "Setup Fee",
    dataIndex: "setupFee",
    key: "setupFee",
    minWidth: 120,
    render: (price: number) => `Rs. ${price}`,
  },
  {
    title: "Price",
    dataIndex: "price",
    key: "price",
    render: (price: number) => `Rs. ${price}`,
    minWidth: 120,
  },
  {
    title: "Orders",
    dataIndex: "order",
    key: "order",
    render: (order: number) => `${order}`,
  },
];

const ProductAndServiceDash = () => {
  const [data, setData] = useState<ProductService[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const fetchProductServices = async () => {
    try {
      setIsLoading(true);
      const { data: response } = await API.getAuthAPI(
        END_POINT.PRODUCT_SERVICE,
        true
      );

      if (response) {
        // Transform the API response to match your interface
        const transformedData: ProductService[] = response.map(
          (item: any, index: number) => ({
            key: item._id,
            sn: index + 1,
            productName: item.name || "",
            price: item.price || 0,
            setupFee: item.setupFee || 0,
            deleted: false,
            isActive: true,
            order: 2,
          })
        );
        setData(transformedData);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to fetch product services");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchProductServices();
  }, []);

  const handleAdd = async (newItem: any) => {
    try {
      setIsLoading(true);
      const payload = {
        name: newItem.productName,
        price: Number(newItem.price),
        setupFee: Number(newItem.setupFee),
      };

      const { message, error } = await API.postAuthAPI(
        payload,
        END_POINT.PRODUCT_SERVICE,
        true
      );

      if (error) return;

      toast.success("Product service added successfully!");
      fetchProductServices(); // Refresh the list
    } finally {
      setIsLoading(false);
    }
  };

  const handleEdit = async (key: string, updatedItem: any) => {
    try {
      setIsLoading(true);

      const payload = {
        name: updatedItem.productName,
        price: Number(updatedItem.price),
        setupFee: Number(updatedItem.setupFee),
        deleted: updatedItem.delete,
        // isActive: updatedItem.isActive,
      };

      const { data, message, error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.PRODUCT_SERVICE,
        true
      );
      if (!data || error) return;

      toast.success("Product service updated successfully!");
      fetchProductServices(); // Refresh the list
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async (key: string) => {
    try {
      const { error } = await API.DeleteAuthAPI(
        key,
        END_POINT.PRODUCT_SERVICE,
        true
      );

      if (error) return;

      toast.success("Product service deleted successfully!");
      fetchProductServices(); // Refresh the list
    } catch (error: any) {
      console.error(error.message || "Failed to delete product service");
    }
  };

  const handleUpdate = async (key: string, status: boolean) => {
    try {
      setIsLoading(true);

      const payload = { isActive: !status };
      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.PRODUCT_SERVICE,
        true
      );
      if (error) return;
      // toast.success("Status updated successfully!");
      fetchProductServices(); // Refresh the list
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="mx-auto max-w-7xl">
      <DynamicDataManagement
        title="Product and Service"
        fields={fields}
        columns={columns}
        data={data}
        onAdd={handleAdd}
        onEdit={handleEdit}
        onDelete={handleDelete}
        onUpdate={handleUpdate}
        isLoading={isLoading}
        customClasses="p-6 shadow-md dark:bg-gray-800"
      />
    </div>
  );
};

export default ProductAndServiceDash;


================================================
File: src/Pages/Reports/CallReport.tsx
================================================
import { useEffect, useMemo, useState, useCallback } from "react";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import CallDetails from "../CallManage/components/CallDetails";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";
import { getStoredAgents } from "../../api/commonAPI";
import dayjs from "dayjs";
import Heading from "../../components/CommonUI/Heading";
import AntDateTimePicker from "../../components/FormElements/DatePicker/AntDateTimePicker";

interface CallListResponse {
  calls: any[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    pages: number;
  };
}

const fromDateInitial = new Date(
  new Date().setMonth(new Date().getMonth() - 1)
);

export default function CallReport() {
  // State for employee selection
  const [employeeList, setEmployeeList] = useState<any[]>([]);
  const [selectedEmployee, setSelectedEmployee] = useState<{
    value: string;
    label: string;
  } | null>(null);

  // State for dates
  const [fromDate, setFromDate] = useState(fromDateInitial);
  const [toDate, setToDate] = useState(new Date());

  // State for call list
  const [callListData, setCallListData] = useState<any[]>([]);
  const [searchText, setSearchText] = useState("");
  const [callListLoading, setCallListLoading] = useState(false);
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0,
  });

  // Fetch and set employee list on component mount
  useEffect(() => {
    const agents = getStoredAgents() || [];
    const formattedAgents = agents.map((agent: any) => ({
      value: agent._id,
      label: agent.name,
    }));
    setEmployeeList(formattedAgents);

    if (formattedAgents.length > 0) {
      setSelectedEmployee(formattedAgents[0]);
      fetchCallList(
        1,
        pagination.pageSize,
        "",
        formattedAgents[0].value,
        fromDate,
        toDate
      );
    }
  }, []);

  const fetchCallList = useCallback(
    async (
      page: number,
      pageSize: number,
      search: string,
      userId: string,
      startDate: Date,
      endDate: Date
    ) => {
      if (!userId) return;

      try {
        setCallListLoading(true);
        const payload = {
          userId,
          startDate: dayjs(startDate).format("YYYY-MM-DD"),
          endDate: dayjs(endDate).format("YYYY-MM-DD"),
        };

        const params = new URLSearchParams({
          page: page.toString(),
          limit: pageSize.toString(),
          ...(search && { search }),
        });

        const { data: response, error } =
          await API.postAuthAPI<CallListResponse>(
            payload,
            `${END_POINT.CALL_LIST}?${params.toString()}`,
            true
          );

        if (error) throw new Error(error);

        if (response) {
          setCallListData(response.calls);
          setPagination({
            current: response.pagination.page,
            pageSize: response.pagination.limit,
            total: response.pagination.total,
          });
        }
      } catch (error: any) {
        toast.error(error.message || "Failed to fetch call list");
      } finally {
        setCallListLoading(false);
      }
    },
    []
  );

  const handleEmployeeChange = useCallback(
    (value: string) => {
      const selectedEmp = employeeList.find((emp) => emp.value === value);
      setSelectedEmployee(selectedEmp || null);
    },
    [employeeList]
  );

  const handleFromDateChange = useCallback(
    (_selectedDates: Date[], dateStr: string) => {
      setFromDate(new Date(dateStr));
    },
    []
  );

  const handleToDateChange = useCallback(
    (_selectedDates: Date[], dateStr: string) => {
      setToDate(new Date(dateStr));
    },
    []
  );

  const handleApply = useCallback(() => {
    if (!selectedEmployee) {
      toast.error("Please select an employee");
      return;
    }
    // Reset pagination to first page when applying new filters
    fetchCallList(
      1,
      pagination.pageSize,
      searchText,
      selectedEmployee.value,
      fromDate,
      toDate
    );
  }, [
    selectedEmployee,
    fromDate,
    toDate,
    searchText,
    pagination.pageSize,
    fetchCallList,
  ]);

  const handleSearch = useCallback(
    (value: string) => {
      setSearchText(value);
      if (selectedEmployee) {
        fetchCallList(
          1,
          pagination.pageSize,
          value,
          selectedEmployee.value,
          fromDate,
          toDate
        );
      }
    },
    [selectedEmployee, fromDate, toDate, pagination.pageSize, fetchCallList]
  );

  const handleTableChange = useCallback(
    (newPagination: number, pageSize: number) => {
      if (selectedEmployee) {
        fetchCallList(
          newPagination,
          pageSize,
          searchText,
          selectedEmployee.value,
          fromDate,
          toDate
        );
      }
    },
    [selectedEmployee, searchText, fromDate, toDate, fetchCallList]
  );

  const memoizedCallDetails = useMemo(
    () => (
      <CallDetails
        data={callListData}
        loading={callListLoading}
        onSearch={handleSearch}
        pagination={pagination}
        onTableChange={handleTableChange}
        searchText={searchText}
      />
    ),
    [
      callListData,
      callListLoading,
      handleSearch,
      pagination,
      handleTableChange,
      searchText,
    ]
  );

  return (
    <div className="rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
      <Heading title="Call Report" />
      <div className="mb-6 flex flex-wrap items-end gap-4">
        <div className="w-full lg:w-1/4">
          <SelectGroupOne
            label="Select Employee"
            options={employeeList}
            selectedOption={selectedEmployee?.value}
            setSelectedOption={handleEmployeeChange}
          />
        </div>
        <div className="w-full lg:w-1/4">
          <AntDateTimePicker
            label="From Date"
            onChange={handleFromDateChange}
            defaultValue={fromDate.toISOString()}
          />
        </div>
        <div className="w-full lg:w-1/4">
          <AntDateTimePicker
            label="To Date"
            onChange={handleToDateChange}
            defaultValue={toDate.toISOString()}
          />
        </div>
        <ButtonDefault
          label={callListLoading ? "Loading..." : "Apply"}
          onClick={handleApply}
          customClasses="min-w-[130px]"
          disabled={callListLoading || !selectedEmployee}
        />
      </div>
      {memoizedCallDetails}
    </div>
  );
}


================================================
File: src/Pages/Reports/ManageReports.tsx
================================================
import React, { useState, useEffect } from "react";
import { Card, DatePicker } from "antd";
import dayjs from "dayjs";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import CustomAntdTable from "../../components/Tables/CustomAntdTable";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";
import {
  getStoredAgents,
  getStoredProductsServices,
  getStoredSources,
  getStoredStatus,
} from "../../api/commonAPI";
import Heading from "../../components/CommonUI/Heading";

const { RangePicker } = DatePicker;

interface SummaryCardProps {
  title: string;
  value: string | number;
}

interface ReportPayload {
  assignedAgent?: string;
  ProductService?: string;
  leadSource?: string;
  leadStatus?: string;
  startDate: string;
  endDate: string;
}

interface ReportResponse {
  summary: {
    total: number;
    won: number;
    amount: number;
    ratio: string;
  };
  leads: Array<{
    srNo: number;
    clientName: string;
    leadPrice: number;
  }>;
}

const SummaryCard: React.FC<SummaryCardProps> = ({ title, value }) => (
  <Card className="bg-white text-center shadow-md dark:bg-gray-700">
    <p className="text-lg font-semibold text-gray-600 dark:text-gray-300">
      {title}
    </p>
    <p className="text-2xl font-bold text-gray-800 dark:text-white">{value}</p>
  </Card>
);

const ManageReports: React.FC = () => {
  // Get stored data for dropdowns
  const agentList = getStoredAgents(true);
  const serviceList = getStoredProductsServices(true);
  const sourceList = getStoredSources(true);
  const statusList = getStoredStatus(true);

  // Form state
  const [isLoading, setIsLoading] = useState(false);
  const [reportData, setReportData] = useState<ReportResponse | null>(null);
  const [selectedAgent, setSelectedAgent] = useState("");
  const [selectedProduct, setSelectedProduct] = useState("");
  const [selectedSource, setSelectedSource] = useState("");
  const [selectedStatus, setSelectedStatus] = useState("");
  const [dateRange, setDateRange] = useState<[string, string]>([
    dayjs().subtract(1, "month").format("YYYY-MM-DD"),
    dayjs().format("YYYY-MM-DD"),
  ]);

  const columns = [
    {
      title: "Sr. No.",
      dataIndex: "srNo",
      key: "srNo",
      minWidth: 80,
    },
    {
      title: "Employee Name",
      dataIndex: "clientName",
      key: "clientName",
      minWidth: 115,
    },
    {
      title: "Lead Price",
      dataIndex: "leadPrice",
      key: "leadPrice",
      minWidth: 113,
    },
  ];

  const handleDateRangeChange = (
    _dates: any,
    dateStrings: [string, string]
  ) => {
    setDateRange(dateStrings);
  };

  const fetchReportData = async () => {
    try {
      setIsLoading(true);

      const payload: ReportPayload = {
        assignedAgent: selectedAgent,
        ProductService: selectedProduct,
        leadSource: selectedSource,
        leadStatus: selectedStatus,
        startDate: dateRange[0],
        endDate: dateRange[1],
      };

      const { data: response, error } = await API.postAuthAPI<ReportResponse>(
        payload,
        END_POINT.PRODUCT_SALE_REPORT,
        true
      );

      if (error) throw new Error(error);

      if (response) {
        setReportData(response);
      }
    } catch (error: any) {
      toast.error(error.message || "Failed to fetch report data");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = () => {
    fetchReportData();
  };

  useEffect(() => {
    fetchReportData();
  }, []);

  return (
    <div className="rounded-lg bg-white p-6 shadow-lg dark:bg-gray-800">
      <Heading title="CRM Report" />
      <div className="mb-2 grid grid-cols-2 gap-2 sm:grid-cols-5">
        <div className="col-span-1">
          <SelectGroupOne
            options={serviceList || []}
            setSelectedOption={setSelectedProduct}
            placeholder="Select Product"
            selectedOption={selectedProduct}
            allowClear
          />
        </div>
        <div className="col-span-1">
          <SelectGroupOne
            options={sourceList || []}
            setSelectedOption={setSelectedSource}
            placeholder="Select Source"
            selectedOption={selectedSource}
            allowClear
          />
        </div>
        <div className="col-span-1">
          <SelectGroupOne
            options={statusList || []}
            setSelectedOption={setSelectedStatus}
            placeholder="Select Status"
            selectedOption={selectedStatus}
            allowClear
          />
        </div>
        <div className="col-span-1">
          <SelectGroupOne
            options={agentList || []}
            setSelectedOption={setSelectedAgent}
            placeholder="Select User"
            selectedOption={selectedAgent}
            allowClear
          />
        </div>
        <div className="col-span-2 sm:col-span-1">
          <RangePicker
            value={[dayjs(dateRange[0]), dayjs(dateRange[1])]}
            onChange={handleDateRangeChange}
            className="h-[50px] w-full dark:border-gray-600 dark:bg-gray-700 dark:text-white lg:max-w-none"
          />
        </div>
      </div>
      <div className="mb-2 flex justify-center">
        <ButtonDefault
          label={isLoading ? "Loading..." : "Submit"}
          customClasses="w-full md:w-auto"
          onClick={handleSubmit}
          disabled={isLoading}
        />
      </div>

      <div className="mb-4 grid grid-cols-2 gap-2 sm:grid-cols-4">
        <div className="col-span-1">
          <SummaryCard title="Total" value={reportData?.summary.total || 0} />
        </div>
        <div className="col-span-1">
          <SummaryCard title="Won" value={reportData?.summary.won || 0} />
        </div>
        <div className="col-span-1">
          <SummaryCard
            title="Ratio"
            value={`${reportData?.summary.ratio || 0}%`}
          />
        </div>
        <div className="col-span-1">
          <SummaryCard title="Amount" value={reportData?.summary.amount || 0} />
        </div>
      </div>

      <CustomAntdTable
        columns={columns}
        dataSource={reportData?.leads || []}
        loading={isLoading}
        pagination={{
          total: reportData?.leads?.length || 0,
          showSizeChanger: true,
          showQuickJumper: true,
          showTotal: (total: number, range: any) =>
            `${range[0]}-${range[1]} of ${total} items`,
        }}
        className="dark:bg-gray-700 dark:text-white"
      />

      <style>{`
        .ant-select-selector,
        .ant-input,
        .ant-picker {
          border-radius: 4px !important;
        }
        .dark .ant-select-selector,
        .dark .ant-input,
        .dark .ant-picker,
        .dark .ant-picker-panel-container {
          background-color: #374151 !important;
          border-color: #4b5563 !important;
          color: white !important;
        }
        .dark .ant-select-arrow,
        .dark .ant-picker-suffix,
        .dark .ant-picker-icon {
          color: white !important;
        }
        .dark .ant-picker-header,
        .dark .ant-picker-content th {
          color: white !important;
        }
        .dark .ant-picker-cell {
          color: rgba(255, 255, 255, 0.7) !important;
        }
        .dark .ant-picker-cell-in-view {
          color: white !important;
        }
        .dark .ant-picker-cell:hover .ant-picker-cell-inner {
          background-color: #4b5563 !important;
        }
        .dark .ant-picker-cell-selected .ant-picker-cell-inner {
          background-color: #1890ff !important;
        }
        .dark .ant-picker-footer,
        .dark .ant-picker-today-btn {
          color: white !important;
        }
        .dark .ant-card-bordered {
          border: 1px solid grey;
        }
      `}</style>
    </div>
  );
};

export default ManageReports;


================================================
File: src/Pages/SMS/SMSCompose.tsx
================================================
import { useState, useEffect } from "react";
import TabPanel from "../../components/TabPanel/TabPanel";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";
import MiniLoader from "../../components/CommonUI/Loader/MiniLoader";
import BulkMessage from "../../components/BulkMessage/BulkMessage";
import { LuUserPlus } from "react-icons/lu";
import { GrDocumentUpload } from "react-icons/gr";
import { SlEnergy } from "react-icons/sl";
import Heading from "../../components/CommonUI/Heading";

const SMSCompose = ({ mode = "sms" }: { mode?: "sms" | "whatsapp" }) => {
  const [activeTab, setActiveTab] = useState("1");
  const [isLoading, setIsLoading] = useState(false);
  const [leadsData, setLeadsData] = useState({
    activeLeads: [],
    allLeads: [],
    uploadedContacts: [],
  });

  // Fetch leads based on active tab
  const fetchLeadsData = async (tabKey: string) => {
    try {
      setIsLoading(true);
      let endpoint = "";

      switch (tabKey) {
        case "1":
          endpoint = `${END_POINT.LEADS_DATA}/active`;
          break;
        case "2":
          endpoint = END_POINT.LEADS_DATA;
          break;
        case "3":
          endpoint = `${END_POINT.LEADS_DATA}/contacts`;
          break;
        default:
          endpoint = END_POINT.LEADS_DATA;
      }

      const { data, error } = await API.getAuthAPI(endpoint, true);

      if (error) return;

      // Transform data to match table structure
      const transformedData = data?.map((lead: any) => ({
        key: lead._id,
        name: `${lead.firstName} ${lead.lastName}`,
        number: lead.contactNumber,
        status: lead.leadStatus?.name || "Not Set",
        agent: lead.assignedAgent?.name || "Unassigned",
        followupDate: lead.followUpDate,
      }));

      // Update the appropriate data section
      setLeadsData((prev) => ({
        ...prev,
        [tabKey === "1"
          ? "activeLeads"
          : tabKey === "2"
          ? "allLeads"
          : "uploadedContacts"]: transformedData,
      }));
    } catch (error: any) {
      console.error(error.message || "Failed to fetch leads data");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchLeadsData(activeTab);
  }, [activeTab]);

  const getCurrentData = () => {
    switch (activeTab) {
      case "1":
        return leadsData.activeLeads;
      case "2":
        return leadsData.allLeads;
      case "3":
        return leadsData.uploadedContacts;
      default:
        return [];
    }
  };

  const handleTabChange = (key: string) => {
    setActiveTab(key);
  };

  const tabsData = [
    {
      key: "1",
      tabName: <span className="text-xl">Active Leads</span>,
      component: isLoading ? (
        <MiniLoader />
      ) : (
        <BulkMessage
          data={getCurrentData()}
          mode={mode}
          type="active"
          onRefresh={() => fetchLeadsData(activeTab)}
        />
      ),
      icon: <SlEnergy className="text-2xl" />,
    },
    {
      key: "2",
      tabName: <span className="text-xl">All Leads</span>,
      component: isLoading ? (
        <MiniLoader />
      ) : (
        <BulkMessage
          data={getCurrentData()}
          mode={mode}
          type="all"
          onRefresh={() => fetchLeadsData(activeTab)}
        />
      ),
      icon: <LuUserPlus className="text-2xl" />,
    },
    {
      key: "3",
      tabName: <span className="text-xl">Uploaded Contacts</span>,
      component: isLoading ? (
        <MiniLoader />
      ) : (
        <BulkMessage
          data={getCurrentData()}
          mode={mode}
          type="contacts"
          onRefresh={() => fetchLeadsData(activeTab)}
        />
      ),
      icon: <GrDocumentUpload className="text-xl" />,
    },
  ];

  return (
    <div className="rounded-lg bg-white p-4 shadow-md dark:bg-gray-800">
      <Heading title="Create and Send Bulk SMS" marginBottom="mb-5"/>
      <TabPanel
        tabsData={tabsData}
        defaultActiveKey={"2"}
        size="large"
        centered
        onChangeHandler={handleTabChange}
        type="card"
      />
    </div>
  );
};

export default SMSCompose;


================================================
File: src/Pages/SMS/SMSReport.tsx
================================================
import ComingSoon from "../../components/CommonUI/CommingSoon";

export default function SMSReport() {
  return <ComingSoon />;
}


================================================
File: src/Pages/Settings/Settings.tsx
================================================
"use client";
import GeneralSetting from "./Components/GeneralSetting";
import DepartmentSetting from "./Components/DepartmentSetting";
// import SubscriptionInfo from "./Components/SubscriptionInfo";
import useScreenHook from "../../hooks/useScreenHook";
import CRMFields from "./Components/CRMFields";
import StorageInsights from "./Components/StorageInsight";
import TabPanel from "../../components/TabPanel/TabPanel";
import RolePermissions from "./Components/RolePermission";
import { useParams } from "react-router-dom";
import NotificationSettings from "./Components/NotificationSettings";
import BlurScreenOverlay from "../../components/CommonUI/BlurScreenOverlay";

const Settings: React.FC = () => {
  const { id } = useParams();

  const tabsData = [
    {
      tabName: "Company Details",
      component: <GeneralSetting />,
    },
    { tabName: "Department", component: <DepartmentSetting /> },
    { tabName: "CRM Field", component: <CRMFields /> },
    // { tabName: "Subscription", component: <SubscriptionInfo /> },
    { tabName: "Notification Settings", component: <NotificationSettings /> },
    {
      tabName: "Permission Settings",
      component: (
        // <BlurScreenOverlay
        //   title="Permission Settings Coming Soon!"
        //   message="We're working hard to bring you Permission Settings features."
        //   submessage="Track and manage your permission settings in the next update."
        // >
          <RolePermissions />
        // </BlurScreenOverlay>
      ),
    },
    {
      tabName: "Storage Insights",
      component: (
        <BlurScreenOverlay
          title="Storage Management Coming Soon!"
          message="We're working hard to bring you storage management features."
          submessage="Track and manage your storage usage in the next update."
        >
          <StorageInsights />
        </BlurScreenOverlay>
      ),
    },
  ];

  const { deviceType } = useScreenHook();

  return (
    <div className="rounded-lg bg-white p-3 pt-0 lg:p-6 lg:pl-0 shadow-md dark:bg-gray-800">
      <div className="flex">
        <div className="w-full">
          {deviceType === "desktop" ? (
            <TabPanel
              tabsData={tabsData}
              type="line"
              tabPosition="left"
              defaultActiveKey={id || "1"}
            />
          ) : (
            <TabPanel
              tabsData={tabsData}
              type="line"
              tabPosition="top"
              defaultActiveKey={id || "1"}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default Settings;


================================================
File: src/Pages/Settings/Components/CRMFields.tsx
================================================
import LeadSourceFieldsCRM from "./LeadSourceFieldsCRM";
import StatusFieldsCRM from "./StatusFieldsCRM";
import LostReasonFieldsCRM from "./LostReasonFieldsCRM";

export default function CRMFields() {
  return (
    <div className="flex flex-col gap-5">
      <LeadSourceFieldsCRM />
      <StatusFieldsCRM />
      <LostReasonFieldsCRM />
    </div>
  );
}


================================================
File: src/Pages/Settings/Components/DepartmentSetting.tsx
================================================
import React, { useState, useEffect } from "react";
import { Button } from "antd";
import { EditOutlined, PlusOutlined } from "@ant-design/icons";
import { toast } from "react-toastify";
import CustomAntdTable from "../../../components/Tables/CustomAntdTable";
import ButtonDefault from "../../../components/Buttons/ButtonDefault";
import SelectGroupOne from "../../../components/FormElements/SelectGroup/SelectGroupOne";
import InputGroup from "../../../components/FormElements/InputGroup";
import { API } from "../../../api";
import { END_POINT } from "../../../api/UrlProvider";
import SwitcherTwo from "../../../components/FormElements/Switchers/SwitcherTwo";
import TextAreaCustom from "../../../components/FormElements/TextArea/TextAreaCustom";

interface User {
  key: string;
  sNo: number;
  userName: string;
  email: string;
  mobile: string;
  roll: string;
  assignTeamLeader: string;
  isActive: boolean;
  assignedTL?: string;
}

interface FormData {
  userName: string;
  email: string;
  mobile: string;
  password: string;
  isActive: string;
  userType: string;
  assignedTL: string;
}

export default function DepartmentSetting() {
  const [isLoading, setIsLoading] = useState(false);
  const [tableData, setTableData] = useState<User[]>([]);
  const [showForm, setShowForm] = useState(false);
  const [editingUser, setEditingUser] = useState<string | null>(null);
  const [teamLeads, setTeamLeads] = useState<
    { value: string; label: string }[]
  >([]);

  const initialFormState: FormData = {
    userName: "",
    email: "",
    mobile: "",
    password: "",
    isActive: "active",
    userType: "",
    assignedTL: "",
  };

  const [formData, setFormData] = useState<FormData>(initialFormState);

  const fetchUsers = async () => {
    try {
      const { data, error } = await API.getAuthAPI(END_POINT.USERS, true);
      if (error) throw new Error(error);

      const transformedData = data.map((user: any, index: number) => ({
        key: user._id,
        sNo: index + 1,
        userName: user.name,
        email: user.email,
        mobile: user.phone,
        roll: user.role,
        assignTeamLeader: user.assignedTL || "",
        isActive: user.isActive,
        assignedTL: user.assignedTL,
      }));

      setTableData(transformedData);

      // Set team leads
      const teamLeadsList = data
        .filter((user: any) => user.role === "Team Leader" && user.isActive)
        .map((lead: any) => ({
          value: lead._id,
          label: lead.name,
        }));
      setTeamLeads(teamLeadsList);
    } catch (error: any) {
      console.error(error.message || "Failed to fetch users");
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const validateForm = () => {
    if (!formData.userName.trim()) {
      toast.error("Please enter user name");
      return false;
    }
    if (!formData.email.trim()) {
      toast.error("Please enter email");
      return false;
    }
    if (!formData.mobile.trim()) {
      toast.error("Please enter mobile number");
      return false;
    }
    if (!editingUser && !formData.password.trim()) {
      toast.error("Please enter password");
      return false;
    }
    return true;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleEdit = (key: string) => {
    const user = tableData.find((user) => user.key === key);
    if (user) {
      setFormData({
        userName: user.userName,
        email: user.email,
        mobile: user.mobile,
        password: "", // Empty for edit mode
        isActive: user.isActive ? "active" : "inactive",
        userType: user.roll,
        assignedTL: user.assignedTL || "",
      });
      setEditingUser(key);
      setShowForm(true);
    }
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    try {
      setIsLoading(true);

      const basePayload = {
        name: formData.userName,
        email: formData.email,
        phone: formData.mobile,
        isActive: formData.isActive === "active",
        assignedTL:
          formData.userType === "Employee" ? formData.assignedTL || null : null,
      };

      if (editingUser) {
        // Update existing user
        const updatePayload = {
          ...basePayload,
          ...(formData.password && { password: formData.password }),
        };

        const { error } = await API.updateAuthAPI(
          updatePayload,
          editingUser,
          "updateDepartment",
          true
        );

        if (error) throw new Error(error);
        toast.success("User updated successfully");
      } else {
        // Create new user
        const createPayload = {
          ...basePayload,
          password: formData.password,
          role: formData.userType,
        };

        const { error } = await API.postAuthAPI(
          createPayload,
          END_POINT.USER_REGISTER,
          true
        );

        if (error) throw new Error(error);
        toast.success("User created successfully");
      }

      setFormData(initialFormState);
      setEditingUser(null);
      setShowForm(false);
      fetchUsers();
    } catch (error: any) {
      console.error(error.message || "Operation failed");
    } finally {
      setIsLoading(false);
    }
  };

  const handleStatusChange = async (id: string, status: boolean) => {
    try {
      const { error } = await API.updateAuthAPI(
        { isActive: status },
        id,
        "updateDepartment",
        true
      );

      if (error) throw new Error(error);

      toast.success(
        `User ${status ? "activated" : "deactivated"} successfully`
      );
      fetchUsers();
    } catch (error: any) {
      console.error(error.message || "Failed to update status");
    }
  };

  const columns = [
    {
      title: "S.No.",
      dataIndex: "sNo",
      key: "sNo",
      width: 80,
    },
    {
      title: "User Name",
      dataIndex: "userName",
      key: "userName",
    },
    {
      title: "Email",
      dataIndex: "email",
      key: "email",
    },
    {
      title: "Mobile",
      dataIndex: "mobile",
      key: "mobile",
    },
    {
      title: "Role",
      dataIndex: "roll",
      key: "roll",
    },
    {
      title: "Team Leader",
      dataIndex: "assignTeamLeader",
      key: "assignTeamLeader",
      render: (_: any, record: User) => {
        const lead = teamLeads.find((l) => l.value === record.assignedTL);
        return lead?.label || "-";
      },
    },
    {
      title: "Action",
      key: "action",
      render: (_: any, record: User) => (
        <div className="flex items-center gap-2">
          <SwitcherTwo
            id={record.key}
            defaultChecked={record.isActive}
            onChange={(id: string, checked: boolean) =>
              handleStatusChange(id, checked)
            }
          />
          <Button
            icon={<EditOutlined />}
            className="bg-primary text-white"
            onClick={() => handleEdit(record.key)}
          />
        </div>
      ),
    },
  ];

  return (
    <div className="w-full">
      <div className="mb-4 flex justify-between items-center">
        <h2 className="text-xl font-semibold">Department Management</h2>
        {!showForm && (
          <ButtonDefault
            label="Add New User"
            onClick={() => {
              setShowForm(true);
              setFormData(initialFormState);
              setEditingUser(null);
            }}
            icon={<PlusOutlined />}
          />
        )}
      </div>

      {showForm && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
            <InputGroup
              label="User Name"
              name="userName"
              type="text"
              placeholder="Enter user name"
              value={formData.userName}
              onChange={handleInputChange}
              required
            />

            <InputGroup
              label="Email"
              name="email"
              type="email"
              placeholder="Enter email"
              value={formData.email}
              onChange={handleInputChange}
              required
            />

            <InputGroup
              label="Mobile"
              name="mobile"
              type="tel"
              placeholder="Enter mobile number"
              value={formData.mobile}
              onChange={handleInputChange}
              required
            />

            <InputGroup
              label="Password"
              name="password"
              type="password"
              placeholder={
                editingUser ? "Leave blank to keep unchanged" : "Enter password"
              }
              value={formData.password}
              onChange={handleInputChange}
              required={!editingUser}
            />

            <SelectGroupOne
              label="Status"
              options={[
                { value: "active", label: "Active" },
                { value: "inactive", label: "Inactive" },
              ]}
              selectedOption={formData.isActive}
              setSelectedOption={(value) =>
                handleSelectChange("isActive", value)
              }
            />

            {!editingUser && (
              <SelectGroupOne
                label="Role"
                options={[
                  { value: "Team Leader", label: "Team Leader" },
                  { value: "Employee", label: "Employee" },
                ]}
                selectedOption={formData.userType}
                setSelectedOption={(value) =>
                  handleSelectChange("userType", value)
                }
                required
              />
            )}

            {formData.userType === "Employee" && (
              <SelectGroupOne
                label="Assign Team Leader"
                options={teamLeads}
                selectedOption={formData.assignedTL}
                setSelectedOption={(value) =>
                  handleSelectChange("assignedTL", value)
                }
                placeholder="Select Team Leader"
              />
            )}
          </div>

          <div className="flex gap-3">
            <ButtonDefault
              label={
                isLoading ? "Processing..." : editingUser ? "Update" : "Add"
              }
              onClick={handleSubmit}
              disabled={isLoading}
            />
            <ButtonDefault
              label="Cancel"
              onClick={() => {
                setShowForm(false);
                setFormData(initialFormState);
                setEditingUser(null);
              }}
              variant="outline"
            />
          </div>
        </div>
      )}

      <CustomAntdTable
        columns={columns}
        dataSource={tableData}
        pagination={{
          pageSize: 10,
          showSizeChanger: true,
        }}
      />
    </div>
  );
}


================================================
File: src/Pages/Settings/Components/GeneralSetting.tsx
================================================
import CompanyInfoCard from "./Cards/CompanyInfo";
import ContactInfoCard from "./Cards/ContactInfo";
import SystemSettingsCard from "./Cards/SystemSettings";
import SubscriptionCard from "./Cards/SubscriptionInfo";
import Heading from "../../../components/CommonUI/Heading";

const GeneralSetting = () => {
  return (
    <div className="max-w-6xl mx-auto space-y-6">
      <Heading title="Company Settings" alignCenter />

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <CompanyInfoCard />
        <ContactInfoCard />
        <SystemSettingsCard />
        <SubscriptionCard />
      </div>
    </div>
  );
};

export default GeneralSetting;


================================================
File: src/Pages/Settings/Components/LeadSourceFieldsCRM.tsx
================================================
import { useState, useEffect } from "react";
import DynamicDataManagement from "../../../components/DynamicDataManagement/DynamicDataManagement";
import { API } from "../../../api";
import { END_POINT } from "../../../api/UrlProvider";
import { toast } from "react-toastify";
import SwitcherTwo from "../../../components/FormElements/Switchers/SwitcherTwo";
import { Tooltip } from "antd";

interface LeadSource {
  key: string;
  leadSourceName: string;
  isActive?: boolean;
  deleted?: boolean;
  isApiRequired?: boolean;
}

const fields = [
  {
    name: "leadSourceName",
    label: "Lead source name",
    type: "text",
  },
];

export default function LeadSourceFieldsCRM() {
  const [data, setData] = useState<LeadSource[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const fetchLeadSources = async () => {
    try {
      setIsLoading(true);
      const { data: response, error } = await API.getAuthAPI(
        END_POINT.LEAD_SOURCES,
        true
      );

      if (error) return;

      if (response) {
        // Transform API response to match component's data structure
        const transformedData: LeadSource[] = response.map((item: any) => ({
          key: item._id,
          leadSourceName: item.name,
          isActive: item.isActive,
          deleted: item.deleted,
          isApiRequired: item.isApiRequired,
        }));
        setData(transformedData);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to fetch lead sources");
    } finally {
      setIsLoading(false);
    }
  };

  const columns = [
    {
      title: "S.No",
      dataIndex: "index",
      key: "index",
      render: (_text: any, _record: any, index: number) => index + 1,
    },
    {
      title: "Lead source name",
      dataIndex: "leadSourceName",
      key: "leadSourceName",
    },
    {
      title: "API Integeration",
      dataIndex: "isApiRequired",
      key: "isApiRequired",
      render: (value: any, record: any) => {

        return (
          <Tooltip title="Do you want to use this entry for API integeration ? If yes you can enable the toggle.">
            <div className="flex justify-center">
              <SwitcherTwo
                id={`apiInit-${record.key}`}
                idForAPI={record.key}
                defaultChecked={value}
                onChange={(key: string, value: boolean) =>
                  handlePermissionChange(key, value, record.leadSourceName)
                }
              />
            </div>
          </Tooltip>
        );
      },
    },
  ];

  const handlePermissionChange = async (
    key: string,
    currentStatus: boolean,
    name: string
  ) => {
    try {
      const payload = {
        isApiRequired: currentStatus,
        name: name,
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LEAD_SOURCES,
        true
      );

      if (error) return;
      fetchLeadSources();
    } catch (error: any) {
      console.error(error.message || "Failed to update dashboard visibility");
    }
  };

  useEffect(() => {
    fetchLeadSources();
  }, []);

  const handleAdd = async (newItem: any) => {
    try {
      setIsLoading(true);
      const payload = {
        name: newItem.leadSourceName,
      };

      const { error } = await API.postAuthAPI(
        payload,
        END_POINT.LEAD_SOURCES,
        true
      );

      if (error) return;

      toast.success("Lead source added successfully!");
      fetchLeadSources(); // Refresh the list
    } catch (error: any) {
      console.error(error.message || "Failed to add lead source");
    } finally {
      setIsLoading(false);
    }
  };

  const handleEdit = async (key: string, updatedItem: any) => {
    try {
      setIsLoading(true);
      const payload = {
        name: updatedItem.leadSourceName,
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LEAD_SOURCES,
        true
      );

      if (error) return;

      toast.success("Lead source updated successfully!");
      fetchLeadSources(); // Refresh the list
    } catch (error: any) {
      console.error(error.message || "Failed to update lead source");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async (key: string) => {
    try {
      setIsLoading(true);
      const { error } = await API.DeleteAuthAPI(
        key,
        END_POINT.LEAD_SOURCES,
        true
      );

      if (error) return;

      toast.success("Lead source deleted successfully!");
      fetchLeadSources(); // Refresh the list
    } catch (error: any) {
      console.error(error.message || "Failed to delete lead source");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSoftDelete = async (key: string, currentStatus: boolean) => {
    try {
      setIsLoading(true);
      const { error } = await API.DeleteAuthAPI(
        key,
        END_POINT.LEAD_SOURCES,
        true
      );

      if (error) return;

      toast.success("Status field deleted successfully!");
      fetchLeadSources();
    } catch (error: any) {
      console.error(error.message || "Failed to delete status field");
    } finally {
      setIsLoading(false);
    }
  };

  const handleUpdate = async (key: string, status: boolean) => {
    try {
      setIsLoading(true);
      const payload = {
        isActive: !status,
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LEAD_SOURCES,
        true
      );

      if (error) return;

      fetchLeadSources(); // Refresh the list
    } catch (error: any) {
      console.error(error.message || "Failed to update status");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <DynamicDataManagement
      title="Lead source name"
      fields={fields}
      columns={columns}
      data={data}
      onAdd={handleAdd}
      onEdit={handleEdit}
      onDelete={handleDelete}
      onSoftDelete={handleSoftDelete}
      onUpdate={handleUpdate}
      isLoading={isLoading}
    />
  );
}


================================================
File: src/Pages/Settings/Components/LostReasonFieldsCRM.tsx
================================================
import { useState, useEffect } from "react";
import DynamicDataManagement from "../../../components/DynamicDataManagement/DynamicDataManagement";
import { API } from "../../../api";
import { END_POINT } from "../../../api/UrlProvider";
import { toast } from "react-toastify";

interface LostReason {
  key: string;
  reason: string;
  isActive?: boolean;
  order?: number;
}

export default function LostReasonFieldsCRM() {
  const [data, setData] = useState<LostReason[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const fields = [
    {
      name: "reason",
      label: "Lost reason name",
      type: "text",
    },
  ];

  const columns = [
    {
      title: "S.No",
      dataIndex: "index",
      key: "index",
      render: (_text: any, _record: any, index: number) => index + 1,
    },
    {
      title: "Lost reasons",
      dataIndex: "reason",
      key: "reason",
    },
  ];

  const fetchLostReasons = async () => {
    try {
      setIsLoading(true);
      const { data: response, error } = await API.getAuthAPI(
        END_POINT.LOST_REASON,
        true
      );

      if (error) return;

      if (response) {
        const transformedData: LostReason[] = response.map((item: any) => ({
          key: item._id,
          reason: item.reason,
          isActive: item.isActive,
          order: item.order,
        }));
        setData(transformedData);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to fetch lost reasons");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchLostReasons();
  }, []);

  const handleAdd = async (newItem: any) => {
    try {
      setIsLoading(true);
      const payload = {
        reason: newItem.reason,
      };

      const { error } = await API.postAuthAPI(payload, END_POINT.LOST_REASON, true);

      if (error) return;

      toast.success("Lost reason added successfully!");
      fetchLostReasons();
    } catch (error: any) {
      console.error(error.message || "Failed to add lost reason");
    } finally {
      setIsLoading(false);
    }
  };

  const handleEdit = async (key: string, updatedItem: any) => {
    try {
      setIsLoading(true);
      const payload = {
        reason: updatedItem.reason,
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LOST_REASON,
        true
      );

      if (error) return;

      toast.success("Lost reason updated successfully!");
      fetchLostReasons();
    } catch (error: any) {
      console.error(error.message || "Failed to update lost reason");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async (key: string) => {
    try {
      setIsLoading(true);
      const { error } = await API.DeleteAuthAPI(key, END_POINT.LOST_REASON, true);

      if (error) return;

      toast.success("Lost reason deleted successfully!");
      fetchLostReasons();
    } catch (error: any) {
      console.error(error.message || "Failed to delete lost reason");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSoftDelete = async (key: string, currentStatus: boolean) => {
    try {
      setIsLoading(true);
      const { error } = await API.DeleteAuthAPI(
        key,
        END_POINT.LOST_REASON,
        true
      );

      if (error) return;

      toast.success("Status field deleted successfully!");
      fetchLostReasons();
    } catch (error: any) {
      console.error(error.message || "Failed to delete status field");
    } finally {
      setIsLoading(false);
    }
  };

  const handleUpdate = async (key: string, status: boolean) => {
    try {
      setIsLoading(true);
      const payload = {
        isActive: !status,
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LOST_REASON,
        true
      );

      if (error) return;
      fetchLostReasons();
    } catch (error: any) {
      console.error(error.message || "Failed to update status");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <DynamicDataManagement
      title="Lost Reasons List"
      fields={fields}
      columns={columns}
      data={data}
      onAdd={handleAdd}
      onEdit={handleEdit}
      onDelete={handleDelete}
      onSoftDelete={handleSoftDelete}
      onUpdate={handleUpdate}
      isLoading={isLoading}
    />
  );
}


================================================
File: src/Pages/Settings/Components/NotificationSettings.tsx
================================================
import React, { useState, useEffect } from "react";
import dayjs from "dayjs";
import { API } from "../../../api";
import Heading from "../../../components/CommonUI/Heading";
import { Select, TimePicker } from "antd";
import SwitcherTwo from "../../../components/FormElements/Switchers/SwitcherTwo";
import MiniLoader from "../../../components/CommonUI/Loader/MiniLoader";
import { toast } from "react-toastify";

interface NotificationTime {
  time: string;
  isEnabled: boolean;
  _id: string;
}

interface NotificationSettings {
  _id: string;
  statusId: {
    _id: string;
    name: string;
  };
  isEnabled: boolean;
  useFollowUpTime: boolean;
  time: number;
  notificationCustomTime: NotificationTime[];
  recipients: {
    admin: boolean;
    teamLead: boolean;
    regularUser: boolean;
  };
  titleTemplate: string;
  bodyTemplate: string;
}

const timeInterval = [
  { label: "2 minute", value: 2 },
  { label: "5 minute", value: 5 },
  // { label: "15 minute", value: 15 },
  // { label: "30 minute", value: 30 },
  // { label: "1 hour", value: 60 },
  // { label: "2 hour", value: 120 },
  // { label: "4 hour", value: 240 },
];

const NotificationTemplate: React.FC<{
  settings: NotificationSettings;
  onUpdate: (id: string, updatedData: Partial<NotificationSettings>) => void;
}> = ({ settings, onUpdate }) => {
  const [localTitleTemplate, setLocalTitleTemplate] = useState(settings.titleTemplate);
  const [localBodyTemplate, setLocalBodyTemplate] = useState(settings.bodyTemplate);

  const handleMainToggle = (id: string, checked: boolean): void => {
    onUpdate(settings._id, { isEnabled: checked });
  };

  const handleTitleBlur = () => {
    if (localTitleTemplate !== settings.titleTemplate) {
      onUpdate(settings._id, { titleTemplate: localTitleTemplate });
    }
  };

  const handleBodyBlur = () => {
    if (localBodyTemplate !== settings.bodyTemplate) {
      onUpdate(settings._id, { bodyTemplate: localBodyTemplate });
    }
  };

  const handleRecipientToggle = (recipientType: "admin" | "teamLead" | "regularUser") => 
    (id: string, checked: boolean): void => {
      onUpdate(settings._id, {
        recipients: {
          ...settings.recipients,
          [recipientType]: checked,
        },
      });
    };

  return (
    <div className="mb-8 rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
      <div className="mb-4 flex items-center justify-between">
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
          {settings.statusId?.name} Notifications
        </h2>
        <SwitcherTwo
          id={`${settings.statusId?.name?.toLowerCase()}-notifications`}
          defaultChecked={settings.isEnabled}
          onChange={handleMainToggle}
        />
      </div>
      <p className="mb-1 text-gray-600 dark:text-gray-300">
        Reminder settings for upcoming {settings.statusId?.name?.toLowerCase()}s
        and updates
      </p>

      {settings.isEnabled && (
        <>
          {/* Notification Content Section */}
          <div className="mb-6">
            <h3 className="mb-4 flex items-center gap-2 text-lg font-medium text-gray-900 dark:text-white">
              <span className="text-blue-500">📝</span> Notification Content
            </h3>
            <div className="space-y-4">
              <div>
                <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Title Template
                </label>
                <input
                  type="text"
                  value={localTitleTemplate}
                  onChange={(e) => setLocalTitleTemplate(e.target.value)}
                  onBlur={handleTitleBlur}
                  className="w-full rounded-md border border-gray-300 p-2 text-sm dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                />
              </div>
              <div>
                <label className="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Body Template
                </label>
                <textarea
                  value={localBodyTemplate}
                  onChange={(e) => setLocalBodyTemplate(e.target.value)}
                  onBlur={handleBodyBlur}
                  rows={3}
                  className="w-full rounded-md border border-gray-300 p-2 text-sm dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                />
              </div>
            </div>
          </div>

          {/* Notification Times Section */}
          <div className="mb-6">
            <h3 className="mb-4 flex items-center gap-2 text-lg font-medium text-gray-900 dark:text-white">
              <span className="text-blue-500">⏰</span> Notification Times
            </h3>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <span className="text-gray-600 dark:text-gray-300">
                    *{" "}
                    <Select
                      value={settings.time}
                      style={{ width: "auto" }}
                      onChange={(value) => onUpdate(settings._id, { time: value })}
                      options={timeInterval}
                    />{" "}
                    Before Follow-Up Date and Time.
                  </span>
                </div>
                <SwitcherTwo
                  id={`${settings.statusId?.name?.toLowerCase()}-followup-time`}
                  defaultChecked={settings.useFollowUpTime}
                  onChange={(id: any, checked: boolean) =>
                    onUpdate(settings._id, { useFollowUpTime: checked })
                  }
                />
                {/* {settings.notificationCustomTime.map((customTime, index) => (
                <div key={customTime._id} className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className="text-gray-600 dark:text-gray-300">
                      * Custom Time:{" "}
                      <TimePicker
                        value={dayjs(customTime.time, 'HH:mm')}
                        format={'HH:mm'}
                        size="small"
                        style={{ width: "auto" }}
                        onChange={(time) => {
                          const newTimes = [...settings.notificationCustomTime];
                          newTimes[index].time = time?.format('HH:mm') || '00:00';
                          onUpdate(settings._id, { notificationCustomTime: newTimes });
                        }}
                      />
                    </span>
                  </div>
                  <SwitcherTwo
                    id={`${settings.statusId?.name?.toLowerCase()}-custom-time-${index}`}
                    defaultChecked={customTime.isEnabled}
                    onChange={handleCustomTimeToggle(index)}
                  />
                </div>
              ))} */}
              </div>
            </div>
          </div>

          {/* Recipients Section */}
          <div>
            <h3 className="mb-4 flex items-center gap-2 text-lg font-medium text-gray-900 dark:text-white">
              <span className="text-blue-500">👥</span> Recipients
            </h3>
            <div className="space-y-4">
              {/* <div className="flex items-center justify-between">
                <span className="text-gray-600 dark:text-gray-300">Admin</span>
                <SwitcherTwo
                  id={`${settings.statusId?.name?.toLowerCase()}-admin`}
                  defaultChecked={settings.recipients?.admin}
                  onChange={handleRecipientToggle('admin')}
                />
              </div>
              <div className="flex items-center justify-between">
                <span className="text-gray-600 dark:text-gray-300">Team Lead</span>
                <SwitcherTwo
                  id={`${settings.statusId?.name?.toLowerCase()}-teamlead`}
                  defaultChecked={settings.recipients?.teamLead}
                  onChange={handleRecipientToggle('teamLead')}
                />
              </div> */}
              <div className="flex items-center justify-between">
                <span className="text-gray-600 dark:text-gray-300">
                  Assigned Employee
                </span>
                <SwitcherTwo
                  id={`${settings.statusId?.name?.toLowerCase()}-regularuser`}
                  defaultChecked={settings.recipients?.regularUser}
                  onChange={handleRecipientToggle("regularUser")}
                />
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

const StatusNotificationSettings: React.FC = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings[]>([]);

  useEffect(() => {
    const fetchNotificationSettings = async () => {
      try {
        setIsLoading(true);
        const response = await API.getAuthAPI("getNotificationList", true);
        if (response.error) throw new Error(response.error);

        setNotificationSettings(response.data || []);
      } catch (error: any) {
        toast.error(error.message || "Failed to fetch notification settings");
      } finally {
        setIsLoading(false);
      }
    };

    fetchNotificationSettings();
  }, []);

  const handleUpdateSettings = async (
    id: string,
    updatedData: Partial<NotificationSettings>
  ) => {
    try {
      // First update local state for optimistic update
      setNotificationSettings((prev) =>
        prev.map((setting) =>
          setting._id === id ? { ...setting, ...updatedData } : setting
        )
      );

      // Prepare the payload
      const payload = {
        isEnabled: updatedData.isEnabled !== undefined 
          ? updatedData.isEnabled 
          : notificationSettings.find((s) => s._id === id)?.isEnabled,
        useFollowUpTime: updatedData.useFollowUpTime !== undefined 
          ? updatedData.useFollowUpTime 
          : notificationSettings.find((s) => s._id === id)?.useFollowUpTime,
        time: updatedData.time !== undefined 
          ? updatedData.time 
          : notificationSettings.find((s) => s._id === id)?.time,
        notificationCustomTime: updatedData.notificationCustomTime !== undefined 
          ? updatedData.notificationCustomTime?.map(({ time, isEnabled }) => ({ time, isEnabled }))
          : notificationSettings.find((s) => s._id === id)?.notificationCustomTime
              .map(({ time, isEnabled }) => ({ time, isEnabled })),
        recipients: updatedData.recipients !== undefined 
          ? updatedData.recipients 
          : notificationSettings.find((s) => s._id === id)?.recipients,
        titleTemplate: updatedData.titleTemplate !== undefined 
          ? updatedData.titleTemplate 
          : notificationSettings.find((s) => s._id === id)?.titleTemplate,
        bodyTemplate: updatedData.bodyTemplate !== undefined 
          ? updatedData.bodyTemplate 
          : notificationSettings.find((s) => s._id === id)?.bodyTemplate,
      };

      // Make API call
      const response = await API.updateAuthAPI(payload, id, "updateNotification", true);

      if (response.error) throw new Error(response.error);

      // Update local state with server response if needed
      const updatedSetting = response.data;
      setNotificationSettings((prev) =>
        prev.map((setting) =>
          setting._id === id ? { ...setting, ...updatedSetting } : setting
        )
      );

      toast.success("Settings updated successfully.");
    } catch (error: any) {
      // Revert optimistic update on error
      const response = await API.getAuthAPI("getNotificationList", true);
      if (!response.error) {
        setNotificationSettings(response.data || []);
      }
      console.error(error.message || "Failed to update notification settings");
    }
  };

  if (isLoading) {
    return <MiniLoader />;
  }

  return (
    <div className="space-y-6">
      <Heading title="Manage Your Reminders" />
      {notificationSettings.map((settings) => (
        <NotificationTemplate
          key={settings._id}
          settings={settings}
          onUpdate={handleUpdateSettings}
        />
      ))}
    </div>
  );
};

export default StatusNotificationSettings;

================================================
File: src/Pages/Settings/Components/RolePermission.tsx
================================================
import React, { useState } from "react";
import { Modal, Table } from "antd";
import { BiPlus } from "react-icons/bi";
import { toast } from "react-toastify";
import ButtonDefault from "../../../components/Buttons/ButtonDefault";
import TextAreaCustom from "../../../components/FormElements/TextArea/TextAreaCustom";
import InputGroup from "../../../components/FormElements/InputGroup";
import SwitcherTwo from "../../../components/FormElements/Switchers/SwitcherTwo";
import SelectGroupOne from "../../../components/FormElements/SelectGroup/SelectGroupOne";
import { menuGroups } from "../../../components/Sidebar";
import Heading from "../../../components/CommonUI/Heading";

interface Permission {
  id: string;
  featureName: string;
  add: boolean;
  edit: boolean;
  delete: boolean;
  view: boolean;
  group: string;
  children?: Permission[];
  key?: string;
}

interface MenuItem {
  icon: React.ReactElement;
  label: string;
  route: string;
  children?: MenuItem[];
}

interface ChildItem {
  key: string;
  label: string;
  // Add other properties as needed
}

const roleOptions = [
  { value: "super-admin", label: "Super Admin" },
  { value: "Team-Admin", label: "Team Admin" },
  { value: "User", label: "User" },
];

const RolePermissions = () => {
  const [selectedRole, setSelectedRole] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [formData, setFormData] = useState({
    featureName: "",
    description: "",
    purpose: "",
    expectedBehavior: "",
  });

  // Transform menuGroups into permissions array with children
  const initialPermissions: Permission[] = menuGroups.flatMap((group) =>
    group.menuItems.map((item: any, index) => ({
      key: `${group.name}-${index}`,
      id: `${group.name}-${index}`,
      featureName: item.label,
      group: group.name,
      add: false,
      edit: false,
      delete: false,
      view: false,
      children: item?.children?.map((child: MenuItem, childIndex: number) => ({
        key: `${group.name}-${index}-${childIndex}`,
        id: `${group.name}-${index}-${childIndex}`,
        featureName: child.label,
        group: group.name,
        add: false,
        edit: false,
        delete: false,
        view: false,
      })),
    }))
  );

  const [permissions, setPermissions] =
    useState<Permission[]>(initialPermissions);

  const handlePermissionChange = (
    id: string,
    type: keyof Permission,
    value: boolean
  ) => {
    const updatePermissionRecursively = (perms: Permission[]): Permission[] => {
      return perms.map((permission) => {
        if (permission.id === id) {
          return { ...permission, [type]: value };
        }
        if (permission.children) {
          return {
            ...permission,
            children: updatePermissionRecursively(permission.children),
          };
        }
        return permission;
      });
    };

    setPermissions(updatePermissionRecursively(permissions));
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmitFeatureRequest = () => {
    console.log("Feature request:", formData);
    toast.success("Feature request submitted successfully!");
    setIsModalOpen(false);
    setFormData({
      featureName: "",
      description: "",
      purpose: "",
      expectedBehavior: "",
    });
  };

  const columns = [
    // {
    //   title: "Group",
    //   dataIndex: "group",
    //   key: "group",
    //   className: "w-40",
    // },
    {
      title: "Feature Name",
      dataIndex: "featureName",
      key: "featureName",
    },
    {
      title: "Add",
      key: "add",
      align: "center" as const,
      render: (_: any, record: Permission) => (
        <div className="flex justify-center">
          <SwitcherTwo
            id={`add-${record.id}`}
            defaultChecked={record.add}
            onChange={() =>
              handlePermissionChange(record.id, "add", !record.add)
            }
          />
        </div>
      ),
    },
    {
      title: "Edit",
      key: "edit",
      align: "center" as const,
      render: (_: any, record: Permission) => (
        <div className="flex justify-center">
          <SwitcherTwo
            id={`edit-${record.id}`}
            defaultChecked={record.edit}
            onChange={() =>
              handlePermissionChange(record.id, "edit", !record.edit)
            }
          />
        </div>
      ),
    },
    {
      title: "Delete",
      key: "delete",
      align: "center" as const,
      render: (_: any, record: Permission) => (
        <div className="flex justify-center">
          <SwitcherTwo
            id={`delete-${record.id}`}
            defaultChecked={record.delete}
            onChange={() =>
              handlePermissionChange(record.id, "delete", !record.delete)
            }
          />
        </div>
      ),
    },
    {
      title: "View",
      key: "view",
      align: "center" as const,
      render: (_: any, record: Permission) => (
        <div className="flex justify-center">
          <SwitcherTwo
            id={`view-${record.id}`}
            defaultChecked={record.view}
            onChange={() =>
              handlePermissionChange(record.id, "view", !record.view)
            }
          />
        </div>
      ),
    },
  ];

  return (
    <div className="w-full rounded-lg bg-white dark:bg-gray-800">
      <Heading title="Manage Permission" />
      {/* Role Selection */}
      <div className="mb-6">
        <SelectGroupOne
          label="Select Role"
          options={roleOptions}
          selectedOption={selectedRole}
          setSelectedOption={setSelectedRole}
          placeholder="Choose role"
          wrapperClasses="max-w-md"
        />
      </div>

      {/* Permissions Table */}
      <Table
        columns={columns}
        dataSource={permissions}
        rowKey="id"
        expandable={{
          expandedRowClassName: () => "bg-gray-50 dark:bg-gray-900",
          rowExpandable: (record) =>
            record.children ? record.children.length > 0 : false,
        }}
        className="border border-gray-200 dark:border-gray-700"
        pagination={false}
      />

      {/* Add Feature Button */}
      <div className="mt-4">
        <button
          type="button"
          onClick={() => setIsModalOpen(true)}
          className="inline-flex items-center rounded-lg border border-gray-200 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600"
        >
          <BiPlus className="-ml-1 mr-2 h-5 w-5" />
          Request New Feature
        </button>
      </div>

      {/* Feature Request Modal */}
      <Modal
        title="Request New Feature"
        open={isModalOpen}
        onCancel={() => setIsModalOpen(false)}
        footer={null}
        width={800}
        className="dark:bg-gray-800"
      >
        <div className="space-y-6 pt-4">
          <InputGroup
            label="Feature Name"
            name="featureName"
            type="text"
            placeholder="Enter the name of the feature"
            value={formData.featureName}
            onChange={handleInputChange}
            required
          />

          <TextAreaCustom
            label="Description"
            name="description"
            placeholder="Describe the feature in detail"
            value={formData.description}
            onChange={handleInputChange}
            rows={3}
          />

          <TextAreaCustom
            label="Business Purpose"
            name="purpose"
            placeholder="What business problem does this feature solve?"
            value={formData.purpose}
            onChange={handleInputChange}
            rows={3}
          />

          <TextAreaCustom
            label="Expected Behavior"
            name="expectedBehavior"
            placeholder="How should this feature work?"
            value={formData.expectedBehavior}
            onChange={handleInputChange}
            rows={3}
          />

          <div className="flex justify-end space-x-4 pt-4">
            <ButtonDefault
              label="Cancel"
              onClick={() => setIsModalOpen(false)}
              variant="outline"
            />
            <ButtonDefault
              label="Submit Request"
              onClick={handleSubmitFeatureRequest}
              variant="primary"
            />
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default RolePermissions;


================================================
File: src/Pages/Settings/Components/StatusFieldsCRM.tsx
================================================
import { useState, useEffect, Children } from "react";
import { Checkbox, ColorPicker, Modal, Tooltip } from "antd";
import SwitcherTwo from "../../../components/FormElements/Switchers/SwitcherTwo";
import DynamicDataManagement from "../../../components/DynamicDataManagement/DynamicDataManagement";
import { API } from "../../../api";
import { END_POINT } from "../../../api/UrlProvider";
import { toast } from "react-toastify";
import { Link } from "react-router-dom";

interface StatusField {
  key: string;
  status: string;
  display: string;
  onDashboard: boolean;
  color?: string;
  showDashboard?: boolean;
  showFollowUp?: boolean;
  showImported?: boolean;
  showOutSourced?: boolean;
  isActive?: boolean;
  sendNotification?: boolean;
  lossStatus?: false;
  wonStatus?: true;
}

const fields = [
  {
    name: "status",
    label: "Status",
    type: "text",
  },
  {
    name: "color",
    label: "Associated Color",
    type: "color",
  },
];

export default function StatusFieldsCRM() {
  const [data, setData] = useState<StatusField[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showWarningModal, setShowWarningModal] = useState(false);
  const [currentAction, setCurrentAction] = useState<{
    key: string;
    type: "won" | "lost";
    checked: boolean;
  } | null>(null);

  const handleCheckboxChange = async (
    key: string,
    type: "won" | "lost",
    checked: boolean
  ) => {
    // Get the current row
    const currentRow = data.find((item) => item.key === key);
    if (!currentRow) return;

    // If trying to uncheck the only checked item of this type across all rows
    const totalCheckedOfType = data.filter((item) =>
      type === "won" ? item.wonStatus : item.lossStatus
    ).length;

    if (
      !checked &&
      totalCheckedOfType === 1 &&
      (type === "won" ? currentRow.wonStatus : currentRow.lossStatus)
    ) {
      setShowWarningModal(true);
      return;
    }

    try {
      const payload: { wonStatus?: boolean; lossStatus?: boolean } = {};

      // If checking a box, ensure the opposite status is unchecked
      if (checked) {
        if (type === "won") {
          payload.wonStatus = true;
          payload.lossStatus = false; // Ensure lost is unchecked
        } else {
          payload.lossStatus = true;
          payload.wonStatus = false; // Ensure won is unchecked
        }
      } else {
        // If unchecking, just uncheck the current type
        payload[type === "won" ? "wonStatus" : "lossStatus"] = false;
      }

      // Find previous checked item of the same type (if checking a new item)
      if (checked) {
        const previousChecked = data.find(
          (item) =>
            item.key !== key &&
            (type === "won" ? item.wonStatus : item.lossStatus)
        );

        // Uncheck the previous item if it exists
        if (previousChecked) {
          await API.updateAuthAPI(
            { [type === "won" ? "wonStatus" : "lossStatus"]: false },
            previousChecked.key,
            END_POINT.LEAD_STATUS,
            true
          );
        }
      }

      // Update the current item
      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) throw new Error(error);

      await fetchStatusFields();
    } catch (error: any) {
      console.error(error.message || "Failed to update status");
    }
  };

  const columns = [
    {
      title: "Status name",
      dataIndex: "status",
      key: "status",
      minWidth: 120,
    },
    {
      title: "Color",
      dataIndex: "color",
      key: "color",
      minWidth: 50,
      render: (key: string, record: StatusField) => {
        return (
          <Tooltip
            title={`Color "${record.color}" associated with "${record.status}" status field. You can change the color by clicking on edit button.`}
          >
            <ColorPicker value={record.color} open={false} />
          </Tooltip>
        );
      },
    },
    {
      // title: "Select for",
      // children: [
      //   {
      title: (
        <span className="text-center">
          Show on <br /> Dashboard
        </span>
      ),
      dataIndex: "key",
      key: "key",
      // minWidth: 166,
      render: (key: string, record: StatusField) => (
        <Tooltip title="You can toggle the status field that you want to show on your Dashboard.">
          <div className="flex justify-start">
            <SwitcherTwo
              id={key}
              defaultChecked={record.showDashboard}
              onChange={handleDashboardToggle}
            />
          </div>
        </Tooltip>
      ),
      // },
      // {
      //   title: "Notification",
      //   dataIndex: "key",
      //   key: "key",
      //   // minWidth: 166,
      //   render: (key: string, record: StatusField) => (
      //     <Tooltip title="You can toggle the status field that you want to show on your Dashboard.">
      //       <div className="flex justify-start">
      //         <SwitcherTwo
      //           id={key + "Notification"}
      //           idForAPI={key}
      //           defaultChecked={record.showDashboard}
      //           onChange={handleDashboardToggle}
      //         />
      //       </div>
      //     </Tooltip>
      //   ),
      // },
      // ],
    },
    {
      title: "Filter for following lead pages",
      children: [
        {
          title: "Follow-Up",
          dataIndex: "key",
          key: "key",
          // minWidth: 166,
          render: (key: string, record: StatusField) => (
            <Tooltip
              title={
                <span>
                  All those fields whose toggle is enabled will not be shown in{" "}
                  <Link
                    to="/leads/followup"
                    className="text-green-light hover:text-orange-light "
                    onClick={(e) => e.stopPropagation()}
                  >
                    Follow Up leads page.
                  </Link>
                </span>
              }
            >
              <div className="flex justify-start">
                <SwitcherTwo
                  id={key + "followupFilter"}
                  idForAPI={key}
                  defaultChecked={record.showFollowUp}
                  onChange={(key: string, currentStatus: boolean) =>
                    handleFollowUpToggle(key, currentStatus, "showFollowUp")
                  }
                />
              </div>
            </Tooltip>
          ),
        },
        {
          title: "Imported",
          dataIndex: "key",
          key: "key",
          // minWidth: 166,
          render: (key: string, record: StatusField) => (
            <Tooltip
              title={
                <span>
                  All those fields whose toggle is enabled will not be shown in{" "}
                  <Link
                    to="/leads/imported-leads"
                    className="text-green-light hover:text-orange-light "
                    onClick={(e) => e.stopPropagation()}
                  >
                    Imported Leads page.
                  </Link>
                </span>
              }
            >
              <div className="flex justify-start">
                <SwitcherTwo
                  id={key + "importedLeads"}
                  idForAPI={key}
                  defaultChecked={record.showImported}
                  onChange={(key: string, currentStatus: boolean) =>
                    handleFollowUpToggle(key, currentStatus, "showImported")
                  }
                />
              </div>
            </Tooltip>
          ),
        },
        {
          title: "Out-Sourced",
          dataIndex: "key",
          key: "key",
          // minWidth: 166,
          render: (key: string, record: StatusField) => (
            <Tooltip
              title={
                <span>
                  All those fields whose toggle is enabled will not be shown in{" "}
                  <Link
                    to="/leads/outsourced-leads"
                    className="text-green-light hover:text-orange-light "
                    onClick={(e) => e.stopPropagation()}
                  >
                    Outsourced Leads page.
                  </Link>
                </span>
              }
            >
              <div className="flex justify-start">
                <SwitcherTwo
                  id={key + "outSourcedLeads"}
                  idForAPI={key}
                  defaultChecked={record.showOutSourced}
                  onChange={(key: string, currentStatus: boolean) =>
                    handleFollowUpToggle(key, currentStatus, "showOutSourced")
                  }
                />
              </div>
            </Tooltip>
          ),
        },
      ],
    },
    {
      title: "Treat it as",
      children: [
        {
          title: "Won",
          dataIndex: "key",
          key: "won",
          render: (key: string, record: StatusField) => (
            <Tooltip
              title={
                record.lossStatus
                  ? "Disabled, since already marked as LOST!"
                  : "Mark as WON status"
              }
            >
              <Checkbox
                checked={record.wonStatus}
                disabled={record.lossStatus}
                onChange={(e) =>
                  handleCheckboxChange(key, "won", e.target.checked)
                }
              />
            </Tooltip>
          ),
        },
        {
          title: "Lost",
          dataIndex: "key",
          key: "lost",
          render: (key: string, record: StatusField) => (
            <Tooltip
              title={
                record.wonStatus
                  ? "Disabled, since already marked as WON!"
                  : "Mark as LOST status"
              }
            >
              <Checkbox
                checked={record.lossStatus}
                disabled={record.wonStatus}
                onChange={(e) =>
                  handleCheckboxChange(key, "lost", e.target.checked)
                }
              />
            </Tooltip>
          ),
        },
      ],
    },
  ];

  const fetchStatusFields = async () => {
    try {
      setIsLoading(true);
      const { data: response, error } = await API.getAuthAPI(
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) return;

      if (response) {
        const transformedData: StatusField[] = response.map((item: any) => ({
          key: item._id,
          status: item.name,
          display: item.displayName,
          onDashboard: item.showDashboard,
          color: item.color,
          showDashboard: item.showDashboard,
          showFollowUp: item.showFollowUp,
          showImported: item.showImported,
          showOutSourced: item.showOutSourced,
          isActive: item.isActive,
          sendNotification: item.sendNotification,
          lossStatus: item.lossStatus,
          wonStatus: item.wonStatus,
        }));
        setData(transformedData);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to fetch status fields");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchStatusFields();
  }, []);

  const handleAdd = async (newItem: any) => {
    try {
      setIsLoading(true);
      const payload = {
        displayName: newItem.display,
        name: newItem.status,
        color: newItem.color || "#5750F1", // Default color
      };

      const { error } = await API.postAuthAPI(
        payload,
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) throw new Error(error);

      toast.success("Status field added successfully!");
      fetchStatusFields();
    } catch (error: any) {
      console.error(error.message || "Failed to add status field");
    } finally {
      setIsLoading(false);
    }
  };

  const handleEdit = async (key: string, updatedItem: any) => {
    try {
      setIsLoading(true);
      const payload = {
        displayName: updatedItem.display,
        name: updatedItem.status,
        color: updatedItem.color || "#0000",
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) return;

      toast.success("Status field updated successfully!");
      fetchStatusFields();
    } catch (error: any) {
      console.error(error.message || "Failed to update status field");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async (key: string) => {
    try {
      setIsLoading(true);
      const { error } = await API.DeleteAuthAPI(
        key,
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) return;

      toast.success("Status field deleted successfully!");
      fetchStatusFields();
    } catch (error: any) {
      console.error(error.message || "Failed to delete status field");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSoftDelete = async (key: string, currentStatus: boolean) => {
    try {
      setIsLoading(true);
      const { error } = await API.DeleteAuthAPI(
        key,
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) return;

      toast.success("Status field deleted successfully!");
      fetchStatusFields();
    } catch (error: any) {
      console.error(error.message || "Failed to delete status field");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDashboardToggle = async (key: string, currentStatus: boolean) => {
    try {
      const payload = {
        showDashboard: currentStatus,
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) return;
      fetchStatusFields();
    } catch (error: any) {
      console.error(error.message || "Failed to update dashboard visibility");
    }
  };

  const handleFollowUpToggle = async (
    key: string,
    currentStatus: boolean,
    field: string
  ) => {
    try {
      const payload = {
        [field]: currentStatus,
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) return;
      fetchStatusFields();
    } catch (error: any) {
      console.error(error.message || "Failed to update follow-up visibility");
    }
  };

  const handleUpdate = async (key: string, status: boolean) => {
    try {
      setIsLoading(true);
      const payload = {
        isActive: !status,
      };

      const { error } = await API.updateAuthAPI(
        payload,
        key,
        END_POINT.LEAD_STATUS,
        true
      );

      if (error) return;
      fetchStatusFields();
    } catch (error: any) {
      console.error(error.message || "Failed to update status");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <DynamicDataManagement
        title="Lead Status List"
        fields={fields}
        columns={columns}
        data={data}
        onAdd={handleAdd}
        onEdit={handleEdit}
        onDelete={handleDelete}
        onSoftDelete={handleSoftDelete}
        onUpdate={handleUpdate}
        isLoading={isLoading}
      />
      <Modal
        title="Warning"
        open={showWarningModal}
        onOk={() => setShowWarningModal(false)}
        onCancel={() => setShowWarningModal(false)}
        okText="OK"
        cancelButtonProps={{ style: { display: "none" } }}
      >
        <p>
          At least one status must be selected. You cannot uncheck this option.
        </p>
      </Modal>
    </>
  );
}


================================================
File: src/Pages/Settings/Components/StorageInsight.tsx
================================================
import { useState } from "react";
import { DownloadOutlined } from "@ant-design/icons";
import AudioPlayer from "../../../components/AudioPlayer/AudioPlayer";
import SelectGroupOne from "../../../components/FormElements/SelectGroup/SelectGroupOne";
import CustomAntdTable from "../../../components/Tables/CustomAntdTable";
import DonutSlickDesign from "../../../components/Charts/DonutSlickDesign";
import ButtonDefault from "../../../components/Buttons/ButtonDefault";
import AntDateTimePicker from "../../../components/FormElements/DatePicker/AntDateTimePicker";

const StorageInsights = () => {
  const data = [
    {
      key: "1",
      sno: 1,
      leadName: "John Doe",
      agentName: "Agent Smith",
      callDuration: "5:30",
      leadSize: "2.3 MB",
      recordingFile: "call_recording_001.mp3",
    },
    {
      key: "2",
      sno: 2,
      leadName: "Jane Smith",
      agentName: "Agent Johnson",
      callDuration: "3:45",
      leadSize: "1.8 MB",
      recordingFile: "call_recording_002.mp3",
    },
  ];

  const columns = [
    {
      title: "S.No",
      dataIndex: "sno",
      key: "sno",
      width: 70,
    },
    {
      title: "Lead Name",
      dataIndex: "leadName",
      key: "leadName",
    },
    {
      title: "Agent Name",
      dataIndex: "agentName",
      key: "agentName",
    },
    {
      title: "Call Duration",
      dataIndex: "callDuration",
      key: "callDuration",
    },
    {
      title: "Lead Size",
      dataIndex: "leadSize",
      key: "leadSize",
    },
    {
      title: "Recording File",
      dataIndex: "recordingFile",
      key: "recordingFile",
      render: (recordingFile: string) => (
        <div className="flex items-center gap-3">
          <AudioPlayer audioFile={recordingFile} />
          <button className="rounded p-1 hover:bg-gray-200 dark:hover:bg-gray-700">
            <DownloadOutlined className="text-xl text-primary" />
          </button>
        </div>
      ),
    },
    // {
    //   title: "Action",
    //   key: "action",
    //   render: () => (
    //     <div className="flex space-x-2 text-lg">
    //       {/* <button className="rounded p-1 hover:bg-gray-200 dark:hover:bg-gray-700">
    //         <DeleteFilled className="text-red" />
    //       </button>
    //       <button className="rounded p-1 hover:bg-gray-200 dark:hover:bg-gray-700">
    //         <MoreOutlined className="text-gray-500" />
    //       </button> */}
    //     </div>
    //   ),
    // },
  ];

  // Calculate percentage for the circular progress
  const usedStorage = 1.98;
  const totalStorage = 5;
  const availableStorage = 3.12;
  const percentage = Number(((usedStorage / totalStorage) * 100).toFixed(2));
  const chartSeries: number[] = [percentage];

  const [employee, setEmployee] = useState("Admin");
  const [fromDate, setFromDate] = useState("01/05/2024");
  const [toDate, setToDate] = useState("17/10/2024");

  const handleEmployeeChange = (value: string) => {
    setEmployee(value);
  };

  const handleFromDateChange = (selectedDates: Date[], dateStr: string) => {
    setFromDate(dateStr);
  };

  const handleToDateChange = (selectedDates: Date[], dateStr: string) => {
    setToDate(dateStr);
  };

  const handleApply = () => {
    console.log("Applying filters:", { employee, fromDate, toDate });
    // Implement filter logic here
  };

  return (
    <div className="mx-auto">
      {/* <Heading title="Manage Storage" alignCenter /> */}
      <div className="-mt-6 mb-3 flex flex-col items-center gap-3 sm:flex-row sm:gap-0">
        {/* Storage Graph and Button Container */}
        <div className="flex w-full flex-col items-center justify-center">
          <DonutSlickDesign
            chartSeries={chartSeries}
            formatter={function () {
              return usedStorage + " GB";
            }}
          />
          {/* Storage Details */}
          <div className="flex justify-center gap-12">
            <div className="text-center">
              <div className="text-sm text-gray-500 dark:text-gray-400">
                Available Space
              </div>
              <div className="text-xl font-semibold text-gray-800 dark:text-white">
                {availableStorage} GB
              </div>
            </div>
            <div className="text-center">
              <div className="text-sm text-gray-500 dark:text-gray-400">
                Total Space
              </div>
              <div className="text-xl font-semibold text-gray-800 dark:text-white">
                {totalStorage} GB
              </div>
            </div>
          </div>
        </div>

        <div className="flex flex-1 justify-end">
          <ButtonDefault label=" Get More Storage" customClasses="w-max" />
        </div>
      </div>

      <hr />

      <div className="my-3 flex flex-wrap items-end justify-center gap-4">
        <div className="w-full lg:w-1/4">
          <SelectGroupOne
            label="Select Employee"
            options={[{ value: "Admin", label: "Admin" }]}
            setSelectedOption={handleEmployeeChange}
          />
        </div>
        <div className="w-full lg:w-1/4">
          <AntDateTimePicker
            label="From Date"
            onChange={handleFromDateChange}
          />
        </div>
        <div className="w-full lg:w-1/4">
          <AntDateTimePicker label="To Date" onChange={handleToDateChange} />
        </div>
        <ButtonDefault
          label="Apply"
          onClick={handleApply}
          customClasses="min-w-[130px]"
        />
      </div>

      {/* Table */}
      <div className="rounded-lg bg-white shadow dark:bg-gray-800">
        <CustomAntdTable
          columns={columns}
          dataSource={data}
          pagination={{
            pageSize: 10,
            total: data.length,
            showSizeChanger: true,
            showQuickJumper: true,
          }}
        />
      </div>
    </div>
  );
};

export default StorageInsights;


================================================
File: src/Pages/Settings/Components/SubscriptionInfo.tsx
================================================

interface ClientInfo {
  clientName: string;
  domain: string;
  contactNo: string;
  clientEmail: string;
  planSignUpDate: string;
  planExpireDate: string;
  planName: string;
  status: string;
}

const ClientInformationDisplay: React.FC<{ clientInfo: ClientInfo }> = ({
  clientInfo,
}) => {
  const InfoRow: React.FC<{ label: string; value: string }> = ({
    label,
    value,
  }) => (
    <div className="mb-4">
      <div className="text-sm font-medium text-gray-500 dark:text-gray-400">
        {label}
      </div>
      <div className="mt-1 text-md sm:text-lg font-semibold text-gray-900 dark:text-white">
        {value}
      </div>
      <div className="mt-2 border-b border-gray-200 dark:border-gray-700"></div>
    </div>
  );

  return (
    <div className=" max-l mx-auto">
      {/* <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md max-w-4xl mx-auto"> */}
      <div className="grid grid-cols-2 gap-6">
        <InfoRow label="Client Name" value={clientInfo.clientName} />
        <InfoRow label="Domain" value={clientInfo.domain} />
        <InfoRow label="Contact No." value={clientInfo.contactNo} />
        <InfoRow label="Client Email" value={clientInfo.clientEmail} />
        <InfoRow label="Plan Sign Up Date" value={clientInfo.planSignUpDate} />
        <InfoRow label="Plan Expire Date" value={clientInfo.planExpireDate} />
        <InfoRow label="Plan Name" value={clientInfo.planName} />
        <InfoRow label="Status" value={clientInfo.status} />
      </div>
    </div>
  );
};

// Example usage
const SubscriptionInfo: React.FC = () => {
  const clientInfo: ClientInfo = {
    clientName: "MAGIEC ADVERTIZEMENT",
    domain: "14B9 4th Floor Dev Nagar Karol B",
    contactNo: "true", // This should be a proper phone number in a real scenario
    clientEmail: "Pincode", // This should be a proper email in a real scenario
    planSignUpDate: "Invalid Date",
    planExpireDate: "Invalid Date",
    planName: "", // This field is empty in the image
    status: "110005",
  };

  return (
    <div className="p-0">
      <h1 className="mb-6 text-center sm:text-2xl text-xl font-bold text-gray-800 dark:text-white">
        Subscription Information
      </h1>
      <ClientInformationDisplay clientInfo={clientInfo} />
    </div>
  );
};

export default SubscriptionInfo;


================================================
File: src/Pages/Settings/Components/Cards/CardApis.ts
================================================
import { API } from "../../../../api";
import { CompanyData, CompanySettings, PrimaryContact } from "../../../../types/companyDetailsTypes";

export const updateCompanyInfo = async (companyData: Partial<CompanyData>) => {
  const response = await API.updateAuthAPI(
    companyData,
    null,
    "updateCompanyDetails",
    true
  );
  return response;
};

export const updateContactInfo = async (contactData: {
  primaryContact: PrimaryContact;
  website?: string;
  billingAddress?: string;
}) => {
  const response = await API.updateAuthAPI(
    contactData,
    null,
    "updateCompanyDetails",
    true
  );
  return response;
};

export const updateSystemSettings = async (settings: CompanySettings) => {
  const response = await API.updateAuthAPI(
    { settings },
    null,
    "updateCompanyDetails",
    true
  );
  return response;
};

================================================
File: src/Pages/Settings/Components/Cards/CompanyInfo.tsx
================================================
import { useState, useEffect } from "react";
import { FaBuilding } from "react-icons/fa";
import { toast } from "react-toastify";
import Card from "../../../../components/CommonUI/Card";
import ButtonDefault from "../../../../components/Buttons/ButtonDefault";
import InputGroup from "../../../../components/FormElements/InputGroup";
import { InfoItem } from "../../../../components/CommonUI/InfoItem";
import { updateCompanyInfo } from "./CardApis";

interface CompanyInfo {
  name: string;
  industry: string;
  size: string;
  taxId: string;
  status: string;
}

const CompanyInfoCard = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<CompanyInfo>({
    name: "-",
    industry: "-",
    size: "-",
    taxId: "-",
    status: "active",
  });

  useEffect(() => {
    loadCompanyData();
  }, []);

  const loadCompanyData = () => {
    const userStr = localStorage.getItem("user");
    if (userStr) {
      try {
        const userData = JSON.parse(userStr);
        const company = userData.company || {};
        setFormData((prev) => ({
          ...prev,
          name: company.name || "-",
          industry: company.industry || "-",
          size: company.size || "-",
          taxId: company.taxId || "-",
          status: company.status || "active",
        }));
      } catch (error) {
        console.error("Error loading company data:", error);
      }
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async () => {
    try {
      setIsLoading(true);

      // API Update
      const response = await updateCompanyInfo({
        name: formData.name,
        industry: formData.industry,
        size: formData.size,
        taxId: formData.taxId,
        status: formData.status,
      });

      if (response.error) {
        throw new Error(response.error);
      }

      // Local Storage Update
      const userStr = localStorage.getItem("user");
      if (userStr) {
        const userData = JSON.parse(userStr);
        const updatedUserData = {
          ...userData,
          company: {
            ...userData.company,
            ...formData,
          },
        };
        localStorage.setItem("user", JSON.stringify(updatedUserData));
      }

      toast.success("Company information updated successfully");
      setIsEditing(false);
    } catch (error: any) {
      console.error(error.message || "Failed to update company information");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center gap-2">
          <FaBuilding className="text-xl text-primary" />
          <h2 className="text-xl font-semibold dark:text-white">
            Company Information
          </h2>
        </div>
        {isEditing ? (
          <div className="flex gap-2">
            <ButtonDefault
              label="Cancel"
              onClick={() => setIsEditing(false)}
              variant="secondary"
              customClasses="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2"
            />
            <ButtonDefault
              label={isLoading ? "Saving..." : "Save"}
              onClick={handleSubmit}
              variant="primary"
              customClasses="bg-primary hover:bg-primary/90 text-white px-4 py-2"
              disabled={isLoading}
            />
          </div>
        ) : (
          <ButtonDefault
            label="Edit"
            onClick={() => setIsEditing(true)}
            variant="primary"
            customClasses="bg-primary hover:bg-primary/90 text-white px-4 py-2"
          />
        )}
      </div>

      {isEditing ? (
        <div>
          <InputGroup
            label="Company Name"
            name="name"
            type="text"
            value={formData.name}
            onChange={handleInputChange}
          />
          <InputGroup
            label="Industry"
            name="industry"
            type="text"
            value={formData.industry}
            onChange={handleInputChange}
          />
          <InputGroup
            label="Company Size"
            name="size"
            type="text"
            value={formData.size}
            onChange={handleInputChange}
          />
          <InputGroup
            label="Tax ID"
            name="taxId"
            type="text"
            value={formData.taxId}
            onChange={handleInputChange}
          />
        </div>
      ) : (
        <>
          <InfoItem label="Company Name" value={formData.name} />
          <InfoItem label="Industry" value={formData.industry} />
          <InfoItem label="Company Size" value={formData.size} />
          <InfoItem label="Tax ID" value={formData.taxId} />
          <InfoItem label="Status" value={formData.status} isStatus={true} />
        </>
      )}
    </Card>
  );
};

export default CompanyInfoCard;


================================================
File: src/Pages/Settings/Components/Cards/ContactInfo.tsx
================================================
import { useState, useEffect } from "react";
import { FaUser } from "react-icons/fa";
import { toast } from "react-toastify";
import Card from "../../../../components/CommonUI/Card";
import ButtonDefault from "../../../../components/Buttons/ButtonDefault";
import InputGroup from "../../../../components/FormElements/InputGroup";
import { InfoItem } from "../../../../components/CommonUI/InfoItem";
import { updateContactInfo } from "./CardApis";

interface ContactInfo {
  primaryContact: {
    name: string;
    email: string;
    phone: string;
  };
  website: string;
  billingAddress: string;
}

const ContactInfoCard = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<ContactInfo>({
    primaryContact: {
      name: "-",
      email: "-",
      phone: "-",
    },
    website: "-",
    billingAddress: "-",
  });

  useEffect(() => {
    loadContactData();
  }, []);

  const loadContactData = () => {
    const userStr = localStorage.getItem("user");
    if (userStr) {
      try {
        const userData = JSON.parse(userStr);
        setFormData({
          primaryContact: {
            name: userData.name || "-",
            email: userData.email || "-",
            phone: userData.phone || "-",
          },
          website: userData.company?.website || "-",
          billingAddress: userData.company?.billingAddress || "-",
        });
      } catch (error) {
        console.error("Error loading contact data:", error);
      }
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    if (name.includes(".")) {
      const [parent, child] = name.split(".");
      setFormData((prev) => ({
        ...prev,
        [parent]: {
          ...(prev[parent as keyof ContactInfo] as Record<string, string>),
          [child]: value,
        },
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: value,
      }));
    }
  };

  const handleSubmit = async () => {
    try {
      setIsLoading(true);

      // API Update
      const response = await updateContactInfo({
        primaryContact: formData.primaryContact,
        website: formData.website,
        billingAddress: formData.billingAddress,
      });

      if (response.error) {
        throw new Error(response.error);
      }

      // Local Storage Update
      const userStr = localStorage.getItem("user");
      if (userStr) {
        const userData = JSON.parse(userStr);
        const updatedUserData = {
          ...userData,
          name: formData.primaryContact.name,
          email: formData.primaryContact.email,
          phone: formData.primaryContact.phone,
          company: {
            ...userData.company,
            website: formData.website,
            billingAddress: formData.billingAddress,
          },
        };
        localStorage.setItem("user", JSON.stringify(updatedUserData));
      }

      toast.success("Contact information updated successfully");
      setIsEditing(false);
    } catch (error: any) {
      console.error(error.message || "Failed to update contact information");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center gap-2">
          <FaUser className="text-xl text-primary" />
          <h2 className="text-xl font-semibold dark:text-white">
            Contact Information
          </h2>
        </div>
        {isEditing ? (
          <div className="flex gap-2">
            <ButtonDefault
              label="Cancel"
              onClick={() => setIsEditing(false)}
              variant="secondary"
              customClasses="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2"
            />
            <ButtonDefault
              label={isLoading ? "Saving..." : "Save"}
              onClick={handleSubmit}
              variant="primary"
              customClasses="bg-primary hover:bg-primary/90 text-white px-4 py-2"
              disabled={isLoading}
            />
          </div>
        ) : (
          <ButtonDefault
            label="Edit"
            onClick={() => setIsEditing(true)}
            variant="primary"
            customClasses="bg-primary hover:bg-primary/90 text-white px-4 !w-fit py-2"
          />
        )}
      </div>

      {isEditing ? (
        <div>
          <InputGroup
            label="Primary Contact Name"
            name="primaryContact.name"
            type="text"
            value={formData.primaryContact.name}
            onChange={handleInputChange}
          />
          <InputGroup
            label="Email"
            name="primaryContact.email"
            type="email"
            value={formData.primaryContact.email}
            onChange={handleInputChange}
          />
          <InputGroup
            label="Phone"
            name="primaryContact.phone"
            type="tel"
            value={formData.primaryContact.phone}
            onChange={handleInputChange}
          />
          <InputGroup
            label="Website"
            name="website"
            type="text"
            value={formData.website}
            onChange={handleInputChange}
          />
          <InputGroup
            label="Billing Address"
            name="billingAddress"
            type="text"
            value={formData.billingAddress}
            onChange={handleInputChange}
          />
        </div>
      ) : (
        <>
          <InfoItem
            label="Primary Contact"
            value={formData.primaryContact.name}
          />
          <InfoItem label="Email" value={formData.primaryContact.email} />
          <InfoItem label="Phone" value={formData.primaryContact.phone} />
          <InfoItem label="Website" value={formData.website} />
          <InfoItem label="Billing Address" value={formData.billingAddress} />
        </>
      )}
    </Card>
  );
};

export default ContactInfoCard;


================================================
File: src/Pages/Settings/Components/Cards/SubscriptionInfo.tsx
================================================
import { useState, useEffect } from "react";
import { FaDollarSign } from "react-icons/fa";
import Card from "../../../../components/CommonUI/Card";
import { InfoItem } from "../../../../components/CommonUI/InfoItem";

interface SubscriptionData {
  plan: string;
  startDate: string;
  endDate: string;
  status: string;
  features?: string[];
}

const SubscriptionCard = () => {
  const [subscriptionData, setSubscriptionData] = useState<SubscriptionData>({
    plan: "-",
    startDate: "",
    endDate: "",
    status: "inactive",
    features: [],
  });

  useEffect(() => {
    loadSubscriptionData();
  }, []);

  const loadSubscriptionData = () => {
    const userStr = localStorage.getItem("user");
    if (userStr) {
      try {
        const userData = JSON.parse(userStr);
        const subscription = userData.company?.subscription || {};
        setSubscriptionData({
          plan: subscription.plan || "-",
          startDate: subscription.startDate || "",
          endDate: subscription.endDate || "",
          status: subscription.status || "inactive",
          features: subscription.features || [],
        });
      } catch (error) {
        console.error("Error loading subscription data:", error);
      }
    }
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return "-";
    try {
      return new Date(dateString).toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
    } catch (error) {
      return "-";
    }
  };

  return (
    <Card className="p-6">
      <div className="flex items-center gap-2 mb-6">
        <FaDollarSign className="text-xl text-primary" />
        <h2 className="text-xl font-semibold dark:text-white">
          Subscription Details
        </h2>
      </div>

      <InfoItem label="Current Plan" value={subscriptionData.plan} />
      <InfoItem
        label="Start Date"
        value={formatDate(subscriptionData.startDate)}
      />
      <InfoItem label="End Date" value={formatDate(subscriptionData.endDate)} />
      <InfoItem
        label="Status"
        value={subscriptionData.status}
        isStatus={true}
      />

      {/* {subscriptionData.features && subscriptionData.features.length > 0 && (
        <div className="mt-4">
          <p className="text-sm text-gray-500 dark:text-gray-400 mb-2">Features</p>
          <ul className="list-disc list-inside">
            {subscriptionData.features.map((feature, index) => (
              <li key={index} className="text-gray-700 dark:text-gray-300">
                {feature}
              </li>
            ))}
          </ul>
        </div>
      )} */}
    </Card>
  );
};

export default SubscriptionCard;


================================================
File: src/Pages/Settings/Components/Cards/SystemSettings.tsx
================================================
import { useState, useEffect } from "react";
import { FaGlobeAmericas } from "react-icons/fa";
import { toast } from "react-toastify";
import Card from "../../../../components/CommonUI/Card";
import ButtonDefault from "../../../../components/Buttons/ButtonDefault";
import InputGroup from "../../../../components/FormElements/InputGroup";
import SelectGroupOne from "../../../../components/FormElements/SelectGroup/SelectGroupOne";
import { InfoItem } from "../../../../components/CommonUI/InfoItem";
import { updateSystemSettings } from "./CardApis";

interface SystemSettings {
  dateFormat: string;
  timezone: string;
  currency: string;
  language: string;
  fiscalYearStart: string;
}

const SystemSettingsCard = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<SystemSettings>({
    dateFormat: "DD/MM/YYYY",
    timezone: "Asia/Kolkata",
    currency: "INR",
    language: "en",
    fiscalYearStart: "01-04",
  });

  const timezones = [
    { value: "UTC", label: "UTC" },
    { value: "Asia/Kolkata", label: "Asia/Kolkata" },
    { value: "America/New_York", label: "America/New_York" },
    { value: "Europe/London", label: "Europe/London" },
  ];

  const currencies = [
    { value: "INR", label: "Indian Rupee (INR)" },
    { value: "USD", label: "US Dollar (USD)" },
    { value: "EUR", label: "Euro (EUR)" },
    { value: "GBP", label: "British Pound (GBP)" },
  ];

  const dateFormats = [
    { value: "DD/MM/YYYY", label: "DD/MM/YYYY" },
    { value: "MM/DD/YYYY", label: "MM/DD/YYYY" },
    { value: "YYYY-MM-DD", label: "YYYY-MM-DD" },
  ];

  useEffect(() => {
    loadSystemSettings();
  }, []);

  const loadSystemSettings = () => {
    const userStr = localStorage.getItem("user");
    if (userStr) {
      try {
        const userData = JSON.parse(userStr);
        const settings = userData.company?.settings || {};
        setFormData((prev) => ({
          ...prev,
          ...settings,
        }));
      } catch (error) {
        console.error("Error loading system settings:", error);
      }
    }
  };

  const handleSubmit = async () => {
    try {
      setIsLoading(true);

      // API Update
      const response = await updateSystemSettings(formData);

      if (response.error) {
        throw new Error(response.error);
      }

      // Local Storage Update
      const userStr = localStorage.getItem("user");
      if (userStr) {
        const userData = JSON.parse(userStr);
        const updatedUserData = {
          ...userData,
          company: {
            ...userData.company,
            settings: formData,
          },
        };
        localStorage.setItem("user", JSON.stringify(updatedUserData));
      }

      toast.success("System settings updated successfully");
      setIsEditing(false);
    } catch (error: any) {
      console.error(error.message || "Failed to update system settings");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center gap-2">
          <FaGlobeAmericas className="text-xl text-primary" />
          <h2 className="text-xl font-semibold dark:text-white">
            System Settings
          </h2>
        </div>
        {isEditing ? (
          <div className="flex gap-2">
            <ButtonDefault
              label="Cancel"
              onClick={() => setIsEditing(false)}
              variant="secondary"
              customClasses="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2"
            />
            <ButtonDefault
              label={isLoading ? "Saving..." : "Save"}
              onClick={handleSubmit}
              variant="primary"
              customClasses="bg-primary hover:bg-primary/90 text-white px-4 py-2"
              disabled={isLoading}
            />
          </div>
        ) : (
          <ButtonDefault
            label="Edit"
            onClick={() => setIsEditing(true)}
            variant="primary"
            customClasses="bg-primary hover:bg-primary/90 text-white px-4 py-2"
          />
        )}
      </div>

      {isEditing ? (
        <div>
          <SelectGroupOne
            label="Date Format"
            options={dateFormats}
            selectedOption={formData.dateFormat}
            setSelectedOption={(value) =>
              setFormData((prev) => ({ ...prev, dateFormat: value }))
            }
          />
          <SelectGroupOne
            label="Timezone"
            options={timezones}
            selectedOption={formData.timezone}
            setSelectedOption={(value) =>
              setFormData((prev) => ({ ...prev, timezone: value }))
            }
          />
          <SelectGroupOne
            label="Currency"
            options={currencies}
            selectedOption={formData.currency}
            setSelectedOption={(value) =>
              setFormData((prev) => ({ ...prev, currency: value }))
            }
          />
          <InputGroup
            label="Fiscal Year Start"
            name="fiscalYearStart"
            type="text"
            value={formData.fiscalYearStart}
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                fiscalYearStart: e.target.value,
              }))
            }
          />
        </div>
      ) : (
        <>
          <InfoItem label="Date Format" value={formData.dateFormat} />
          <InfoItem label="Timezone" value={formData.timezone} />
          <InfoItem label="Currency" value={formData.currency} />
          <InfoItem label="Language" value={formData.language.toUpperCase()} />
          <InfoItem
            label="Fiscal Year Start"
            value={formData.fiscalYearStart}
          />
        </>
      )}
    </Card>
  );
};

export default SystemSettingsCard;


================================================
File: src/Pages/WhatsAppPanel/WhatsAppCompose.tsx
================================================
import { useState, useEffect } from "react";
import TabPanel from "../../components/TabPanel/TabPanel";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";
import MiniLoader from "../../components/CommonUI/Loader/MiniLoader";
import BulkMessage from "../../components/BulkMessage/BulkMessage";
import { LuUserPlus } from "react-icons/lu";
import { GrDocumentUpload } from "react-icons/gr";
import { SlEnergy } from "react-icons/sl";
import Heading from "../../components/CommonUI/Heading";

const WhatsAppCompose = () => {
  const [activeTab, setActiveTab] = useState("1");
  const [isLoading, setIsLoading] = useState(false);
  const [leadsData, setLeadsData] = useState({
    activeLeads: [],
    allLeads: [],
    uploadedContacts: [],
  });

  // Fetch leads based on active tab
  const fetchLeadsData = async (tabKey: string) => {
    try {
      setIsLoading(true);
      let endpoint = "";

      switch (tabKey) {
        case "1":
          endpoint = `${END_POINT.LEADS_DATA}/active`;
          break;
        case "2":
          endpoint = END_POINT.LEADS_DATA;
          break;
        case "3":
          endpoint = `${END_POINT.LEADS_DATA}/contacts`;
          break;
        default:
          endpoint = END_POINT.LEADS_DATA;
      }

      const { data, error } = await API.getAuthAPI(endpoint, true);

      if (error) return;

      // Transform data to match table structure
      const transformedData = data?.map((lead: any) => ({
        key: lead._id,
        name: `${lead.firstName} ${lead.lastName}`,
        number: lead.contactNumber,
        status: lead.leadStatus?.name || "Not Set",
        agent: lead.assignedAgent?.name || "Unassigned",
        followupDate: lead.followUpDate,
      }));

      // Update the appropriate data section
      setLeadsData((prev) => ({
        ...prev,
        [tabKey === "1"
          ? "activeLeads"
          : tabKey === "2"
          ? "allLeads"
          : "uploadedContacts"]: transformedData,
      }));
    } catch (error: any) {
      console.error(error.message || "Failed to fetch leads data");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchLeadsData(activeTab);
  }, [activeTab]);

  const getCurrentData = () => {
    switch (activeTab) {
      case "1":
        return leadsData.activeLeads;
      case "2":
        return leadsData.allLeads;
      case "3":
        return leadsData.uploadedContacts;
      default:
        return [];
    }
  };

  const handleTabChange = (key: string) => {
    setActiveTab(key);
  };

  const tabsData = [
    {
      key: "1",
      tabName: <span className="text-xl">Active Leads</span>,
      component: isLoading ? (
        <MiniLoader />
      ) : (
        <BulkMessage
          data={getCurrentData()}
          mode={"whatsapp"}
          type="active"
          onRefresh={() => fetchLeadsData(activeTab)}
        />
      ),
      icon: <SlEnergy className="text-2xl" />,
    },
    {
      key: "2",
      tabName: <span className="text-xl">All Leads</span>,
      component: isLoading ? (
        <MiniLoader />
      ) : (
        <BulkMessage
          data={getCurrentData()}
          mode={"whatsapp"}
          type="all"
          onRefresh={() => fetchLeadsData(activeTab)}
        />
      ),
      icon: <LuUserPlus className="text-2xl" />,
    },
    {
      key: "3",
      tabName: <span className="text-xl">Uploaded Contacts</span>,
      component: isLoading ? (
        <MiniLoader />
      ) : (
        <BulkMessage
          data={getCurrentData()}
          mode={"whatsapp"}
          type="contacts"
          onRefresh={() => fetchLeadsData(activeTab)}
        />
      ),
      icon: <GrDocumentUpload className="text-xl" />,
    },
  ];

  return (
    <div className="rounded-lg bg-white p-4 shadow-md dark:bg-gray-800">
      {/* <h2 className="text-xl text-center font-semibold text-dark dark:text-white sm:text-2xl mb-6">
        Create and Send Bulk WhatsApp Messages
      </h2>{" "} */}
      <Heading title="Create and Send Bulk WhatsApp Messages" marginBottom="mb-5"/>
      <TabPanel
        tabsData={tabsData}
        defaultActiveKey={"2"}
        size="large"
        centered
        onChangeHandler={handleTabChange}
        type="card"
      />
    </div>
  );
};

export default WhatsAppCompose;


================================================
File: src/Pages/WhatsAppPanel/WhatsAppReport.tsx
================================================
// import ComingSoon from "../../components/CommonUI/CommingSoon";
import NoDataFound from "../../components/CommonUI/NoDataFound/NoData";

export default function WhatsAppReport() {
  return <NoDataFound />;
}


================================================
File: src/api/UrlProvider.ts
================================================
// export const TEST_URL = "http://13.49.49.9:3000/api";
// export const LIVE_URL = "http://13.49.49.9:3000/api";
// export const TEST_URL = "http://localhost:9000/api";
// export const LIVE_URL = "http://localhost:9000/api";

import { EndPointType } from "../types/UrlProvider";

// UrlProvider.ts
declare global {
  interface ImportMetaEnv {
    VITE_API_URL: string;
  }
}
const env = import.meta.env;

export const BASE_URL: string = env.VITE_API_URL;

export const END_POINT: EndPointType = {
  LOGIN: "signin",
  SIGNUP: "register",
  USER_REGISTER: "register/users-register",
  PRODUCT_SERVICE: "product-service",
  LEAD_SOURCES: "lead-sources",
  LEAD_STATUS: "lead-status",
  LOST_REASON: "lost-reason",
  GENERAL_DATA: "lead-types",
  EMPLOYEE_REPORT: "call-report",
  LEADS_DATA: "lead",
  LEADS_FOLLOWUP_DATA: "lead/follow-up",
  CALL_LIST: "getCallList",
  PRODUCT_SALE_REPORT: "product-sale-report",
  CALENDAR: "calendar",
  GET_CURL: "getCurlApi",
  BULK_UPDATE: "bulkUpdate",
  BULK_DELETE: "bulkDelete",
  USERS: "users",
  UPDATE_NOTIFICATION: "updateNotification",
  Funnel: "survey",
  Crefunel: "survey",
  SubscrPlane: "v1/subscription",
  Faq: "faq",
  PolicyQ: "policy",
  PolicyA: "policy/all",
  Policyf: "policy",
  planget: "subscription",
  Notifi: "notification",
  Notifiborad: "notification/broadcast",
  UserapiAl: "users/user",
  Userme: "v1/users/me",
  Userapi: "users",
  UserapiA: "users/admin",
  UserapiS: "users/support",
  Rsetpas: "users/set-password",
  Videoapi: "admin-content",
  Tages: "tag",
  Setintags: "tag-setting",
  UserPost: "user-post",
  Permission: "permission",
  feature: "feature",
} as const;


================================================
File: src/api/index.ts
================================================
// api.ts
import axios, { AxiosError } from "axios";
import { NavigateFunction } from "react-router-dom";
import { BASE_URL } from "./UrlProvider";
import { LocalStorage } from "../utils/localStorage";
import { toast } from "react-toastify";
import { ApiResponse, ApiConfig, ApiMethods } from "../types/api";
import { getAuthHeader } from "../utils/TokenVerify";
import { handleApiError } from "../utils/handleApiError";

export const getAuthAPI = async <T>(
  endPoint: string,
  tokenRequired: boolean = false,
  // Token: string = "",
  // navigate?: NavigateFunction,
  params: Record<string, any> = {}
): Promise<ApiResponse<T>> => {
  return { message: "", error: "" };
  const header = tokenRequired ? await getAuthHeader() : "";
  const config: ApiConfig = {
    method: "get",
    url: `${BASE_URL}${endPoint}`,
    headers: {
      "Content-Type": "application/json",
      timeout: 10000,
      Authorization: header,
    },
    params,
  };

  try {
    const response = await axios.request<T>(config);
    const { data, message, error, options }: any = response?.data;
    return { data, message, error, options };
  } catch (error) {
    return handleApiError(error);
  }
};

export const postAuthAPI = async <T>(
  body: any,
  endPoint: string,
  tokenRequired: boolean = false
  //   navigate: NavigateFunction | null = null
): Promise<ApiResponse<T>> => {
  return { message: "", error: "" };

  const header = tokenRequired ? await getAuthHeader() : "";
  const config: ApiConfig = {
    method: "post",
    maxBodyLength: Infinity,
    url: `${BASE_URL}${endPoint}`,
    headers: {
      "Content-Type": "application/json",
      Authorization: header,
    },
    data: JSON.stringify(body),
  };

  try {
    const response = await axios.request<T>(config);
    const { data, message, error }: any = response?.data;
    return { data, message, error };
  } catch (error) {
    return handleApiError(error);
  }
};

export const postAuthAPI1 = async <T>(
  body: any,
  endPoint: string,
  Token: string = "",
  navigate: NavigateFunction | null = null,
  isFormData: boolean = false,
  config: any = {}
): Promise<ApiResponse<T>> => {
  return { message: "", error: "" };

  try {
    const response = await axios({
      method: "post",
      url: `${BASE_URL}${endPoint}`,
      data: body,
      headers: {
        ...(isFormData ? {} : { "Content-Type": "application/json" }),
        Authorization: Token,
        ...config.headers,
      },
    });

    const { data, message, error } = response?.data;
    return { data, message, error };
  } catch (error) {
    return handleApiError(error);
  }
};

export const DeleteAuthAPI = async <T>(
  id: string | number,
  endPoint: string,
  tokenRequired: boolean = false,
  body?: any
  // Token: string = "",
  // navigate?: NavigateFunction
): Promise<ApiResponse<T>> => {
  return { message: "", error: "" };

  const header = tokenRequired ? await getAuthHeader() : "";
  const config: ApiConfig = {
    method: "delete",
    maxBodyLength: Infinity,
    url: `${BASE_URL}${endPoint}/${id}`,
    headers: {
      Authorization: header,
    },
    data: body,
  };

  try {
    const response = await axios.request<T>(config);
    const { data, message, error }: any = response?.data;
    return { data, message, error };
  } catch (error) {
    return handleApiError(error);
  }
};

export const updateAuthAPI = async <T>(
  body: any,
  id: string | number | null,
  endPoint: string,
  tokenRequired: boolean = false
  // Token: string = "",
  // navigate?: NavigateFunction
): Promise<ApiResponse<T>> => {
  return { message: "", error: "" };
  const header = tokenRequired ? await getAuthHeader() : "";
  const config: ApiConfig = {
    method: "put",
    maxBodyLength: Infinity,
    url:
      id !== null ? `${BASE_URL}${endPoint}/${id}` : `${BASE_URL}${endPoint}`,
    headers: {
      "Content-Type": "application/json",
      Authorization: header,
    },
    data: JSON.stringify(body),
  };

  try {
    const response = await axios.request<T>(config);
    const { data, message, error }: any = response?.data;
    return { data, message, error };
  } catch (error) {
    return handleApiError(error);
  }
};

export const PutAuthAPI = async <T>(
  body: any | null,
  id: string | null,
  endPoint: string,
  tokenRequired: boolean = false
  // navigate?: NavigateFunction
): Promise<ApiResponse<T>> => {
  return { message: "", error: "" };

  const header = tokenRequired ? await getAuthHeader() : "";
  const config: ApiConfig = {
    method: "put",
    maxBodyLength: Infinity,
    url: `${BASE_URL}${endPoint}${id ? "/" + id : ""}`,
    headers: {
      "Content-Type": "application/json",
      Authorization: header,
    },
  };

  if (body !== null) {
    config.data = JSON.stringify(body);
  }

  try {
    const response = await axios.request<T>(config);
    const { data, message, error }: any = response?.data;
    return { data, message, error };
  } catch (error) {
    return handleApiError(error);
  }
};

export const networkErrorAlert = (callback: () => void) => {
  // Implementation here if needed
};

export const API: ApiMethods = {
  getAuthAPI,
  postAuthAPI,
  postAuthAPI1,
  DeleteAuthAPI,
  updateAuthAPI,
  PutAuthAPI,
};


================================================
File: src/api/commonAPI/exportApi.ts
================================================
import { toast } from "react-toastify";
import { API } from "../../api";

interface ExportResponse {
  error: boolean;
  message: string;
  data: {
    fileData: string;
    fileName: string;
    contentType: string;
  };
}

async function downloadFile(response: any) {
  try {
    const { fileData, contentType, fileName } = response.data;
    
    // Convert base64 to blob
    const base64Response = await fetch(`data:${contentType};base64,${fileData}`);
    const blob = await base64Response.blob();
    
    // Create download link
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    
    // Cleanup
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    
    return true;
  } catch (error) {
    console.error('Error downloading file:', error);
    return false;
  }
}

export async function handleExportPDF() {
  try {    
    const response = await API.getAuthAPI(
      'export-pdf',
      true,
    );

    if (response.error) {
      throw new Error(response.error);
    }

    const success = await downloadFile(response);
    
    if (success) {
      toast.success(response.message || 'PDF exported successfully');
    } else {
      throw new Error('Failed to download PDF');
    }
  } catch (error: any) {
    console.error('PDF export error:', error);
  }
}

export async function handleExportExcel() {
  try {
    const response = await API.getAuthAPI(
      'export-excel',
      true,
    );

    if (response.error) {
      throw new Error(response.error);
    }

    const success = await downloadFile(response);
    
    if (success) {
      toast.success(response.message || 'Excel file exported successfully');
    } else {
      throw new Error('Failed to download Excel file');
    }
  } catch (error: any) {
    console.error('Excel export error:', error);
  }
}

================================================
File: src/api/commonAPI/index.ts
================================================
import {
  AGEND_NAMESNewFormat,
  countryOptions,
  leadSourceOptionsNewFormat,
  leadStatusNewFormat,
  lostReasonOptionsNewFormat,
  serviceOptionsNewFormat,
} from "../../utils/Constants/UsefullJSON";
import { API } from "../index";
import { END_POINT } from "../UrlProvider";
import { toast } from "react-toastify";

interface GeneralData {
  status: any[];
  sources: any[];
  agents: any[];
  productsServices: any[];
  countries: any[];
}

export const fetchGeneralData = async (): Promise<void> => {
  try {
    const { data, error, message } = await API.getAuthAPI(
      END_POINT.GENERAL_DATA,
      true
    );
    const { data: notificationData } = await API.getAuthAPI(
      "getNotification",
      // END_POINT.GENERAL_DATA,
      true
    );

    if (error) return;

    if (data) {
      const {
        status = [],
        sources = [],
        agents = [],
        productsServices = [],
        leadLoseReason = [],
        countries = [],
      } = data;

      // Store each data array separately in localStorage
      localStorage.setItem("crm_status", JSON.stringify(status));
      localStorage.setItem("crm_sources", JSON.stringify(sources));
      localStorage.setItem("crm_agents", JSON.stringify(agents));
      localStorage.setItem("crm_lostReason", JSON.stringify(leadLoseReason));
      localStorage.setItem(
        "crm_products_services",
        JSON.stringify(productsServices)
      );
      localStorage.setItem("crm_countries", JSON.stringify(countries));

      // Optional: Return success message
      //   toast.success("General data updated successfully");
    }
    if (notificationData) {
      localStorage.setItem(
        "crm_notifictaion",
        JSON.stringify(notificationData)
      );
    }
  } catch (error: any) {
    console.error("Error fetching general data:", error);
  }
};

// Helper functions to get data from localStorage
export const getStoredStatus = (forSelectOptions = false): any[] => {
  try {
    const data = localStorage.getItem("crm_status");
    const parsedData = data ? JSON.parse(data) : leadStatusNewFormat;
    const transformedData = parsedData?.map((item: any) => ({
      value: item._id,
      label: item.name,
    }));
    if (!forSelectOptions) {
      return data ? JSON.parse(data) : [];
    } else {
      return transformedData;
    }
  } catch (error) {
    console.error("Error parsing status data:", error);
    return [];
  }
};

export const getStoredLostReason = (forSelectOptions = false): any[] => {
  try {
    const data = localStorage.getItem("crm_lostReason");
    const parsedData = data ? JSON.parse(data) : lostReasonOptionsNewFormat;
    const transformedData = parsedData?.map((item: any) => ({
      value: item._id,
      label: item.reason,
    }));
    if (!forSelectOptions) {
      return data ? JSON.parse(data) : [];
    } else {
      return transformedData;
    }
  } catch (error) {
    console.error("Error parsing status data:", error);
    return [];
  }
};

export const getStoredSources = (forSelectOptions = false): any[] => {
  try {
    const data = localStorage.getItem("crm_sources");
    const parsedData = data ? JSON.parse(data) : leadSourceOptionsNewFormat;
    const transformedData = parsedData?.map((item: any) => ({
      value: item._id,
      label: item.name,
    }));
    if (!forSelectOptions) {
      return data ? JSON.parse(data) : [];
    } else {
      return transformedData;
    }
  } catch (error) {
    console.error("Error parsing sources data:", error);
    return [];
  }
};

export const getStoredAgents = (forSelectOptions = false): any[] => {
  try {
    const data = localStorage.getItem("crm_agents");
    const parsedData = data ? JSON.parse(data) : AGEND_NAMESNewFormat;
    const transformedData = parsedData?.map((item: any) => ({
      value: item._id,
      label: item.name,
    }));
    if (!forSelectOptions) {
      return data ? JSON.parse(data) : [];
    } else {
      return transformedData;
    }
  } catch (error) {
    console.error("Error parsing agents data:", error);
    toast.error("Error parsing agents data");
    return [];
  }
};

export const getStoredProductsServices = (forSelectOptions = false): any[] => {
  try {
    const data = localStorage.getItem("crm_products_services");
    const parsedData = data ? JSON.parse(data) : serviceOptionsNewFormat;
    const transformedData = parsedData?.map((item: any) => ({
      value: item._id,
      label: item.name,
    }));
    if (!forSelectOptions) {
      return data ? JSON.parse(data) : [];
    } else {
      return transformedData;
    }
  } catch (error) {
    console.error("Error parsing products services data:", error);
    return [];
  }
};

export const getStoredCountries = (forSelectOptions = false): any[] => {
  try {
    const data = localStorage.getItem("crm_countries");
    const parsedData = data ? JSON.parse(data) : countryOptions;
    const transformedData = parsedData?.map((item: any) => ({
      value: item.isoCode,
      label: item.name,
    }));
    if (!forSelectOptions) {
      return data ? JSON.parse(data) : [];
    } else {
      return transformedData;
    }
  } catch (error) {
    console.error("Error parsing countries data:", error);
    return [];
  }
};

export const getStoredNotification = (forSelectOptions = false): any[] => {
  try {
    const data = localStorage.getItem("crm_notifictaion");
    const parsedData = data ? JSON.parse(data) : [];
    return parsedData;
  } catch (error) {
    console.error("Error parsing countries data:", error);
    return [];
  }
};

// Helper function to clear all stored general data
export const clearGeneralData = (): void => {
  localStorage.removeItem("crm_status");
  localStorage.removeItem("crm_sources");
  localStorage.removeItem("crm_agents");
  localStorage.removeItem("crm_products_services");
  localStorage.removeItem("crm_countries");
};


================================================
File: src/components/ClickOutside.tsx
================================================
import React, { useRef, useEffect } from "react";

interface Props {
  children: React.ReactNode;
  exceptionRef?: React.RefObject<HTMLElement>;
  onClick: () => void;
  className?: string;
}

const ClickOutside: React.FC<Props> = ({
  children,
  exceptionRef,
  onClick,
  className,
}) => {
  const wrapperRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickListener = (event: MouseEvent) => {
      let clickedInside: null | boolean = false;
      if (exceptionRef) {
        clickedInside =
          (wrapperRef.current &&
            wrapperRef.current.contains(event.target as Node)) ||
          (exceptionRef.current && exceptionRef.current === event.target) ||
          (exceptionRef.current &&
            exceptionRef.current.contains(event.target as Node));
      } else {
        clickedInside =
          wrapperRef.current &&
          wrapperRef.current.contains(event.target as Node);
      }

      if (!clickedInside) onClick();
    };

    document.addEventListener("mousedown", handleClickListener);

    return () => {
      document.removeEventListener("mousedown", handleClickListener);
    };
  }, [exceptionRef, onClick]);

  return (
    <div ref={wrapperRef} className={`${className || ""}`}>
      {children}
    </div>
  );
};

export default ClickOutside;


================================================
File: src/components/Star.tsx
================================================
import React, { useState } from "react";

const Star: React.FC = () => {
  const [stared, setStared] = useState(false);

  function toggleStar() {
    setStared(() => !stared);
  }

  return (
    <svg
      className={`hover:fill-[#FFD02C] dark:hover:hover:fill-[#FFD02C] ${stared ? "fill-[#FFD02C] " : "fill-[#DFE3F0] dark:fill-[#E5E7EE]/70"}`}
      onClick={toggleStar}
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M11.1044 3.81665C11.4712 3.07349 12.531 3.07349 12.8978 3.81665L14.8587 7.78911C15.0042 8.08396 15.2854 8.28842 15.6107 8.33598L19.9973 8.97714C20.8172 9.09698 21.144 10.1048 20.5504 10.683L17.3779 13.773C17.142 14.0028 17.0344 14.3339 17.09 14.6584L17.8385 19.0227C17.9787 19.8396 17.1211 20.4626 16.3875 20.0768L12.4666 18.0148C12.1752 17.8616 11.827 17.8616 11.5357 18.0148L7.61475 20.0768C6.88112 20.4626 6.02357 19.8396 6.16369 19.0227L6.9122 14.6584C6.96786 14.3339 6.8602 14.0028 6.62433 13.773L3.45179 10.683C2.8582 10.1048 3.18498 9.09698 4.0049 8.97714L8.39148 8.33598C8.71684 8.28842 8.99802 8.08396 9.14356 7.78911L11.1044 3.81665Z"
        fill=""
      />
    </svg>
  );
};

export default Star;


================================================
File: src/components/Alerts/AlertError.tsx
================================================
const AlertError = () => {
  return (
    <>
      <div className="flex w-full rounded-[10px] border-l-6 border-red-light bg-red-light-5 px-7 py-8 dark:bg-[#1B1B24] dark:bg-opacity-30 md:p-9">
        <div className="mr-5 mt-[5px] flex h-8 w-full max-w-8 items-center justify-center rounded-md bg-red-light">
          <svg
            width="11"
            height="11"
            viewBox="0 0 11 11"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M1.79566 0.722904L1.7963 0.723542L5.49396 4.43004L9.20434 0.737509L9.55768 1.09128L9.20498 0.736873L9.20473 0.737119C9.50233 0.440303 9.97913 0.440433 10.2766 0.737509C10.5745 1.03505 10.5745 1.51262 10.2766 1.81016L10.2759 1.81079L6.56578 5.5031L10.262 9.2081C10.2621 9.2082 10.2622 9.20831 10.2623 9.20841C10.5599 9.50598 10.5597 9.98331 10.262 10.2807L9.90861 9.92698L10.2619 10.2807C10.1232 10.4193 9.92253 10.5 9.73314 10.5C9.54375 10.5 9.34309 10.4193 9.20434 10.2807L9.55768 9.92698L9.20434 10.2807L5.49333 6.57425L1.7963 10.2801L1.79566 10.2808C1.65691 10.4193 1.45624 10.5 1.26686 10.5C1.07746 10.5 0.876797 10.4193 0.738054 10.2808L1.09139 9.92698L0.73805 10.2807C0.440426 9.98348 0.440145 9.50654 0.737209 9.20894C0.737489 9.20866 0.737769 9.20838 0.73805 9.2081L4.4215 5.50246L0.723428 1.79555C0.723302 1.79543 0.723176 1.7953 0.72305 1.79518C0.425523 1.49761 0.425649 1.02032 0.723428 0.722905C1.021 0.425698 1.49809 0.425698 1.79566 0.722904Z"
              fill="white"
              stroke="white"
            />
          </svg>
        </div>
        <div className="w-full">
          <h5 className="mb-4 font-bold leading-[22px] text-[#BC1C21]">
            There were 1 errors with your submission
          </h5>
          <ul>
            <li className="text-[#CD5D5D]">
              Lorem Ipsum is simply dummy text of the printing
            </li>
          </ul>
        </div>
      </div>
    </>
  );
};

export default AlertError;


================================================
File: src/components/Alerts/AlertSuccess.tsx
================================================

const AlertSuccess = () => {
  return (
    <>
      <div className="flex w-full rounded-[10px] border-l-6 border-green bg-green-light-7 px-7 py-8 dark:bg-[#1B1B24] dark:bg-opacity-30 md:p-9">
        <div className="mr-5.5 mt-[5px] flex h-8 w-full max-w-8 items-center justify-center rounded-md bg-green">
          <svg
            width="16"
            height="12"
            viewBox="0 0 16 12"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M15.2984 0.826822L15.2868 0.811827L15.2741 0.797751C14.9173 0.401867 14.3238 0.400754 13.9657 0.794406L5.91888 9.45376L2.05667 5.2868C1.69856 4.89287 1.10487 4.89389 0.747996 5.28987C0.417335 5.65675 0.417335 6.22337 0.747996 6.59026L0.747959 6.59029L0.752701 6.59541L4.86742 11.0348C5.14445 11.3405 5.52858 11.5 5.89581 11.5C6.29242 11.5 6.65178 11.3355 6.92401 11.035L15.2162 2.11161C15.5833 1.74452 15.576 1.18615 15.2984 0.826822Z"
              fill="white"
              stroke="white"
            />
          </svg>
        </div>
        <div className="w-full">
          <h5 className="mb-2 font-bold leading-[22px] text-[#004434] dark:text-[#34D399]">
            Message Sent Successfully
          </h5>
          <p className="text-[#637381]">
            Lorem Ipsum is simply dummy text of the printing and typesetting
            industry.
          </p>
        </div>
      </div>
    </>
  );
};

export default AlertSuccess;


================================================
File: src/components/Alerts/AlertWarning.tsx
================================================

const AlertWarning = () => {
  return (
    <>
      <div className="flex w-full rounded-[10px] border-l-6 border-[#FFB800] bg-[#FEF5DE] px-7 py-8 dark:bg-[#1B1B24] dark:bg-opacity-30 md:p-9">
        <div className="mr-5 flex h-9 w-9 items-center justify-center rounded-lg bg-[#FBBF24]">
          <svg
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M2.5 8.68038C2.5 6.01573 2.5 4.6834 2.8146 4.23518C3.12919 3.78695 4.38194 3.35813 6.88743 2.5005L7.36477 2.3371C8.67082 1.89004 9.32384 1.6665 10 1.6665C10.6762 1.6665 11.3292 1.89004 12.6352 2.3371L13.1126 2.5005C15.6181 3.35813 16.8708 3.78695 17.1854 4.23518C17.5 4.6834 17.5 6.01573 17.5 8.68038V9.99264C17.5 14.691 13.9675 16.9711 11.7512 17.9392C11.15 18.2019 10.8494 18.3332 10 18.3332C9.15062 18.3332 8.85001 18.2019 8.2488 17.9392C6.03247 16.9711 2.5 14.691 2.5 9.99264V8.68038ZM10 6.0415C10.3452 6.0415 10.625 6.32133 10.625 6.6665V9.99984C10.625 10.345 10.3452 10.6248 10 10.6248C9.65482 10.6248 9.375 10.345 9.375 9.99984V6.6665C9.375 6.32133 9.65482 6.0415 10 6.0415ZM10 13.3332C10.4602 13.3332 10.8333 12.9601 10.8333 12.4998C10.8333 12.0396 10.4602 11.6665 10 11.6665C9.53976 11.6665 9.16667 12.0396 9.16667 12.4998C9.16667 12.9601 9.53976 13.3332 10 13.3332Z"
              fill="white"
            />
          </svg>
        </div>
        <div className="w-full">
          <h5 className="mb-3.5 text-lg font-bold leading-[22px] text-[#9D5425]">
            Attention needed
          </h5>
          <p className="w-full max-w-[740px] text-[#D0915C]">
            Lorem Ipsum is simply dummy text of the printing and typesetting
            industry. Lorem Ipsum has been the industry&apos;s standard dummy
            text ever since the 1500s, when
          </p>
        </div>
      </div>
    </>
  );
};

export default AlertWarning;


================================================
File: src/components/Assets/Icons/LogoutIcon.tsx
================================================

export default function LogoutIcon() {
  return (
    <svg
      className="fill-current"
      width="18"
      height="18"
      viewBox="0 0 18 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_1815_13085)">
        <path
          d="M11.209 0.9375C10.1833 0.937485 9.35657 0.937473 8.70635 1.02489C8.03127 1.11566 7.46286 1.30983 7.01142 1.76126C6.61773 2.15496 6.4188 2.63877 6.31437 3.20727C6.2129 3.75969 6.19349 4.43572 6.18897 5.24687C6.18724 5.55753 6.43768 5.81076 6.74833 5.81249C7.05899 5.81422 7.31223 5.56379 7.31396 5.25313C7.31852 4.43301 7.33982 3.8517 7.42086 3.41051C7.49895 2.9854 7.62433 2.73935 7.80692 2.55676C8.01449 2.34919 8.30592 2.21385 8.85625 2.13986C9.42276 2.0637 10.1736 2.0625 11.2502 2.0625H12.0002C13.0767 2.0625 13.8276 2.0637 14.3941 2.13986C14.9444 2.21385 15.2358 2.34919 15.4434 2.55676C15.651 2.76433 15.7863 3.05576 15.8603 3.60609C15.9365 4.1726 15.9377 4.92344 15.9377 6V12C15.9377 13.0766 15.9365 13.8274 15.8603 14.3939C15.7863 14.9442 15.651 15.2357 15.4434 15.4432C15.2358 15.6508 14.9444 15.7862 14.3941 15.8601C13.8276 15.9363 13.0767 15.9375 12.0002 15.9375H11.2502C10.1736 15.9375 9.42276 15.9363 8.85625 15.8601C8.30592 15.7862 8.01449 15.6508 7.80692 15.4432C7.62433 15.2607 7.49895 15.0146 7.42086 14.5895C7.33982 14.1483 7.31852 13.567 7.31396 12.7469C7.31223 12.4362 7.05899 12.1858 6.74833 12.1875C6.43768 12.1892 6.18724 12.4425 6.18897 12.7531C6.19349 13.5643 6.2129 14.2403 6.31437 14.7927C6.4188 15.3612 6.61773 15.845 7.01142 16.2387C7.46286 16.6902 8.03127 16.8843 8.70635 16.9751C9.35657 17.0625 10.1833 17.0625 11.209 17.0625H12.0413C13.067 17.0625 13.8937 17.0625 14.544 16.9751C15.2191 16.8843 15.7875 16.6902 16.2389 16.2387C16.6903 15.7873 16.8845 15.2189 16.9753 14.5438C17.0627 13.8936 17.0627 13.0668 17.0627 12.0412V5.95885C17.0627 4.93316 17.0627 4.10641 16.9753 3.45619C16.8845 2.78111 16.6903 2.2127 16.2389 1.76126C15.7875 1.30983 15.2191 1.11566 14.544 1.02489C13.8938 0.937473 13.067 0.937485 12.0413 0.9375H11.209Z"
          fill=""
        />
        <path
          d="M11.25 8.4375C11.5607 8.4375 11.8125 8.68934 11.8125 9C11.8125 9.31066 11.5607 9.5625 11.25 9.5625H3.02058L4.49107 10.8229C4.72694 11.0251 4.75426 11.3802 4.55208 11.6161C4.34991 11.8519 3.9948 11.8793 3.75893 11.6771L1.13393 9.42708C1.00925 9.32022 0.9375 9.16421 0.9375 9C0.9375 8.83579 1.00925 8.67978 1.13393 8.57292L3.75893 6.32292C3.9948 6.12074 4.34991 6.14806 4.55208 6.38393C4.75426 6.6198 4.72694 6.97491 4.49107 7.17708L3.02058 8.4375H11.25Z"
          fill=""
        />
      </g>
      <defs>
        <clipPath id="clip0_1815_13085">
          <rect width="18" height="18" rx="5" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
}


================================================
File: src/components/Assets/Icons/DashBoardIcons/DollarIcon.tsx
================================================

export default function DollarIcon() {
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 26 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M13 23.8332C18.983 23.8332 23.8333 18.9829 23.8333 12.9998C23.8333 7.01675 18.983 2.1665 13 2.1665C7.01687 2.1665 2.16663 7.01675 2.16663 12.9998C2.16663 18.9829 7.01687 23.8332 13 23.8332ZM13.8125 6.49984C13.8125 6.05111 13.4487 5.68734 13 5.68734C12.5512 5.68734 12.1875 6.05111 12.1875 6.49984V6.84297C10.4212 7.15923 8.93746 8.48625 8.93746 10.2915C8.93746 12.3684 10.9013 13.8123 13 13.8123C14.4912 13.8123 15.4375 14.7935 15.4375 15.7082C15.4375 16.6228 14.4912 17.604 13 17.604C11.5088 17.604 10.5625 16.6228 10.5625 15.7082C10.5625 15.2594 10.1987 14.8957 9.74996 14.8957C9.30123 14.8957 8.93746 15.2594 8.93746 15.7082C8.93746 17.5134 10.4212 18.8404 12.1875 19.1567V19.4998C12.1875 19.9486 12.5512 20.3123 13 20.3123C13.4487 20.3123 13.8125 19.9486 13.8125 19.4998V19.1567C15.5788 18.8404 17.0625 17.5134 17.0625 15.7082C17.0625 13.6313 15.0986 12.1873 13 12.1873C11.5088 12.1873 10.5625 11.2061 10.5625 10.2915C10.5625 9.37688 11.5088 8.39567 13 8.39567C14.4912 8.39567 15.4375 9.37688 15.4375 10.2915C15.4375 10.7402 15.8012 11.104 16.25 11.104C16.6987 11.104 17.0625 10.7402 17.0625 10.2915C17.0625 8.48625 15.5788 7.15923 13.8125 6.84297V6.49984Z"
        fill="white"
      />
    </svg>
  );
}


================================================
File: src/components/Assets/Icons/DashBoardIcons/FallIconRed.tsx
================================================

export default function FallIconRed() {
  return (
    <svg
      className="fill-current"
      width="10"
      height="10"
      viewBox="0 0 10 10"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M5.64284 7.6075L9.09102 4.255L10 5.13875L5 10L-8.98488e-07 5.13875L0.908973 4.255L4.35716 7.6075L4.35716 7.6183e-07L5.64284 9.86625e-07L5.64284 7.6075Z"
        fill=""
      />
    </svg>
  );
}


================================================
File: src/components/Assets/Icons/DashBoardIcons/GrowthIconGreen.tsx
================================================

export default function GrowthIconGreen() {
  return (
    <svg
      className="fill-current"
      width="10"
      height="10"
      viewBox="0 0 10 10"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M4.35716 2.3925L0.908974 5.745L5.0443e-07 4.86125L5 -5.1656e-07L10 4.86125L9.09103 5.745L5.64284 2.3925L5.64284 10L4.35716 10L4.35716 2.3925Z"
        fill=""
      />
    </svg>
  );
}


================================================
File: src/components/Assets/Icons/DashBoardIcons/SquareBoxIcon.tsx
================================================

export default function SquareBoxIcon() {
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 26 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M19.0425 4.80065L16.8758 3.66364C14.9739 2.66555 14.0229 2.1665 13 2.1665C11.977 2.1665 11.026 2.66555 9.12411 3.66363L6.95744 4.80065C5.03588 5.80904 3.90635 6.40179 3.20629 7.1946L13 12.0914L22.7936 7.1946C22.0936 6.40179 20.964 5.80904 19.0425 4.80065Z"
        fill="white"
      />
      <path
        d="M23.5607 8.62788L13.8125 13.502V23.7292C14.5902 23.5355 15.4751 23.0711 16.8758 22.336L19.0425 21.199C21.3734 19.9758 22.5389 19.3642 23.1861 18.2651C23.8333 17.1661 23.8333 15.7984 23.8333 13.0632V12.9365C23.8333 10.8861 23.8333 9.60421 23.5607 8.62788Z"
        fill="white"
      />
      <path
        d="M12.1875 23.7292V13.502L2.43923 8.62788C2.16663 9.60421 2.16663 10.8861 2.16663 12.9365V13.0632C2.16663 15.7984 2.16663 17.1661 2.81381 18.2651C3.46099 19.3642 4.62647 19.9758 6.95744 21.199L9.12411 22.336C10.5248 23.0711 11.4097 23.5355 12.1875 23.7292Z"
        fill="white"
      />
    </svg>
  );
}


================================================
File: src/components/Assets/Icons/DashBoardIcons/UsersIcons.tsx
================================================

export default function UsersIcons() {
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 26 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <ellipse
        cx="9.75106"
        cy="6.49984"
        rx="4.33333"
        ry="4.33333"
        fill="white"
      />
      <ellipse
        cx="9.75106"
        cy="18.4178"
        rx="7.58333"
        ry="4.33333"
        fill="white"
      />
      <path
        d="M22.7496 18.4173C22.7496 20.2123 20.5445 21.6673 17.8521 21.6673C18.6453 20.8003 19.1907 19.712 19.1907 18.4189C19.1907 17.1242 18.644 16.0349 17.8493 15.1674C20.5417 15.1674 22.7496 16.6224 22.7496 18.4173Z"
        fill="white"
      />
      <path
        d="M19.4996 6.50098C19.4996 8.2959 18.0446 9.75098 16.2496 9.75098C15.8582 9.75098 15.483 9.68179 15.1355 9.55498C15.648 8.65355 15.9407 7.61084 15.9407 6.49977C15.9407 5.38952 15.6484 4.34753 15.1366 3.44656C15.4838 3.32001 15.8587 3.25098 16.2496 3.25098C18.0446 3.25098 19.4996 4.70605 19.4996 6.50098Z"
        fill="white"
      />
    </svg>
  );
}


================================================
File: src/components/Assets/Icons/DashBoardIcons/ViewsIcon.tsx
================================================

export default function ViewsIcon() {
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 26 26"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M10.5626 13.0002C10.5626 11.654 11.6539 10.5627 13.0001 10.5627C14.3463 10.5627 15.4376 11.654 15.4376 13.0002C15.4376 14.3464 14.3463 15.4377 13.0001 15.4377C11.6539 15.4377 10.5626 14.3464 10.5626 13.0002Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M2.16675 13.0002C2.16675 14.7762 2.62713 15.3743 3.54788 16.5705C5.38638 18.959 8.4697 21.6668 13.0001 21.6668C17.5305 21.6668 20.6138 18.959 22.4523 16.5705C23.373 15.3743 23.8334 14.7762 23.8334 13.0002C23.8334 11.2242 23.373 10.6261 22.4523 9.42985C20.6138 7.04135 17.5305 4.3335 13.0001 4.3335C8.4697 4.3335 5.38638 7.04135 3.54788 9.42985C2.62713 10.6261 2.16675 11.2242 2.16675 13.0002ZM13.0001 8.93766C10.7564 8.93766 8.93758 10.7565 8.93758 13.0002C8.93758 15.2438 10.7564 17.0627 13.0001 17.0627C15.2437 17.0627 17.0626 15.2438 17.0626 13.0002C17.0626 10.7565 15.2437 8.93766 13.0001 8.93766Z"
        fill="white"
      />
    </svg>
  );
}


================================================
File: src/components/AudioPlayer/AudioPlayer.tsx
================================================
import React, { useState, useRef, useEffect } from "react";
import { PlayCircleOutlined, PauseCircleOutlined } from "@ant-design/icons";

const AudioPlayer = ({ audioFile }: { audioFile: string }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState("0:00");
  const [duration, setDuration] = useState("0:00");
  const [progress, setProgress] = useState(0);
  const audioRef = useRef<HTMLAudioElement>(null);
  const progressBarRef = useRef<HTMLDivElement>(null);

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };

  const handleTimeUpdate = () => {
    if (audioRef.current) {
      const current = audioRef.current.currentTime;
      const duration = audioRef.current.duration;
      setCurrentTime(formatTime(current));
      setProgress((current / duration) * 100);
    }
  };

  const handleLoadedMetadata = () => {
    if (audioRef.current) {
      setDuration(formatTime(audioRef.current.duration));
    }
  };

  const handleProgressBarClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (progressBarRef.current && audioRef.current) {
      const rect = progressBarRef.current.getBoundingClientRect();
      const clickPosition = e.clientX - rect.left;
      const progressBarWidth = progressBarRef.current.offsetWidth;
      const percentage = (clickPosition / progressBarWidth) * 100;
      const newTime = (percentage / 100) * audioRef.current.duration;

      audioRef.current.currentTime = newTime;
      setProgress(percentage);
    }
  };

  const handleProgressBarDrag = (e: React.MouseEvent<HTMLDivElement>) => {
    if (e.buttons === 1) {
      // Left mouse button is pressed
      handleProgressBarClick(e);
    }
  };

  const togglePlay = () => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause();
      } else {
        audioRef.current.play();
      }
      setIsPlaying(!isPlaying);
    }
  };

  useEffect(() => {
    const audioElement = audioRef.current;

    // Cleanup function
    return () => {
      if (audioElement) {
        audioElement.pause();
      }
    };
  }, []);

  return (
    <div className="flex w-full max-w-md items-center gap-3">
      <button
        onClick={togglePlay}
        className="flex-shrink-0 text-primary hover:text-primary/80"
      >
        {isPlaying ? (
          <PauseCircleOutlined className="text-xl" />
        ) : (
          <PlayCircleOutlined className="text-xl" />
        )}
      </button>

      <div className="relative flex-1">
        <audio
          ref={audioRef}
          src={`https://cdn.freesound.org/previews/771/771700_5674468-lq.mp3`}
          //   src={
          //     audioFile
          //       ? `/api/audio/${audioFile}`
          //       : `https://file-examples.com/storage/fe83e8a190674337794c387/2017/11/file_example_MP3_700KB.mp3`
          //   }
          //   src={`/api/audio/${audioFile}`}
          onTimeUpdate={handleTimeUpdate}
          onLoadedMetadata={handleLoadedMetadata}
          onEnded={() => setIsPlaying(false)}
        />
        <div
          ref={progressBarRef}
          className="group relative h-2 w-full cursor-pointer rounded-full bg-gray-200 dark:bg-gray-700"
          onClick={handleProgressBarClick}
          onMouseMove={handleProgressBarDrag}
        >
          {/* Progress bar */}
          <div
            className="absolute left-0 top-0 h-full rounded-full bg-primary transition-all duration-100"
            style={{ width: `${progress}%` }}
          />

          {/* Hover effect and draggable handle */}
          <div
            className="absolute top-1/2 h-4 w-4 -translate-y-1/2 rounded-full bg-primary opacity-0 transition-opacity group-hover:opacity-100"
            style={{ left: `${progress}%`, transform: "translate(-50%, -50%)" }}
          />
        </div>
      </div>

      <span className="min-w-[85px] -ml-3 flex-shrink-0 text-right text-xs text-gray-500 dark:text-gray-400">
        {currentTime} / {duration}
      </span>
    </div>
  );
};

export default AudioPlayer;


================================================
File: src/components/Auth/GoogleSigninButton.tsx
================================================

export default function GoogleSigninButton({ text }: { text: string }) {
  return (
    <button
      className="flex w-full items-center justify-center gap-3.5 rounded-lg border border-stroke bg-gray-2 p-[15px] font-medium hover:bg-opacity-50 dark:border-dark-3 dark:bg-dark-2 dark:hover:bg-opacity-50"
    >
      <span>
        <svg
          width="20"
          height="20"
          viewBox="0 0 20 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g clipPath="url(#clip0_1715_17244)">
            <path
              d="M19.999 10.2216C20.0111 9.53416 19.9387 8.84776 19.7834 8.17725H10.2031V11.8883H15.8266C15.7201 12.539 15.4804 13.1618 15.1219 13.7194C14.7634 14.2769 14.2935 14.7577 13.7405 15.1327L13.7209 15.257L16.7502 17.5567L16.96 17.5772C18.8873 15.8328 19.9986 13.266 19.9986 10.2216"
              fill="#4285F4"
            />
            <path
              d="M10.2016 19.9998C12.9566 19.9998 15.2695 19.1109 16.959 17.5775L13.739 15.133C12.8774 15.722 11.7209 16.1332 10.2016 16.1332C8.91122 16.1258 7.656 15.7203 6.61401 14.9744C5.57201 14.2285 4.79616 13.1799 4.39653 11.9775L4.27694 11.9875L1.12711 14.3764L1.08594 14.4886C1.93427 16.1455 3.23617 17.5384 4.84606 18.5117C6.45596 19.485 8.31039 20.0002 10.202 19.9998"
              fill="#34A853"
            />
            <path
              d="M4.39899 11.9777C4.1758 11.3411 4.06063 10.673 4.05807 9.99996C4.06218 9.32799 4.1731 8.66075 4.38684 8.02225L4.38115 7.88968L1.19269 5.4624L1.0884 5.51101C0.372763 6.90343 0 8.4408 0 9.99987C0 11.5589 0.372763 13.0963 1.0884 14.4887L4.39899 11.9777Z"
              fill="#FBBC05"
            />
            <path
              d="M10.202 3.86687C11.6641 3.84462 13.0783 4.37827 14.1476 5.35583L17.0274 2.60021C15.1804 0.902092 12.7344 -0.0296414 10.202 0.000207357C8.31041 -0.000233694 6.456 0.514977 4.8461 1.48823C3.23621 2.46148 1.93429 3.85441 1.08594 5.51125L4.38555 8.02249C4.78912 6.8203 5.56754 5.77255 6.61107 5.02699C7.6546 4.28143 8.9106 3.87565 10.202 3.86687Z"
              fill="#EB4335"
            />
          </g>
          <defs>
            <clipPath id="clip0_1715_17244">
              <rect width="20" height="20" fill="white" />
            </clipPath>
          </defs>
        </svg>
      </span>
      {text} with Google
    </button>
  );
}


================================================
File: src/components/Auth/OnBoardingForm.tsx
================================================
import { useFormik } from "formik";
import * as Yup from "yup";
import InputGroup from "../FormElements/InputGroup";
import SelectGroupOne from "../FormElements/SelectGroup/SelectGroupOne";
import {
  getIndustriesByCategory,
  getIndustryCategories,
} from "../../utils/Constants/UsefullJSON";

// Common timezones array
const timezones = [
  { value: "UTC", label: "(UTC+00:00) UTC" },
  {
    value: "America/New_York",
    label: "(UTC-05:00) Eastern Time (US & Canada)",
  },
  { value: "America/Chicago", label: "(UTC-06:00) Central Time (US & Canada)" },
  { value: "America/Denver", label: "(UTC-07:00) Mountain Time (US & Canada)" },
  {
    value: "America/Los_Angeles",
    label: "(UTC-08:00) Pacific Time (US & Canada)",
  },
  { value: "Asia/Dubai", label: "(UTC+04:00) Dubai" },
  { value: "Asia/Kolkata", label: "(UTC+05:30) India Standard Time" },
  { value: "Asia/Singapore", label: "(UTC+08:00) Singapore" },
  { value: "Europe/London", label: "(UTC+00:00) London" },
  { value: "Europe/Paris", label: "(UTC+01:00) Paris" },
];

// Common currencies array
const currencies = [
  { value: "USD", label: "US Dollar (USD)" },
  { value: "EUR", label: "Euro (EUR)" },
  { value: "GBP", label: "British Pound (GBP)" },
  { value: "JPY", label: "Japanese Yen (JPY)" },
  { value: "AUD", label: "Australian Dollar (AUD)" },
  { value: "CAD", label: "Canadian Dollar (CAD)" },
  { value: "CHF", label: "Swiss Franc (CHF)" },
  { value: "CNY", label: "Chinese Yuan (CNY)" },
  { value: "INR", label: "Indian Rupee (INR)" },
  { value: "SGD", label: "Singapore Dollar (SGD)" },
];

// Country codes for phone numbers
const countryCodes = [
  { value: "+1", label: "United States (+1)" },
  { value: "+44", label: "United Kingdom (+44)" },
  { value: "+91", label: "India (+91)" },
  { value: "+86", label: "China (+86)" },
  { value: "+81", label: "Japan (+81)" },
  { value: "+971", label: "UAE (+971)" },
  { value: "+65", label: "Singapore (+65)" },
  { value: "+33", label: "France (+33)" },
  { value: "+49", label: "Germany (+49)" },
  { value: "+61", label: "Australia (+61)" },
];

const validationSchema = Yup.object().shape({
  adminName: Yup.string()
    .min(2, "Name must be at least 2 characters")
    .max(50, "Name must be less than 50 characters")
    .required("Admin name is required"),
  timezone: Yup.string().required("Timezone is required"),
  currency: Yup.string().required("Currency is required"),
  countryCode: Yup.string().required("Country code is required"),
  mobileNumber: Yup.string()
    .matches(/^[0-9]{10}$/, "Phone number must be exactly 10 digits")
    .required("Mobile number is required"),
});

interface FormValues {
  adminName: string;
  timezone: string;
  currency: string;
  countryCode: string;
  mobileNumber: string;
  industry: string;
}

export default function OnBoardingForm({
  initialValue = {
    adminName: "",
    timezone: "",
    currency: "",
    countryCode: "",
    mobileNumber: "",
    industry: "",
  },
  setOnBoardingData,
  setIsFinalStep,
  isLoading,
}: {
  initialValue?: FormValues;
  setOnBoardingData: (values: FormValues) => void;
  setIsFinalStep: (value: boolean) => void;
  isLoading: boolean;
}) {
  const formik = useFormik<FormValues>({
    initialValues: initialValue,
    validationSchema,
    onSubmit: (values, { setSubmitting }) => {
      setOnBoardingData(values);
      setIsFinalStep(true);
      setSubmitting(false);
    },
  });

  const categories = getIndustryCategories();
  const groupedOptions = categories.map((category) => ({
    label: category,
    value: category,
    options: getIndustriesByCategory(category).map((industry) => ({
      value: industry.value,
      label: industry.label,
    })),
  }));

  return (
    <form onSubmit={formik.handleSubmit} className="w-full max-w-2xl mx-auto">
      <div className="space-y-6">
        {/* Admin Name */}
        <InputGroup
          label="Admin name"
          name="adminName"
          type="text"
          placeholder="Enter admin/owner name"
          required
          value={formik.values.adminName}
          onChange={formik.handleChange}
        />
        {formik.touched.adminName && formik.errors.adminName && (
          <div className="mt-1 text-sm text-red-500">
            {formik.errors.adminName}
          </div>
        )}

        {/* Industry Types */}
        <SelectGroupOne
          label="Industry Type"
          options={groupedOptions}
          required
          selectedOption={formik.values.industry}
          setSelectedOption={(value) => formik.setFieldValue("industry", value)}
          isGrouped
        />
        {formik.touched.timezone && formik.errors.timezone && (
          <div className="mt-1 text-sm text-red-500">
            {formik.errors.timezone}
          </div>
        )}

        {/* Timezone */}
        <SelectGroupOne
          label="Timezone"
          options={timezones}
          required
          selectedOption={formik.values.timezone}
          setSelectedOption={(value) => formik.setFieldValue("timezone", value)}
        />
        {formik.touched.timezone && formik.errors.timezone && (
          <div className="mt-1 text-sm text-red-500">
            {formik.errors.timezone}
          </div>
        )}

        {/* Currency */}
        <SelectGroupOne
          label="Currency"
          options={currencies}
          required
          selectedOption={formik.values.currency}
          setSelectedOption={(value) => formik.setFieldValue("currency", value)}
        />
        {formik.touched.currency && formik.errors.currency && (
          <div className="mt-1 text-sm text-red-500">
            {formik.errors.currency}
          </div>
        )}

        {/* Mobile Number */}
        <div className="flex gap-4">
          <div className="w-1/3">
            <SelectGroupOne
              label="Country Code"
              options={countryCodes}
              required
              selectedOption={formik.values.countryCode}
              setSelectedOption={(value) =>
                formik.setFieldValue("countryCode", value)
              }
            />
          </div>
          <div className="w-2/3">
            <InputGroup
              label="Mobile number"
              name="mobileNumber"
              type="tel"
              placeholder="Enter mobile number"
              required
              value={formik.values.mobileNumber}
              onChange={formik.handleChange}
            />
          </div>
        </div>
        {(formik.touched.countryCode && formik.errors.countryCode) ||
          (formik.touched.mobileNumber && formik.errors.mobileNumber && (
            <div className="mt-1 text-sm text-red-500">
              {formik.errors.countryCode || formik.errors.mobileNumber}
            </div>
          ))}

        {/* Submit Button */}
        <div className="pt-4">
          <button
            type="submit"
            disabled={formik.isSubmitting}
            className="flex w-full cursor-pointer items-center justify-center gap-2 rounded-lg bg-primary p-4 font-medium text-white transition hover:bg-opacity-90 disabled:opacity-70"
          >
            {formik.isSubmitting ? "Submitting..." : "Create Account"}
          </button>
        </div>
      </div>
    </form>
  );
}


================================================
File: src/components/Auth/SignUpForm.tsx
================================================
import { useFormik } from "formik";
import { useState } from "react";
import * as Yup from "yup";
import { FaRegEye } from "react-icons/fa6";
import { IoEyeOffOutline } from "react-icons/io5";

const validationSchema = Yup.object().shape({
  companyName: Yup.string()
    .min(2, "Company name must be at least 2 characters")
    .max(50, "Company name must be less than 50 characters")
    .required("Organization name is required"),
  email: Yup.string()
    .email("Invalid email address")
    .required("Email is required"),
  password: Yup.string()
    .min(8, "Password must be at least 8 characters")
    .matches(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,
      "Password must contain at least one uppercase letter, one lowercase letter, and one number"
    )
    .required("Password is required"),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref("password")], "Passwords must match")
    .required("Please confirm your password"),
});

interface FormValues {
  companyName: string;
  email: string;
  password: string;
  confirmPassword: string;
}

export default function SignUpForm({
  initialValue,
  setSignUpData,
  setIsFinalStep,
}: any) {
  const formik = useFormik<FormValues>({
    initialValues: initialValue,
    validationSchema,
    onSubmit: (values, { setSubmitting }) => {
      // Handle form submission here
      setSignUpData(values);
      setIsFinalStep(true);
    },
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword);
  };
  return (
    <form onSubmit={formik.handleSubmit}>
      {/* Organization Name */}
      <div className="mb-4">
        <label
          htmlFor="companyName"
          className="mb-2.5 block font-medium text-dark dark:text-white"
        >
          Organization name
        </label>
        <div className="relative">
          <input
            type="text"
            id="companyName"
            name="companyName"
            placeholder="Enter organization / company name"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.companyName}
            className={`w-full rounded-lg border border-stroke bg-transparent py-[15px] pl-6 pr-11 font-medium outline-none transition focus:border-primary focus-visible:shadow-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary ${
              formik.touched.companyName && formik.errors.companyName
                ? "border-red-500"
                : ""
            }`}
          />
          <span className="absolute right-4.5 top-1/2 -translate-y-1/2">
            <svg
              className="fill-current"
              width="22"
              height="22"
              viewBox="0 0 22 22"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M10.9975 1.146C8.59278 1.146 6.64335 3.09542 6.64335 5.50016C6.64335 7.9049 8.59278 9.85433 10.9975 9.85433C13.4023 9.85433 15.3517 7.9049 15.3517 5.50016C15.3517 3.09542 13.4023 1.146 10.9975 1.146ZM8.01835 5.50016C8.01835 3.85481 9.35217 2.521 10.9975 2.521C12.6429 2.521 13.9767 3.85481 13.9767 5.50016C13.9767 7.14551 12.6429 8.47933 10.9975 8.47933C9.35217 8.47933 8.01835 7.14551 8.01835 5.50016Z"
                fill=""
              ></path>
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M10.9975 11.2293C8.87676 11.2293 6.92287 11.7114 5.47501 12.5258C4.04871 13.3281 2.97669 14.5441 2.97669 16.0418L2.97662 16.1353C2.97559 17.2003 2.97429 18.537 4.14673 19.4917C4.72374 19.9616 5.53096 20.2958 6.62154 20.5165C7.71518 20.7379 9.14056 20.8543 10.9975 20.8543C12.8545 20.8543 14.2799 20.7379 15.3735 20.5165C16.4641 20.2958 17.2713 19.9616 17.8483 19.4917C19.0207 18.537 19.0194 17.2003 19.0184 16.1353L19.0184 16.0418C19.0184 14.5441 17.9463 13.3281 16.52 12.5258C15.0722 11.7114 13.1183 11.2293 10.9975 11.2293ZM4.35169 16.0418C4.35169 15.2614 4.92128 14.4149 6.14912 13.7242C7.35542 13.0457 9.06819 12.6043 10.9975 12.6043C12.9269 12.6043 14.6396 13.0457 15.8459 13.7242C17.0738 14.4149 17.6434 15.2614 17.6434 16.0418C17.6434 17.2406 17.6064 17.9155 16.9801 18.4255C16.6404 18.7021 16.0726 18.9721 15.1007 19.1688C14.1318 19.3649 12.8072 19.4793 10.9975 19.4793C9.18781 19.4793 7.8632 19.3649 6.89433 19.1688C5.92242 18.9721 5.35463 18.7021 5.01498 18.4255C4.38864 17.9155 4.35169 17.2406 4.35169 16.0418Z"
                fill=""
              ></path>
            </svg>
          </span>
        </div>
        {formik.touched.companyName && formik.errors.companyName && (
          <div className="mt-1 text-sm text-red-500">
            {formik.errors.companyName}
          </div>
        )}
      </div>

      {/* Email */}
      <div className="mb-4">
        <label
          htmlFor="email"
          className="mb-2.5 block font-medium text-dark dark:text-white"
        >
          Email
        </label>
        <div className="relative">
          <input
            type="email"
            id="email"
            name="email"
            placeholder="Enter your email"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.email}
            className={`w-full rounded-lg border border-stroke bg-transparent py-[15px] pl-6 pr-11 font-medium outline-none transition focus:border-primary focus-visible:shadow-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary ${
              formik.touched.email && formik.errors.email
                ? "border-red-500"
                : ""
            }`}
          />
          <span className="absolute right-4.5 top-1/2 -translate-y-1/2">
            <svg
              className="fill-current"
              width="22"
              height="22"
              viewBox="0 0 22 22"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M9.11756 2.979H12.8877C14.5723 2.97899 15.9066 2.97898 16.9509 3.11938C18.0256 3.26387 18.8955 3.56831 19.5815 4.25431C20.2675 4.94031 20.5719 5.81018 20.7164 6.8849C20.8568 7.92918 20.8568 9.26351 20.8568 10.9481V11.0515C20.8568 12.7362 20.8568 14.0705 20.7164 15.1148C20.5719 16.1895 20.2675 17.0594 19.5815 17.7454C18.8955 18.4314 18.0256 18.7358 16.9509 18.8803C15.9066 19.0207 14.5723 19.0207 12.8876 19.0207H9.11756C7.43295 19.0207 6.09861 19.0207 5.05433 18.8803C3.97961 18.7358 3.10974 18.4314 2.42374 17.7454C1.73774 17.0594 1.4333 16.1895 1.28881 15.1148C1.14841 14.0705 1.14842 12.7362 1.14844 11.0516V10.9481C1.14842 9.26351 1.14841 7.92918 1.28881 6.8849C1.4333 5.81018 1.73774 4.94031 2.42374 4.25431C3.10974 3.56831 3.97961 3.26387 5.05433 3.11938C6.09861 2.97898 7.43294 2.97899 9.11756 2.979ZM5.23755 4.48212C4.3153 4.60611 3.78396 4.83864 3.39602 5.22658C3.00807 5.61452 2.77554 6.14587 2.65155 7.06812C2.5249 8.01014 2.52344 9.25192 2.52344 10.9998C2.52344 12.7478 2.5249 13.9895 2.65155 14.9316C2.77554 15.8538 3.00807 16.3852 3.39602 16.7731C3.78396 17.161 4.3153 17.3936 5.23755 17.5176C6.17957 17.6442 7.42135 17.6457 9.16927 17.6457H12.8359C14.5839 17.6457 15.8256 17.6442 16.7677 17.5176C17.6899 17.3936 18.2213 17.161 18.6092 16.7731C18.9971 16.3852 19.2297 15.8538 19.3537 14.9316C19.4803 13.9895 19.4818 12.7478 19.4818 10.9998C19.4818 9.25192 19.4803 8.01014 19.3537 7.06812C19.2297 6.14587 18.9971 5.61452 18.6092 5.22658C18.2213 4.83864 17.6899 4.60611 16.7677 4.48212C15.8256 4.35546 14.5839 4.354 12.8359 4.354H9.16927C7.42135 4.354 6.17958 4.35546 5.23755 4.48212ZM4.97445 6.89304C5.21753 6.60135 5.65104 6.56194 5.94273 6.80502L7.92172 8.45418C8.77693 9.16685 9.37069 9.66005 9.87197 9.98246C10.3572 10.2945 10.6863 10.3993 11.0026 10.3993C11.3189 10.3993 11.648 10.2945 12.1332 9.98246C12.6345 9.66005 13.2283 9.16685 14.0835 8.45417L16.0625 6.80502C16.3542 6.56194 16.7877 6.60135 17.0308 6.89304C17.2738 7.18473 17.2344 7.61825 16.9427 7.86132L14.9293 9.5392C14.1168 10.2163 13.4582 10.7651 12.877 11.1389C12.2716 11.5283 11.6819 11.7743 11.0026 11.7743C10.3233 11.7743 9.73364 11.5283 9.12818 11.1389C8.54696 10.7651 7.88843 10.2163 7.07594 9.5392L5.06248 7.86132C4.77079 7.61825 4.73138 7.18473 4.97445 6.89304Z"
                fill=""
              />
            </svg>
          </span>
        </div>
        {formik.touched.email && formik.errors.email && (
          <div className="mt-1 text-sm text-red-500">{formik.errors.email}</div>
        )}
      </div>

      {/* Password */}
      <div className="mb-4">
        <label
          htmlFor="password"
          className="mb-2.5 block font-medium text-dark dark:text-white"
        >
          Password
        </label>
        <div className="relative">
          <input
            type={showPassword ? "text" : "password"}
            id="password"
            name="password"
            placeholder="Enter your password"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.password}
            className={`w-full rounded-lg border border-stroke bg-transparent py-[15px] pl-6 pr-11 font-medium outline-none transition focus:border-primary focus-visible:shadow-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary ${
              formik.touched.password && formik.errors.password
                ? "border-red-500"
                : ""
            }`}
          />
          <button
            type="button"
            onClick={togglePasswordVisibility}
            className="absolute right-4.5 top-1/2 -translate-y-1/2 focus:outline-none"
          >
            {!showPassword ? (
              <IoEyeOffOutline className="h-5 w-5 text-[#6b7280]" />
            ) : (
              <FaRegEye className="h-5 w-5 text-[#6b7280]" />
            )}
          </button>
        </div>
        {formik.touched.password && formik.errors.password && (
          <div className="mt-1 text-sm text-red-500">
            {formik.errors.password}
          </div>
        )}
      </div>

      {/* Confirm Password */}
      <div className="mb-4">
        <label
          htmlFor="confirmPassword"
          className="mb-2.5 block font-medium text-dark dark:text-white"
        >
          Confirm Password
        </label>
        <div className="relative">
          <input
            type={showConfirmPassword ? "text" : "password"}
            id="confirmPassword"
            name="confirmPassword"
            placeholder="Confirm your password"
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            value={formik.values.confirmPassword}
            className={`w-full rounded-lg border border-stroke bg-transparent py-[15px] pl-6 pr-11 font-medium outline-none transition focus:border-primary focus-visible:shadow-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary ${
              formik.touched.confirmPassword && formik.errors.confirmPassword
                ? "border-red-500"
                : ""
            }`}
          />
          <button
            type="button"
            onClick={toggleConfirmPasswordVisibility}
            className="absolute right-4.5 top-1/2 -translate-y-1/2 focus:outline-none"
          >
            {!showConfirmPassword ? (
              <IoEyeOffOutline className="h-5 w-5 text-[#6b7280]" />
            ) : (
              <FaRegEye className="h-5 w-5 text-[#6b7280]" />
            )}
          </button>
        </div>
        {formik.touched.confirmPassword && formik.errors.confirmPassword && (
          <div className="mt-1 text-sm text-red-500">
            {formik.errors.confirmPassword}
          </div>
        )}
      </div>

      {/* Submit Button */}
      <div className="mb-4.5 mt-6">
        <button
          type="submit"
          disabled={formik.isSubmitting}
          className="flex w-full cursor-pointer items-center justify-center gap-2 rounded-lg bg-primary p-4 font-medium text-white transition hover:bg-opacity-90 disabled:opacity-70"
        >
          {formik.isSubmitting ? "Submitting..." : "Next"}
        </button>
      </div>
    </form>
  );
}


================================================
File: src/components/Auth/SigninWithPassword.tsx
================================================
import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";
import { FaRegEye } from "react-icons/fa6";
import { IoEyeOffOutline } from "react-icons/io5";
import { LocalStorage } from "../../utils/localStorage";

const SigninWithPassword = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState({
    remember: false,
  });
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [showPassword, setShowPassword] = useState(false);

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  const handleChange = (e: any) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e: any) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // const { data, error } = await API.postAuthAPI(formData, END_POINT.LOGIN);
      // if (error || !data) throw Error(error);
      // const user = data.user;
      // LocalStorage.setStringData("refreshToken", data.refreshToken);
      // LocalStorage.setStringData("accessToken", data.token);
      // LocalStorage.setStringData("user", JSON.stringify(user));

      // toast.success(`Welcome back ${user?.name}!`);
      toast.success(`Welcome back!`);
      navigate("/"); // Redirect to dashboard
    } catch (error: any) {
      localStorage.clear();
      toast.error(error || "Login failed. Please check your credentials.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 text-white">
      <div>
        <label className="mb-2.5 block font-medium text-black dark:text-white">
          Email
        </label>
        <input
          type="email"
          name="email"
          placeholder="Enter your email"
          value={formData.email}
          onChange={handleChange}
          className="w-full rounded-lg border border-stroke bg-transparent py-4 pl-6 pr-10 outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
          required
        />
      </div>

      <div>
        <label className="mb-2.5 block font-medium text-black dark:text-white">
          Password
        </label>
        <div className="relative">
          <input
            type={showPassword ? "text" : "password"}
            name="password"
            placeholder="Enter your password"
            value={formData.password}
            onChange={handleChange}
            className="w-full  rounded-lg border border-stroke bg-transparent py-4 pl-6 pr-10 outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-form-input dark:focus:border-primary"
            required
          />
          <button
            type="button"
            onClick={togglePasswordVisibility}
            className="absolute right-4.5 top-1/2 -translate-y-1/2 focus:outline-none"
          >
            {!showPassword ? (
              <IoEyeOffOutline className="h-5 w-5 text-[#6b7280]" />
            ) : (
              <FaRegEye className="h-5 w-5 text-[#6b7280]" />
            )}
          </button>
        </div>
      </div>

      <div className="mb-6 flex items-center justify-between gap-2 py-2">
        <label
          htmlFor="remember"
          className="flex cursor-pointer select-none items-center font-satoshi text-base font-medium text-dark dark:text-white"
        >
          <input
            type="checkbox"
            name="remember"
            id="remember"
            className="peer sr-only"
            checked={data.remember}
            onChange={(e) =>
              setData((prev) => ({ ...prev, remember: e.target.checked }))
            }
          />
          <span
            className={`mr-2.5 inline-flex h-5.5 w-5.5 items-center justify-center rounded-md border border-stroke bg-white text-white text-opacity-0 peer-checked:border-primary peer-checked:bg-primary peer-checked:text-opacity-100 dark:border-stroke-dark dark:bg-white/5 ${
              data.remember ? "bg-primary" : ""
            }`}
          >
            <svg
              width="10"
              height="7"
              viewBox="0 0 10 7"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M9.70692 0.292787C9.89439 0.480314 9.99971 0.734622 9.99971 0.999786C9.99971 1.26495 9.89439 1.51926 9.70692 1.70679L4.70692 6.70679C4.51939 6.89426 4.26508 6.99957 3.99992 6.99957C3.73475 6.99957 3.48045 6.89426 3.29292 6.70679L0.292919 3.70679C0.110761 3.51818 0.00996641 3.26558 0.0122448 3.00339C0.0145233 2.74119 0.119692 2.49038 0.3051 2.30497C0.490508 2.11956 0.741321 2.01439 1.00352 2.01211C1.26571 2.00983 1.51832 2.11063 1.70692 2.29279L3.99992 4.58579L8.29292 0.292787C8.48045 0.105316 8.73475 0 8.99992 0C9.26508 0 9.51939 0.105316 9.70692 0.292787Z"
                fill="currentColor"
              />
            </svg>
          </span>
          Remember me
        </label>

        <Link
          to="/forgot-password"
          className="select-none font-satoshi text-base font-medium text-dark underline duration-300 hover:text-primary dark:text-white dark:hover:text-primary"
        >
          Forgot Password?
        </Link>
      </div>

      <div className="mt-5">
        <button
          type="submit"
          disabled={isLoading}
          className="w-full cursor-pointer rounded-lg border border-primary bg-primary p-4 text-white transition hover:bg-opacity-90 disabled:cursor-not-allowed disabled:bg-opacity-50"
        >
          {isLoading ? "Signing in..." : "Sign in"}
        </button>
      </div>
    </form>
  );
};

export default SigninWithPassword;


================================================
File: src/components/Auth/WelcomePage.tsx
================================================
import { Link } from "react-router-dom";

export default function WelcomePage() {
  return (
    <>
      <div className="hidden w-full p-7.5 xl:block xl:w-1/2">
        <div className="custom-gradient-1 overflow-hidden rounded-2xl px-12.5 pt-12.5 dark:!bg-dark-2 dark:bg-none">
          <Link className="mb-10 inline-block" to="/">
            <img
              className="hidden dark:block"
              src={"/images/logo/crmLogoFull.png"}
              alt="Logo"
              width={176}
              height={22}
              style={{ width: "209px", height: "auto", borderRadius: "33px" }}
            />
            <img
              className="dark:hidden"
              src={"/images/logo/crmLogoFull.png"}
              alt="Logo"
              width={176}
              height={32}
              style={{ width: "auto", height: "auto", borderRadius: "33px" }}
            />
          </Link>
          <p className="mb-3 text-xl font-medium text-dark dark:text-white">
            Sign in to your account
          </p>

          <h1 className="mb-4 text-2xl font-bold text-dark dark:text-white sm:text-heading-3">
            Welcome Back!
          </h1>

          <p className="w-full max-w-[375px] font-medium text-dark-4 dark:text-dark-6">
            Please sign in to your account by completing the necessary fields
            below
          </p>

          <div className="mt-31">
            <img
              src={"/images/grids/grid-02.svg"}
              alt="Logo"
              width={405}
              height={325}
              className="mx-auto dark:opacity-30"
            />
          </div>
        </div>
      </div>{" "}
    </>
  );
}


================================================
File: src/components/Auth/SignUp/index.tsx
================================================
import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import GoogleSigninButton from "../GoogleSigninButton";
import SignUPForm from "../SignUpForm";
import WelcomePage from "../WelcomePage";
import { Steps } from "antd";
import OnBoardingForm from "../OnBoardingForm";
import { API } from "../../../api";
import { END_POINT } from "../../../api/UrlProvider";
import { LocalStorage } from "../../../utils/localStorage";

const items = [
  {
    title: "Sign up",
  },
  {
    title: "Almost there",
  },
];

export default function SignUp() {
  const navigate = useNavigate();
  const [signUpData, setSignUpData] = useState({
    companyName: "",
    email: "",
    password: "",
    confirmPassword: "",
  });

  const [onBoardingData, setOnBoardingData] = useState({
    adminName: "",
    timezone: "Asia/Kolkata",
    currency: "INR",
    countryCode: "+91",
    mobileNumber: "",
    industry: "",
  });

  const [isFinalStep, setIsFinalStep] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleOnBoardingData = async (formData: any) => {
    setIsLoading(true);
    try {
      // Format the data according to the API payload structure
      const payload = {
        companyData: {
          name: signUpData.companyName,
          industry: "Software industry", // You might want to add this to your form
          phone: formData.countryCode + formData.mobileNumber,
          email: signUpData.email,
          settings: {
            timezone: formData.timezone,
            currency: formData.currency,
            language: "en", // Default language
          },
        },
        userData: {
          name: formData.adminName,
          email: signUpData.email,
          password: signUpData.password,
          phone: formData.countryCode + formData.mobileNumber,
        },
      };

      const { data, error } = await API.postAuthAPI(payload, END_POINT.SIGNUP);

      if (error || !data) throw Error(error);

      // Handle successful signup
      toast.success("Account created successfully!");
      LocalStorage.setStringData("refreshToken", data.refreshToken);
      LocalStorage.setStringData("accessToken", data.token);
      LocalStorage.setStringData("user", JSON.stringify(data.user));
      navigate("/");
    } catch (error: any) {
      toast.error(error || "Signup failed. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="linePattern_Container dark overflow-auto p-5 md:p-0">
      <div
        className={`m-auto flex h-screen w-full overflow-hidden md:items-center md:justify-center ${
          isFinalStep ? "max-w-md" : "md:max-w-xl xl:max-w-4xl"
        }`}
      >
        <div className="flex w-full flex-col justify-center gap-5 bg-transparent">
          {isFinalStep && (
            <div className="w-full rounded-md bg-transparent px-5 py-3 shadow-card xl:bg-gray-dark">
              <Steps current={1} items={items} />
            </div>
          )}

          <div className="flex items-center bg-transparent shadow-1 shadow-card xl:bg-gray-dark">
            {!isFinalStep ? (
              <div className="w-full p-5 xl:w-1/2 xl:p-9.5 xl:pr-0">
                <GoogleSigninButton text="Sign up" />

                <div className="my-6 flex items-center justify-center">
                  <span className="block h-px w-full bg-stroke dark:bg-dark-3"></span>
                  <div className="block w-full min-w-fit bg-white px-3 text-center font-medium dark:bg-gray-dark">
                    Or sign up with email
                  </div>
                  <span className="block h-px w-full bg-stroke dark:bg-dark-3"></span>
                </div>

                <SignUPForm
                  initialValue={signUpData}
                  setSignUpData={setSignUpData}
                  setIsFinalStep={setIsFinalStep}
                />
                <div className="mt-6 text-center">
                  <p>
                    Already have an account?{" "}
                    <Link to="/login" className="text-primary">
                      Sign In
                    </Link>
                  </p>
                </div>
              </div>
            ) : (
              <div className="xl:p-9.5">
                <OnBoardingForm
                  setOnBoardingData={handleOnBoardingData}
                  setIsFinalStep={setIsFinalStep}
                  initialValue={onBoardingData}
                  isLoading={isLoading}
                />
              </div>
            )}
            {!isFinalStep && <WelcomePage />}
          </div>
        </div>
        <style>{`
          // Basic dark mode styles for Steps
          .dark .ant-steps .ant-steps-item-title {
            color: rgba(255, 255, 255, 0.85) !important;
          }

          // Current step styles
          .dark .ant-steps .ant-steps-item-process .ant-steps-item-icon {
            background-color: #5750f1 !important;
            border-color: #5750f1 !important;
          }
          .dark
            .ant-steps
            .ant-steps-item-process
            .ant-steps-item-icon
            .ant-steps-icon {
            color: #fff !important;
          }
          .dark .ant-steps .ant-steps-item-process .ant-steps-item-title {
            color: #fff !important;
          }

          // Completed step styles
          .dark .ant-steps .ant-steps-item-finish .ant-steps-item-icon {
            background-color: transparent !important;
            border-color: #5750f1 !important;
          }
          .dark
            .ant-steps
            .ant-steps-item-finish
            .ant-steps-item-icon
            .ant-steps-icon {
            color: #5750f1 !important;
          }
          .dark .ant-steps .ant-steps-item-finish .ant-steps-item-title {
            color: rgba(255, 255, 255, 0.85) !important;
          }

          // Waiting step styles
          .dark .ant-steps .ant-steps-item-wait .ant-steps-item-icon {
            background-color: transparent !important;
            border-color: rgba(255, 255, 255, 0.3) !important;
          }
          .dark
            .ant-steps
            .ant-steps-item-wait
            .ant-steps-item-icon
            .ant-steps-icon {
            color: rgba(255, 255, 255, 0.3) !important;
          }
          .dark .ant-steps .ant-steps-item-wait .ant-steps-item-title {
            color: rgba(255, 255, 255, 0.45) !important;
          }

          // Step connector styles
          .dark
            .ant-steps
            .ant-steps-item:not(.ant-steps-item-process)
            .ant-steps-item-container[role="button"]:hover
            .ant-steps-item-title {
            color: #5750f1 !important;
          }
          .dark
            .ant-steps
            .ant-steps-item-finish
            > .ant-steps-item-container
            > .ant-steps-item-tail::after {
            background-color: #5750f1 !important;
          }
          .dark
            .ant-steps
            .ant-steps-item-wait
            > .ant-steps-item-container
            > .ant-steps-item-tail::after {
            background-color: rgba(255, 255, 255, 0.3) !important;
          }

          // Description text styles if you have descriptions
          .dark .ant-steps .ant-steps-item-description {
            color: rgba(255, 255, 255, 0.45) !important;
          }
        `}</style>
      </div>
    </div>
  );
}


================================================
File: src/components/Auth/Signin/index.tsx
================================================
"use client";
import { Link } from "react-router-dom";
import GoogleSigninButton from "../GoogleSigninButton";
import SigninWithPassword from "../SigninWithPassword";
import WelcomePage from "../WelcomePage";

export default function Signin() {
  return (
    <div className="linePattern_Container dark overflow-auto p-5 md:p-0">
      <div className="m-auto flex h-screen w-full overflow-hidden md:max-w-xl md:items-center md:justify-center xl:max-w-4xl">
        <div className="flex w-full items-center bg-transparent shadow-1 shadow-card xl:bg-gray-dark">
          {" "}
          <div className="w-full p-5 xl:w-1/2 xl:p-9.5 xl:pr-0">
            <GoogleSigninButton text="Sign in" />

            <div className="my-6 flex items-center justify-center">
              <span className="block h-px w-full bg-stroke dark:bg-dark-3"></span>
              <div className="block w-full min-w-fit bg-white px-3 text-center font-medium dark:bg-gray-dark">
                Or sign in with email
              </div>
              <span className="block h-px w-full bg-stroke dark:bg-dark-3"></span>
            </div>

            <div>
              <SigninWithPassword />
            </div>

            <div className="mt-6 text-center">
              <p>
                Don’t have any account?{" "}
                <Link to="/signup" className="text-primary">
                  Sign Up
                </Link>
              </p>
            </div>
          </div>
          <WelcomePage />
        </div>
      </div>
    </div>
  );
}


================================================
File: src/components/Breadcrumbs/Breadcrumb.tsx
================================================
import { Link } from "react-router-dom";

interface BreadcrumbProps {
  pageName: string;
  onlyHeading?: boolean;
}

const Breadcrumb = ({ pageName, onlyHeading = true }: BreadcrumbProps) => {
  return (
    <div className="sm:mb-6 mb-4 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
      <h2 className="sm:text-[26px] text-[22px] font-bold leading-[30px] text-dark dark:text-white">
        {pageName}
      </h2>

      {!onlyHeading && (
        <nav>
          <ol className="flex items-center gap-2">
            <li>
              <Link className="font-medium" to="/">
                Dashboard /
              </Link>
            </li>
            <li className="font-medium text-primary">{pageName}</li>
          </ol>
        </nav>
      )}
    </div>
  );
};

export default Breadcrumb;


================================================
File: src/components/BulkMessage/BulkMessage.tsx
================================================
import React, { useState, useEffect } from "react";
import CustomAntdTable from "../../components/Tables/CustomAntdTable";
import SelectGroupOne from "../../components/FormElements/SelectGroup/SelectGroupOne";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import FileUploadFillType from "../../components/FormElements/FileUpload/FileUploadFillType";
import TextAreaCustom from "../FormElements/TextArea/TextAreaCustom";
import InputGroup from "../../components/FormElements/InputGroup";
import { getStoredAgents, getStoredStatus } from "../../api/commonAPI";

interface BulkMessageProps {
  data?: any[];
  type: "active" | "all" | "contacts" | "none";
  mode?: "sms" | "whatsapp";
  onRefresh?: () => void;
  showActionControl?: boolean;
}

const templateOptions = [
  { value: "template1", label: "Template 1" },
  { value: "template2", label: "Template 2" },
];

const BulkMessage: React.FC<BulkMessageProps> = ({
  data,
  type,
  mode = "whatsapp",
  showActionControl = true,
  onRefresh,
}) => {
  const agentOptions = getStoredAgents(true);
  const baseOptions = getStoredStatus(true);
  const [selectedRows, setSelectedRows] = useState<string[]>([]);
  const [formData, setFormData] = useState({
    status: "",
    agent: "",
    template: "",
    message: "",
  });
  const [charCount, setCharCount] = useState(0);
  const [smsCount, setSmsCount] = useState(1);

  useEffect(() => {
    // if (mode === "sms") {
    const count = formData.message.length;
    setCharCount(count);
    // Calculate SMS count (160 chars per SMS)
    setSmsCount(Math.ceil(count / 160) || 1);
    // }
  }, [formData.message, mode]);

  const getStatusOptions = () => {
    if (type === "active") {
      return baseOptions.filter((opt) => opt.label.toLowerCase() !== "lost");
    }
    return baseOptions;
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const columns = [
    {
      title: "Name",
      dataIndex: "name",
      key: "name",
    },
    {
      title: "Number",
      dataIndex: "number",
      key: "number",
    },
    {
      title: "Status",
      dataIndex: "status",
      key: "status",
    },
    {
      title: "Agent",
      dataIndex: "agent",
      key: "agent",
    },
    {
      title: "Followup date",
      dataIndex: "followupDate",
      key: "followupDate",
      render: (date: string) => new Date(date).toLocaleString(),
    },
  ];

  const handleSubmit = async () => {
    console.log("Submitting:", { type, formData, selectedRows });
  };

  const handleSend = async () => {
    console.log("Sending message to:", selectedRows);
  };

  return (
    <div className="w-full rounded-lg bg-white dark:bg-gray-800">
      {/* Action Controls Section */}
      {showActionControl && (
        <div className="mb-2 rounded-lg border border-gray-100 bg-gray-50 p-3 dark:border-gray-700 dark:bg-gray-900 sm:px-6">
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
            <SelectGroupOne
              label="Status"
              options={getStatusOptions()}
              selectedOption={formData.status}
              setSelectedOption={(value) => handleSelectChange("status", value)}
              placeholder="Select Status"
            />

            <SelectGroupOne
              label="Agent"
              options={agentOptions}
              selectedOption={formData.agent}
              setSelectedOption={(value) => handleSelectChange("agent", value)}
              placeholder="Select Agent"
            />

            <ButtonDefault
              label="Submit"
              onClick={handleSubmit}
              variant="primary"
              customClasses="self-end w-full"
            />
          </div>
        </div>
      )}

      {/* Message Section */}
      <div className="mb-2 rounded-lg border border-gray-100 bg-gray-50 p-3 dark:border-gray-700 dark:bg-gray-900 sm:px-6">
        <div className="grid grid-cols-1 gap-6 lg:grid-cols-12">
          {/* Message Input */}
          <div className={"lg:col-span-6"}>
            <TextAreaCustom
              label="Message"
              name="message"
              value={formData.message}
              onChange={(e) => handleSelectChange("message", e.target.value)}
              placeholder="Enter Message"
              rows={5}
            />
          </div>

          <div className="flex flex-col gap- justify-between lg:col-span-3">
            {/* Template Selection */}
            <SelectGroupOne
              label="Select Template"
              options={templateOptions}
              selectedOption={formData.template}
              setSelectedOption={(value) =>
                handleSelectChange("template", value)
              }
              placeholder="Choose Template"
            />
            {/* Character Count */}
            <InputGroup
              label="Characters"
              type="text"
              value={charCount.toString()}
              readOnly
            />
          </div>

          {/* <div className="lg:col-span-2"></div> */}

          {/* Image Upload and Send */}
          <div className="flex flex-col justify-between lg:col-span-3">
            {mode !== "sms" ? (
              <div>
                <label className="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-200">
                  Image
                </label>
                <FileUploadFillType
                  accept="image/*"
                  tooltipInfo="Upload an image file"
                />
              </div>
            ) : (
              <InputGroup
                label="No of SMS"
                type="text"
                value={smsCount.toString()}
                readOnly
              />
            )}

            <ButtonDefault
              label="Send"
              onClick={handleSend}
              variant="primary"
              customClasses="w-full mt-auto"
            />
          </div>
        </div>
      </div>

      {/* Table Section */}
      <div className="rounded-lg border border-gray-100 dark:border-gray-700">
        <CustomAntdTable
          columns={columns}
          dataSource={data}
          pagination={{
            pageSize: 10,
            total: data?.length,
          }}
        />
      </div>
    </div>
  );
};

export default BulkMessage;


================================================
File: src/components/Buttons/ButtonDefault.tsx
================================================
"use client";
import { Link } from "react-router-dom";
import useScreenHook from "../../hooks/useScreenHook";

interface ButtonPropTypes {
  label: string;
  link?: string | null;
  mode?: "link" | "button";
  type?: "button" | "submit" | "reset" | undefined;
  customClasses?: string;
  size?: "sm" | "md" | "lg";
  children?: React.ReactNode;
  disabled?: boolean;
  onClick?: () => void;
  variant?: "primary" | "secondary" | "outline";
  icon?: React.ReactNode;
  iconPosition?: "left" | "right";
  fullWidth?: boolean;
  loading?: boolean;
  target?: "_self" | "_blank" | "_parent" | "_top";
  rel?: string;
  title?: string;
  ariaLabel?: string;
}

const ButtonDefault = ({
  label,
  link = undefined,
  mode = "button",
  type = "button",
  customClasses = "",
  size = "md",
  variant = "primary",
  disabled = false,
  onClick = () => {},
  children,
  icon,
  iconPosition = "left",
  fullWidth = false,
  loading = false,
  target = "_self",
  rel = "",
  title,
  ariaLabel,
}: ButtonPropTypes) => {
  const { deviceType } = useScreenHook();
  return (
    <>
      {mode === "link" ? (
        <Link
          className={`${customClasses} ${
            size === "sm" ? "text-xs" : size === "md" ? "text-base" : "text-lg"
          } ${
            variant === "primary"
              ? "bg-primary text-white "
              : variant === "secondary"
                ? "bg-green text-white"
                : variant === "outline"
                  ? "border border-stroke-dark px-3 py-3 font-medium text-dark hover:shadow-1 dark:border-dark-3 dark:text-white"
                  : "bg-transparent text-black"
          } ${
            disabled ? "cursor-not-allowed opacity-50" : "cursor-pointer"
          } flex max-h-[50px] w-full min-w-[130px] items-center justify-center  gap-2.5 rounded-md py-3 text-center font-medium transition-colors duration-200 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
            fullWidth ? "!w-full" : "!max-w-[130px]"
          }`}
          to={link || "#"}
          onClick={() => {
            if (!loading) {
              onClick();
            }
          }}
          target={target}
          rel={rel}
          title={title}
          aria-label={ariaLabel}
        >
          {icon && iconPosition === "left" && (
            <span className="mr-2">{icon}</span>
          )}
          {children}
          {label}
          {icon && iconPosition === "right" && (
            <span className="ml-2">{icon}</span>
          )}
        </Link>
      ) : (
        !loading && (
          <button
            type={type}
            className={`${customClasses} ${
              size === "sm"
                ? "text-xs"
                : size === "md"
                  ? "text-base"
                  : "text-lg"
            } ${
              variant === "primary"
                ? "bg-primary text-white "
                : variant === "secondary"
                  ? "bg-green text-white"
                  : variant === "outline"
                    ? "border border-stroke-dark px-3 py-3 font-medium text-dark hover:shadow-1 dark:border-dark-3 dark:text-white"
                    : "bg-transparent text-black"
            } ${
              disabled ? "cursor-not-allowed opacity-50" : "cursor-pointer"
            } flex max-h-[50px] w-f items-center justify-center  gap-2.5 rounded-md py-3 text-center font-medium transition-colors duration-200 hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${deviceType === "desktop" ? "min-w-[130px]" : ""} ${
              fullWidth ? "!w-full" : "w-fit px-3"
            }`}
            onClick={(e) => {
              e.preventDefault();
              if (!disabled) {
                onClick();
              }
            }}
            disabled={disabled}
            title={title}
            aria-label={ariaLabel}
          >
            {icon && iconPosition === "left" && (
              <span className="mr-2">{icon}</span>
            )}
            {children}
            {label}
            {icon && iconPosition === "right" && (
              <span className="ml-2">{icon}</span>
            )}
          </button>
        )
      )}
    </>
  );
};

export default ButtonDefault;


================================================
File: src/components/CalenderBox/CalenderBox.tsx
================================================
import React, { useState, useEffect, useMemo } from "react";
import { Calendar, Badge, Popover, Spin } from "antd";
import type { Dayjs } from "dayjs";
import type { BadgeProps } from "antd";
import dayjs from "dayjs";
import { API } from "../../api";
import { END_POINT } from "../../api/UrlProvider";
import { toast } from "react-toastify";
import { FiClock, FiUser, FiUserCheck, FiMessageCircle } from "react-icons/fi";
import { MdOutlineSupportAgent } from "react-icons/md";
import { Link } from "react-router-dom";
import Heading from "../CommonUI/Heading";

interface CalendarEvent {
  type: BadgeProps["status"];
  content: string;
  details?: {
    id: string;
    firstName: string;
    assignedAgent: {
      _id: string;
      name: string;
    };
    followUpDate: string;
    comment: string;
  };
}

interface CalendarData {
  _id: string;
  firstName: string;
  assignedAgent: {
    _id: string;
    name: string;
  };
  followUpDate: string;
  comment: string;
  id: string;
}

const EventModal = ({ listData }: { listData: CalendarEvent[] }) => (
  <div className="max-w-sm divide-y divide-gray-200 dark:divide-gray-700">
    {listData.map((item, index) => (
      <div key={index} className="py-3 first:pt-0 last:pb-0">
        <Link to={`/leads/${item.details?.id}`}>
          <div className="flex items-center gap-2 mb-2">
            <Badge status={item.type} />
            <span className="font-medium text-base dark:text-white">
              {item.content}
            </span>
          </div>
          {item.details && (
            <div className="space-y-2 ml-1">
              <div className="flex items-center gap-2 text-sm dark:text-gray-300">
                <FiUser className="text-primary" size={16} />
                <span>{item?.details?.firstName}</span>
              </div>
              <div className="flex items-center gap-2 text-sm dark:text-gray-300">
                <MdOutlineSupportAgent className="text-primary" size={16} />
                <span>{item?.details?.assignedAgent?.name}</span>
              </div>
              <div className="flex items-center gap-2 text-sm dark:text-gray-300">
                <FiMessageCircle className="text-primary" size={16} />
                <span>{item?.details?.comment}</span>
              </div>
              <div className="flex items-center gap-2 text-sm dark:text-gray-300">
                <FiClock className="text-primary" size={16} />
                <span>{dayjs(item?.details?.followUpDate)?.format("HH:mm")}</span>
              </div>
            </div>
          )}
        </Link>
      </div>
    ))}
  </div>
);

const CalendarBox = ({ widgetModeOn = false }: any) => {
  const [value, setValue] = useState(() => dayjs());
  const [selectedValue, setSelectedValue] = useState(() => dayjs());
  const [calendarData, setCalendarData] = useState<CalendarData[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const fetchCalendarData = async () => {
    try {
      setIsLoading(true);
      const { data: response, error } = await API.getAuthAPI(
        END_POINT.CALENDAR,
        true
      );

      if (error) return;

      if (response) {
        setCalendarData(response);
      }
    } catch (error: any) {
      console.error(error.message || "Failed to fetch calendar data");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchCalendarData();
  }, []);

  // Transform calendar data into a map of dates to events
  const eventsByDate = useMemo(() => {
    const events = new Map<string, CalendarEvent[]>();

    calendarData.forEach((event) => {
      const date = dayjs(event.followUpDate).format("YYYY-MM-DD");

      if (!events.has(date)) {
        events.set(date, []);
      }

      events.get(date)?.push({
        type: "processing",
        content: `${event.comment}`,
        // content: `Follow-up with ${event.firstName}`,
        details: event,
      });
    });

    return events;
  }, [calendarData]);

  const getListData = (value: Dayjs): CalendarEvent[] => {
    const dateStr = value.format("YYYY-MM-DD");
    return eventsByDate.get(dateStr) || [];
  };

  const onSelect = (newValue: Dayjs) => {
    setValue(newValue);
    setSelectedValue(newValue);
  };

  const onPanelChange = (newValue: Dayjs) => {
    setValue(newValue);
  };

  const dateCellRender = (value: Dayjs) => {
    const listData = getListData(value);
    if (listData.length === 0) return null;

    return (
      <Popover
        content={<EventModal listData={listData} />}
        title={
          <div className="font-medium text-lg pb-2 border-b dark:border-gray-700 dark:text-white">
            Follow-up Details
          </div>
        }
        trigger={["hover"]}
        placement="right"
        overlayClassName="calendar-popover"
      >
        <ul className="events">
          {listData.map((item, index) => (
            <li
              key={index}
              className="overflow-hidden text-ellipsis whitespace-nowrap"
            >
              <Badge status={item.type} text={item.content} />
            </li>
          ))}
        </ul>
      </Popover>
    );
  };

  // const dateCellRender = (value: Dayjs) => {
  //   const listData = getListData(value);
  //   if (listData.length === 0) return null;

  //   return (
  //     <Popover
  //       content={<EventModal listData={listData} />}
  //       title={
  //         <div className="font-medium text-lg pb-2 border-b dark:border-gray-700 dark:text-white">
  //           Follow-up Details
  //         </div>
  //       }
  //       trigger={["hover"]}
  //       placement="right"
  //       overlayClassName="calendar-popover"
  //     >
  //       <ul className="events">
  //         {listData.map((item, index) => (
  //           <li
  //             key={index}
  //             className="calendar-event-item flex items-center gap-1 px-1 py-0.5 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
  //           >
  //             <Badge status={item.type} />
  //             <span className="text-xs truncate dark:text-gray-300">
  //               {item.content}
  //             </span>
  //           </li>
  //         ))}
  //       </ul>
  //     </Popover>
  //   );
  // };

  if (isLoading) {
    return (
      <div className="flex h-[600px] items-center justify-center bg-white dark:bg-gray-800 rounded-lg">
        <Spin size="large" />
      </div>
    );
  }

  return (
    <>
      <div className="custom-calendar-wrapper bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
        {widgetModeOn ? (
          <h4 className="text-body-2xlg font-bold text-dark dark:text-white mb-2">
            Follow Up Calender
          </h4>
        ) : (
          <Heading title="Follow Up Calender" />
        )}
        <Calendar
          value={value}
          onSelect={onSelect}
          onPanelChange={onPanelChange}
          cellRender={(current, info) => {
            if (info.type === "date") return dateCellRender(current);
            return info.originNode;
          }}
        />
        <style>{`
        .dark .ant-picker-calendar.ant-picker-calendar-full .ant-picker-panel {
          background: #122031 !important;
        }

        .dark
          .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-in-view.ant-picker-cell-selected
          .ant-picker-calendar-date,
        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-in-view.ant-picker-cell-selected
          .ant-picker-calendar-date-today {
          background-color: #374151;
        }

        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-in-view.ant-picker-cell-selected
          .ant-picker-calendar-date,
        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-in-view.ant-picker-cell-selected
          .ant-picker-calendar-date-today {
          background-color: #e6f4ff;
        }

        .ant-picker-calendar {
          background: transparent !important;
        }

        .ant-picker-calendar .ant-picker-content th {
          color: white;
          text-align: center;
        }

        .ant-picker-calendar .ant-picker-content thead {
          background: #5750f1;
          font-size: 18px;
          font-weight: 800;
          font-family: "Satoshi";
          height: 41px;
        }

        .dark .ant-picker-calendar .ant-picker-cell {
          color: rgb(156 163 175);
        }

        .dark .ant-picker-calendar .ant-picker-cell-in-view {
          color: white;
        }

        .dark
          .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-calendar-date {
          border-color: white;
        }

        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-selected
          .ant-picker-calendar-date
          .ant-picker-calendar-date-value,
        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-selected:hover
          .ant-picker-calendar-date
          .ant-picker-calendar-date-value,
        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-selected
          .ant-picker-calendar-date-today
          .ant-picker-calendar-date-value,
        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-selected:hover
          .ant-picker-calendar-date-today
          .ant-picker-calendar-date-value {
          font-size: 24px;
        }

        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-selected
          .ant-picker-calendar-date
          .ant-picker-calendar-date-value,
        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-selected:hover
          .ant-picker-calendar-date
          .ant-picker-calendar-date-value,
        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-selected
          .ant-picker-calendar-date-today
          .ant-picker-calendar-date-value,
        .ant-picker-calendar.ant-picker-calendar-full
          .ant-picker-cell-selected:hover
          .ant-picker-calendar-date-today
          .ant-picker-calendar-date-value {
          color: #3183f6;
          font-size: 26px;
          font-weight: 600;
        }

        .ant-picker-calendar .ant-picker-calendar-header {
          border-radius: 8px;
          background: #5750f1;
          padding: 12px 12px;
        }

        /* Add styles for events */
        .events {
          margin: 0;
          padding: 0;
          list-style: none;
        }

        .events .ant-badge-status {
          width: 100%;
          overflow: hidden;
          font-size: 12px;
          white-space: nowrap;
          text-overflow: ellipsis;
        }

        .events .ant-badge-status-dot {
          display: inline-block;
          margin-right: 4px;
        }

        .events .ant-badge-status-text {
          color: rgba(0, 0, 0, 0.88);
        }

        .dark .events .ant-badge-status-text {
          color: rgba(255, 255, 255, 0.88);
        }

        .ant-picker-calendar-full
          .ant-picker-panel
          .ant-picker-calendar-date-content {
          height: 60px;
          overflow: hidden;
        }

        .dark .ant-popover .ant-popover-inner {
          background: black !important;
          box-shadow:
            0 6px 16px 0 rgb(255 255 255 / 8%),
            0 3px 6px -4px rgb(255 243 243 / 12%),
            0 9px 28px 8px rgb(255 255 255 / 5%);
        }

        .dark .ant-popover .ant-popover-title {
          color: white !important;
        }

         .calendar-popover .ant-popover-inner {

          border-radius: 12px;

          overflow: hidden;

        }

        .dark .calendar-popover .ant-popover-inner {

          background: #1F2937;

          border: 1px solid #374151;

        }
      `}</style>
      </div>
    </>
  );
};

export default CalendarBox;


================================================
File: src/components/CalenderBox/index.tsx
================================================
const CalendarBox = () => {
  return (
    <>
      <div className="w-full max-w-full rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
        <table className="w-full">
          <thead>
            <tr className="grid grid-cols-7 rounded-t-[10px] bg-primary text-white">
              <th className="flex h-15 items-center justify-center rounded-tl-[10px] p-1 text-body-xs font-medium sm:text-base xl:p-5">
                <span className="hidden lg:block"> Sunday </span>
                <span className="block lg:hidden"> Sun </span>
              </th>
              <th className="flex h-15 items-center justify-center p-1 text-body-xs font-medium sm:text-base xl:p-5">
                <span className="hidden lg:block"> Monday </span>
                <span className="block lg:hidden"> Mon </span>
              </th>
              <th className="flex h-15 items-center justify-center p-1 text-body-xs font-medium sm:text-base xl:p-5">
                <span className="hidden lg:block"> Tuesday </span>
                <span className="block lg:hidden"> Tue </span>
              </th>
              <th className="flex h-15 items-center justify-center p-1 text-body-xs font-medium sm:text-base xl:p-5">
                <span className="hidden lg:block"> Wednesday </span>
                <span className="block lg:hidden"> Wed </span>
              </th>
              <th className="flex h-15 items-center justify-center p-1 text-body-xs font-medium sm:text-base xl:p-5">
                <span className="hidden lg:block"> Thursday </span>
                <span className="block lg:hidden"> Thur </span>
              </th>
              <th className="flex h-15 items-center justify-center p-1 text-body-xs font-medium sm:text-base xl:p-5">
                <span className="hidden lg:block"> Friday </span>
                <span className="block lg:hidden"> Fri </span>
              </th>
              <th className="flex h-15 items-center justify-center rounded-tr-[10px] p-1 text-body-xs font-medium sm:text-base xl:p-5">
                <span className="hidden lg:block"> Saturday </span>
                <span className="block lg:hidden"> Sat </span>
              </th>
            </tr>
          </thead>
          <tbody>
            {/* <!-- Line 1 --> */}
            <tr className="grid grid-cols-7">
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">1</span>
                <div className="group h-16 w-full flex-grow cursor-pointer py-1 md:h-30">
                  <span className="group-hover:text-primary md:hidden">
                    More
                  </span>
                  <div className="event invisible absolute left-2 z-99 mb-1 flex w-[200%] flex-col rounded-r-[5px] border-l-[3px] border-primary bg-gray-2 px-3 py-1 text-left opacity-0 group-hover:visible group-hover:opacity-100 dark:bg-dark-2 md:visible md:w-[190%] md:opacity-100">
                    <span className="event-name font-medium text-dark dark:text-white">
                      Redesign Website
                    </span>
                    <span className="time text-sm">1 Dec - 2 Dec</span>
                  </div>
                </div>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">2</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">3</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">4</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">5</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">6</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">7</span>
              </td>
            </tr>
            {/* <!-- Line 1 --> */}
            {/* <!-- Line 2 --> */}
            <tr className="grid grid-cols-7">
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">8</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">9</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  10
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  11
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  12
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  13
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  14
                </span>
              </td>
            </tr>
            {/* <!-- Line 2 --> */}
            {/* <!-- Line 3 --> */}
            <tr className="grid grid-cols-7">
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  15
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  16
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  17
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  18
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  19
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  20
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  21
                </span>
              </td>
            </tr>
            {/* <!-- Line 3 --> */}
            {/* <!-- Line 4 --> */}
            <tr className="grid grid-cols-7">
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  22
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  23
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  24
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  25
                </span>
                <div className="group h-16 w-full flex-grow cursor-pointer py-1 md:h-30">
                  <span className="group-hover:text-primary md:hidden">
                    More
                  </span>
                  <div className="event invisible absolute left-2 z-99 mb-1 flex w-[300%] flex-col rounded-r-[5px] border-l-[3px] border-primary bg-gray-2 px-3 py-1 text-left opacity-0 group-hover:visible group-hover:opacity-100 dark:bg-dark-2 md:visible md:w-[290%] md:opacity-100">
                    <span className="event-name font-medium text-dark dark:text-white">
                      App Design
                    </span>
                    <span className="time text-sm">25 Dec - 27 Dec</span>
                  </div>
                </div>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  26
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  27
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  28
                </span>
              </td>
            </tr>
            {/* <!-- Line 4 --> */}
            {/* <!-- Line 5 --> */}
            <tr className="grid grid-cols-7">
              <td className="ease relative h-20 cursor-pointer rounded-bl-[10px] border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  29
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  30
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">
                  31
                </span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">1</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">2</span>
              </td>
              <td className="ease relative h-20 cursor-pointer border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">3</span>
              </td>
              <td className="ease relative h-20 cursor-pointer rounded-br-[10px] border border-stroke p-2 transition duration-500 hover:bg-gray-2 dark:border-dark-3 dark:hover:bg-dark-2 md:h-25 md:p-6 xl:h-31">
                <span className="font-medium text-dark dark:text-white">4</span>
              </td>
            </tr>
            {/* <!-- Line 5 --> */}
          </tbody>
        </table>
      </div>
    </>
  );
};

export default CalendarBox;


================================================
File: src/components/Charts/BasicChart.tsx
================================================
import ChartFive from "./ChartFive";
import ChartThree from "./ChartThree";

const BasicChart: React.FC = () => {
  return (
    <>
      <div className="grid grid-cols-12 gap-4 md:gap-6 2xl:gap-7.5">
        <ChartThree />
        <div className="col-span-12 xl:col-span-5">
          <ChartFive />
        </div>
      </div>
    </>
  );
};

export default BasicChart;


================================================
File: src/components/Charts/ChartFive.tsx
================================================
import { ApexOptions } from "apexcharts";
import ReactApexChart from "react-apexcharts";

const ChartFive: React.FC = () => {
  const series = [
    {
      name: "Visitors",
      data: [168, 385, 201, 298, 187, 195, 291],
    },
  ];

  const options: ApexOptions = {
    colors: ["#5750F1"],
    chart: {
      fontFamily: "Satoshi, sans-serif",
      type: "bar",
      height: 200,
      toolbar: {
        show: false,
      },
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: "40%",
        borderRadius: 3,
      },
    },
    dataLabels: {
      enabled: false,
    },
    stroke: {
      show: true,
      width: 4,
      colors: ["transparent"],
    },
    xaxis: {
      categories: ["M", "T", "W", "T", "F", "S", "S"],
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
    },
    legend: {
      show: true,
      position: "top",
      horizontalAlign: "left",
      fontFamily: "Satoshi",

      markers: {
        radius: 99,
      },
    },
    grid: {
      strokeDashArray: 7,
      yaxis: {
        lines: {
          show: true,
        },
      },
    },
    fill: {
      opacity: 1,
    },

    tooltip: {
      x: {
        show: false,
      },
    },
  };

  return (
    <div className="rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
      <div className="flex justify-between border-b border-stroke px-6 pb-4.5 pt-5.5 dark:border-dark-3">
        <div>
          <h2 className="mb-1.5 text-body-2xlg font-bold text-dark dark:text-white">
            Campaign Visitors
          </h2>
          <p className="text-body-sm font-medium">Last Campaign Performance</p>
        </div>
        <div>
          <h3 className="mb-0.5 text-body-2xlg font-bold text-dark dark:text-white">
            784k
          </h3>
          <p className="flex items-center justify-end gap-1 text-right text-red">
            <svg
              className="fill-current"
              width="14"
              height="14"
              viewBox="0 0 14 14"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M13.0157 4.74707C12.7532 4.74707 12.5344 4.96582 12.5344 5.22832V7.65645L9.4063 5.57832C8.94693 5.27207 8.37818 5.27207 7.9188 5.57832L5.0313 7.50332C4.92193 7.59082 4.7688 7.59082 4.63755 7.50332L1.24693 5.2502C1.02818 5.09707 0.721929 5.1627 0.568804 5.38145C0.415679 5.6002 0.481304 5.90645 0.700054 6.05957L4.09068 8.3127C4.55005 8.61895 5.1188 8.61895 5.57818 8.3127L8.46568 6.3877C8.57505 6.3002 8.72818 6.3002 8.85943 6.3877L11.6594 8.26895H9.49381C9.23131 8.26895 9.01255 8.4877 9.01255 8.7502C9.01255 9.0127 9.23131 9.23145 9.49381 9.23145H13.0157C13.2782 9.23145 13.4969 9.0127 13.4969 8.7502V5.22832C13.5188 4.96582 13.2782 4.74707 13.0157 4.74707Z"
                fill="#"
              />
            </svg>

            <span className="text-body-sm font-medium">-1.5%</span>
          </p>
        </div>
      </div>

      <div className="px-6 pb-1 pt-7.5">
        <div id="chartFive" className="-ml-3.5">
          <ReactApexChart
            options={options}
            series={series}
            type="bar"
            height={200}
          />
        </div>
      </div>
    </div>
  );
};

export default ChartFive;


================================================
File: src/components/Charts/ChartOne.tsx
================================================
import { ApexOptions } from "apexcharts";
import ReactApexChart from "react-apexcharts";
import { useEffect, useState } from "react";

interface PaymentOverview {
  chartData: Array<{
    month: string;
    received: number;
    loss: number;
    receivedAmount: number;
    lossAmount: number;
  }>;
  summary: {
    receivedLeads: number;
    lostLeads: number;
  };
}

interface ChartOneProps {
  paymentOverview: PaymentOverview | null;
}

const ChartOne: React.FC<ChartOneProps> = ({ paymentOverview }) => {
  // Track dark mode
  const [isDark, setIsDark] = useState(false);

  useEffect(() => {
    // Check initial dark mode
    setIsDark(document.documentElement.classList.contains("dark"));

    // Create observer to watch for dark mode changes
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === "class") {
          setIsDark(document.documentElement.classList.contains("dark"));
        }
      });
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });

    return () => observer.disconnect();
  }, []);

  const series = [
    {
      name: "Won Amount",
      data: paymentOverview?.chartData.map((item) => item.receivedAmount) || [],
    },
    {
      name: "Lost Amount",
      data: paymentOverview?.chartData.map((item) => item.lossAmount) || [],
    },
  ];

  const options: ApexOptions = {
    legend: {
      show: false,
      position: "top",
      horizontalAlign: "left",
      labels: {
        colors: isDark ? "#fff" : undefined,
      },
    },
    colors: ["#5750F1", "#0ABEF9"],
    chart: {
      fontFamily: "Satoshi, sans-serif",
      height: 310,
      type: "area",
      toolbar: {
        show: false,
      },
      background: "transparent",
      foreColor: isDark ? "#A0AEC0" : "#4A5568", // Text color for axes and labels
    },
    fill: {
      gradient: {
        opacityFrom: isDark ? 0.35 : 0.55,
        opacityTo: 0.05,
      },
    },
    responsive: [
      {
        breakpoint: 1024,
        options: {
          chart: {
            height: 300,
          },
        },
      },
      {
        breakpoint: 1366,
        options: {
          chart: {
            height: 320,
          },
        },
      },
    ],
    stroke: {
      curve: "smooth",
      width: 2,
    },
    markers: {
      size: 0,
      colors: isDark ? ["#fff"] : undefined,
      strokeColors: "#fff",
    },
    grid: {
      strokeDashArray: 5,
      borderColor: isDark ? "#2D3748" : "#E2E8F0",
      xaxis: {
        lines: {
          show: false,
        },
      },
      yaxis: {
        lines: {
          show: true,
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    tooltip: {
      theme: isDark ? "dark" : "light",
      fixed: {
        enabled: false,
      },
      x: {
        show: false,
      },
      y: {
        formatter: function (value) {
          return `₹${value.toLocaleString()}`;
        },
      },
      marker: {
        show: false,
      },
    },
    xaxis: {
      type: "category",
      categories: paymentOverview?.chartData.map((item) => item.month) || [],
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
      labels: {
        style: {
          colors: isDark ? "#A0AEC0" : "#4A5568",
          fontSize: "12px",
        },
      },
    },
    yaxis: {
      labels: {
        style: {
          colors: isDark ? "#A0AEC0" : "#4A5568",
          fontSize: "12px",
        },
        formatter: function (value) {
          return `₹${value.toLocaleString()}`;
        },
      },
    },
  };

  return (
    <div
      className={
        "col-span-12 rounded-sm bg-white px-5 pt-7.5 pb-5 shadow-default dark:bg-gray-dark sm:px-7.5 xl:col-span-7"
      }
    >
      <div className="flex flex-wrap items-start justify-between gap-3 sm:flex-nowrap">
        <div className="flex w-full flex-wrap gap-3 sm:gap-5">
          <div className="flex min-w-47.5">
            <h4 className="text-xl font-bold text-black dark:text-white">
              Won - Loss Overview
            </h4>
          </div>
        </div>
      </div>

      <div className="mb-2">
        <div id="chartOne" className="-ml-5">
          <ReactApexChart
            options={options}
            series={series}
            type="area"
            height={350}
          />
        </div>
      </div>

      <div className="flex flex-wrap items-start justify-center gap-3.5 sm:flex-nowrap sm:gap-5">
        <div className="flex w-full flex-wrap items-center gap-3.5 sm:gap-5">
          <div className="w-full px-8">
            <div className="flex w-full items-center justify-center gap-3.5">
              <div className="w-full max-w-52">
                <div className="flex w-full items-center justify-between border-b border-stroke pb-2.5 dark:border-stroke dark">
                  <div className="flex items-center gap-1.5">
                    <span className="block h-3 w-3 rounded-full bg-primary"></span>
                    <span className="font-medium w-fit " style={{color: isDark?"white":"black"}}>
                      Won Amount
                    </span>
                  </div>
                  <span className="font-medium text-gray-6 ">
                    ₹
                    {paymentOverview?.summary.receivedLeads.toLocaleString() ||
                      "0"}
                  </span>
                </div>
              </div>
              <div className="w-full max-w-45">
                <div className="flex w-full items-center justify-between border-b border-stroke pb-2.5 dark:border-strokedark">
                  <div className="flex items-center gap-1.5">
                    <span className="block h-3 w-3 rounded-full  bg-red"></span>
                    <span className="font-medium text-black dark:text-white">
                      Lost Amount
                    </span>
                  </div>
                  <span className="font-medium text-gray-6  ml-3">
                    ₹
                    {paymentOverview?.summary.lostLeads.toLocaleString() || "0"}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChartOne;


================================================
File: src/components/Charts/ChartThree.tsx
================================================
import { ApexOptions } from "apexcharts";
import ReactApexChart from "react-apexcharts";
import DefaultSelectOption from "../SelectOption/DefaultSelectOption";

const ChartThree: React.FC = () => {
  const series = [65, 34, 12, 56];
  const options: ApexOptions = {
    chart: {
      fontFamily: "Satoshi, sans-serif",
      type: "donut",
    },
    colors: ["#5750F1", "#5475E5", "#8099EC", "#ADBCF2"],
    labels: ["Desktop", "Tablet", "Mobile", "Unknown"],
    legend: {
      show: false,
      position: "bottom",
    },

    plotOptions: {
      pie: {
        donut: {
          size: "80%",
          background: "transparent",
          labels: {
            show: true,
            total: {
              show: true,
              showAlways: true,
              label: "Visitors",
              fontSize: "16px",
              fontWeight: "400",
            },
            value: {
              show: true,
              fontSize: "28px",
              fontWeight: "bold",
            },
          },
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    responsive: [
      {
        breakpoint: 2600,
        options: {
          chart: {
            width: 415,
          },
        },
      },
      {
        breakpoint: 640,
        options: {
          chart: {
            width: 200,
          },
        },
      },
    ],
  };

  return (
    <div className="col-span-12 rounded-[10px] bg-white px-7.5 pb-7 pt-7.5 shadow-1 dark:bg-gray-dark dark:shadow-card xl:col-span-5">
      <div className="mb-9 justify-between gap-4 sm:flex">
        <div>
          <h4 className="text-body-2xlg font-bold text-dark dark:text-white">
            Used Devices
          </h4>
        </div>
        <div>
          <DefaultSelectOption options={["Monthly", "Yearly"]} />
        </div>
      </div>

      <div className="mb-8">
        <div className="mx-auto flex justify-center">
          <ReactApexChart options={options} series={series} type="donut" />
        </div>
      </div>

      <div className="mx-auto w-full max-w-[350px]">
        <div className="-mx-7.5 flex flex-wrap items-center justify-center gap-y-2.5">
          <div className="w-full px-7.5 sm:w-1/2">
            <div className="flex w-full items-center">
              <span className="mr-2 block h-3 w-full max-w-3 rounded-full bg-blue"></span>
              <p className="flex w-full justify-between text-body-sm font-medium text-dark dark:text-dark-6">
                <span> Desktop </span>
                <span> 65% </span>
              </p>
            </div>
          </div>
          <div className="w-full px-7.5 sm:w-1/2">
            <div className="flex w-full items-center">
              <span className="mr-2 block h-3 w-full max-w-3 rounded-full bg-blue-light"></span>
              <p className="flex w-full justify-between text-body-sm font-medium text-dark dark:text-dark-6">
                <span> Tablet </span>
                <span> 34% </span>
              </p>
            </div>
          </div>
          <div className="w-full px-7.5 sm:w-1/2">
            <div className="flex w-full items-center">
              <span className="mr-2 block h-3 w-full max-w-3 rounded-full bg-blue-light-2"></span>
              <p className="flex w-full justify-between text-body-sm font-medium text-dark dark:text-dark-6">
                <span> Mobile </span>
                <span> 45% </span>
              </p>
            </div>
          </div>
          <div className="w-full px-7.5 sm:w-1/2">
            <div className="flex w-full items-center">
              <span className="mr-2 block h-3 w-full max-w-3 rounded-full bg-blue-light-3"></span>
              <p className="flex w-full justify-between text-body-sm font-medium text-dark dark:text-dark-6">
                <span> Unknown </span>
                <span> 12% </span>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChartThree;


================================================
File: src/components/Charts/ChartTwo.tsx
================================================
import { ApexOptions } from "apexcharts";
import ReactApexChart from "react-apexcharts";

interface PaymentOverview {
  chartData: Array<{
    month: string;
    received: number;
    loss: number;
    receivedAmount: number;
    lossAmount: number;
  }>;
}

interface ChartTwoProps {
  paymentOverview: PaymentOverview | null;
}

const ChartTwo: React.FC<ChartTwoProps> = ({ paymentOverview }) => {
  const series = [
    {
      name: "Won Deals",
      data: paymentOverview?.chartData.map((item) => item.received) || [],
    },
    {
      name: "Lost Deals",
      data: paymentOverview?.chartData.map((item) => item.loss) || [],
    },
  ];

  const options: ApexOptions = {
    colors: ["#5750F1", "#0ABEF9"],
    chart: {
      fontFamily: "Satoshi, sans-serif",
      type: "bar",
      height: 335,
      stacked: true,
      toolbar: {
        show: false,
      },
      zoom: {
        enabled: false,
      },
    },
    responsive: [
      {
        breakpoint: 1536,
        options: {
          plotOptions: {
            bar: {
              borderRadius: 3,
              columnWidth: "25%",
            },
          },
        },
      },
    ],
    plotOptions: {
      bar: {
        horizontal: false,
        borderRadius: 3,
        columnWidth: "25%",
        borderRadiusApplication: "end",
        borderRadiusWhenStacked: "last",
      },
    },
    dataLabels: {
      enabled: false,
    },
    grid: {
      strokeDashArray: 5,
      xaxis: {
        lines: {
          show: false,
        },
      },
      yaxis: {
        lines: {
          show: true,
        },
      },
    },
    xaxis: {
      categories: paymentOverview?.chartData.map((item) => item.month) || [],
    },
    legend: {
      position: "top",
      horizontalAlign: "left",
      fontFamily: "Satoshi",
      fontWeight: 500,
      fontSize: "14px",
      markers: {
        radius: 99,
        width: 16,
        height: 16,
        strokeWidth: 10,
        strokeColor: "transparent",
      },
    },
    fill: {
      opacity: 1,
    },
  };

  const totalWonDeals =
    paymentOverview?.chartData.reduce((sum, item) => sum + item.received, 0) ||
    0;
  const totalLostDeals =
    paymentOverview?.chartData.reduce((sum, item) => sum + item.loss, 0) || 0;

  return (
    <div className="col-span-12 rounded-[10px] bg-white px-7.5 pt-7.5 shadow-1 dark:bg-gray-dark dark:shadow-card xl:col-span-5">
      <div className="mb-4 justify-between gap-4 sm:flex">
        <div>
          <h4 className="text-body-2xlg font-bold text-dark dark:text-white">
            Deal Analytics
          </h4>
        </div>
      </div>

      <div className="mb-4 grid grid-cols-2 gap-4">
        <div className="rounded-md border border-stroke bg-gray p-4 dark:border-strokedark dark:bg-meta-4">
          <h4 className="mb-1.5 text-title-sm font-medium text-black ">
            Won Deals
          </h4>
          <h3 className="text-title-lg font-bold text-success">
            {totalWonDeals}
          </h3>
        </div>
        <div className="rounded-md border border-stroke bg-gray p-4 dark:border-strokedark dark:bg-meta-4">
          <h4 className="mb-1.5 text-title-sm font-medium text-black ">
            Lost Deals
          </h4>
          <h3 className="text-title-lg font-bold text-danger">
            {totalLostDeals}
          </h3>
        </div>
      </div>

      <div>
        <div id="chartTwo" className="-ml-3.5">
          <ReactApexChart
            options={options}
            series={series}
            type="bar"
            height={370}
          />
        </div>
      </div>
    </div>
  );
};

export default ChartTwo;


================================================
File: src/components/Charts/DonutChart.tsx
================================================
import { ApexOptions } from "apexcharts";
import React, { useMemo } from "react";
import ReactApexChart from "react-apexcharts";

interface LeadSource {
  name: string;
  value: number;
  color: string;
  percentage: string;
}

interface LeadSourceOverview {
  total: number;
  sources: LeadSource[];
}

interface DonutChartsProps {
  leadSourceMetrics: LeadSourceOverview | null;
}

const generateColors = (count: number): string[] => {
  const baseColor = [37, 28, 255]; // #5750F1 in RGB
  const maxColor = [180, 180, 255]; // Limit the lightest color to avoid white
  const colors: string[] = [];
  for (let i = 0; i < count; i++) {
    const factor = i / (count - 1);
    const r = Math.round(baseColor[0] + (maxColor[0] - baseColor[0]) * factor);
    const g = Math.round(baseColor[1] + (maxColor[1] - baseColor[1]) * factor);
    const b = Math.round(baseColor[2] + (maxColor[2] - baseColor[2]) * factor);
    colors.push(`rgb(${r},${g},${b})`);
  }
  return colors;
};

const DonutCharts: React.FC<DonutChartsProps> = ({ leadSourceMetrics }) => {
  const series = leadSourceMetrics?.sources.map((item) => item.value) || [];
  const labels = leadSourceMetrics?.sources.map((item) => item.name) || [];
  const colors = useMemo(() => 
    generateColors(leadSourceMetrics?.sources.length || 0), 
    [leadSourceMetrics?.sources.length]
  );

  const options: ApexOptions = {
    chart: {
      fontFamily: "Satoshi, sans-serif",
      type: "donut",
    },
    colors: colors,
    labels: labels,
    legend: {
      show: false,
      position: "bottom",
    },
    plotOptions: {
      pie: {
        donut: {
          size: "75%",
          background: "transparent",
          labels: {
            show: true,
            total: {
              show: true,
              showAlways: true,
              label: "Total Leads",
              fontSize: "16px",
              fontWeight: "400",
              formatter: function () {
                return leadSourceMetrics?.total.toString() || "0";
              },
            },
            value: {
              show: true,
              fontSize: "28px",
              fontWeight: "bold",
            },
          },
        },
      },
    },
    dataLabels: {
      enabled: false,
    },
    responsive: [
      {
        breakpoint: 2600,
        options: {
          chart: {
            width: 415,
          },
        },
      },
      {
        breakpoint: 640,
        options: {
          chart: {
            width: 300,
          },
        },
      },
    ],
  };

  if (!leadSourceMetrics || leadSourceMetrics.sources.length === 0) {
    return (
      <div className="col-span-12 rounded-[10px] bg-white px-7.5 pb-7 pt-7.5 shadow-1 dark:bg-gray-dark dark:shadow-card xl:col-span-5">
        <div className="flex items-center justify-center h-full">
          <p className="text-gray-500 dark:text-gray-400">No lead source data available</p>
        </div>
      </div>
    );
  }

  return (
    <div className="col-span-12 rounded-[10px] bg-white px-7.5 pb-7 pt-7.5 shadow-1 dark:bg-gray-dark dark:shadow-card xl:col-span-5">
      <div className="mb-9 justify-between gap-4 sm:flex">
        <div>
          <h4 className="text-body-2xlg font-bold text-dark dark:text-white">
            Leads Source Overview
          </h4>
        </div>
      </div>
      <div className="mb-8">
        <div className="mx-auto flex justify-center">
          <ReactApexChart 
            options={options} 
            series={series} 
            type="donut" 
          />
        </div>
      </div>
      <div className="mx-auto w-full">
        <div className="-mx-7.5 flex flex-wrap items-center gap-y-2.5">
          {leadSourceMetrics.sources.map((item, index) => (
            <div key={item.name} className="w-full px-7.5 sm:w-1/2">
              <div className="flex w-full items-center">
                <span
                  className="mr-2 block h-3 w-full max-w-3 rounded-full"
                  style={{ backgroundColor: colors[index] }}
                ></span>
                <p className="flex w-full justify-between text-body-sm font-medium text-dark dark:text-dark-6">
                  <span>{item.name}</span>
                  <span>{item.value} ({item.percentage}%)</span>
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default DonutCharts;

================================================
File: src/components/Charts/DonutSlickDesign.tsx
================================================
import ReactApexChart from "react-apexcharts";
import { ApexOptions } from "apexcharts";

export default function DonutSlickDesign({
  chartSeries = 0,
  gradientColors = ["#3C50E0", "#1C3FB7", "#8099EC"],
  gradientStops = [25, 75, 100],
  labels = ["Used Storage"],
  formatter = function (val: number) {
    return val + " GB";
  },
}: any) {
  const chartOptions: ApexOptions = {
    chart: {
      height: 100,
      type: "radialBar",
    },
    plotOptions: {
      radialBar: {
        hollow: {
          margin: 15,
          size: "70%",
        },

        track: {
          dropShadow: {
            enabled: true,
            top: 2,
            left: 0,
            color: "#999",
            opacity: 1,
            blur: 2,
          },
        },

        dataLabels: {
          //   showOn: "always",
          name: {
            offsetY: -4,
            show: true,
            color: "#888",
            fontSize: "13px",
          },
          value: {
            color: "#111",
            fontSize: "21px",
            show: true,
            formatter,
          },
        },
      },
    },

    fill: {
      type: "gradient",
      gradient: {
        shade: "dark",
        type: "horizontal",
        gradientToColors: gradientColors,
        stops: gradientStops,
      },
    },

    stroke: {
      lineCap: "round",
    },
    labels,
  };

  //   const chartOptions: ApexOptions = {
  //     plotOptions: {
  //       radialBar: {
  //         // startAngle: -360,
  //         // endAngle: 0,
  //         hollow: {
  //           margin: 0,
  //           size: '70%',
  //           background: 'transparent',
  //         },
  //
  //       }
  //     },
  //     fill: {
  //       type: 'gradient',
  //       gradient: {
  //         shade: 'dark',
  //         type: 'horizontal',
  //         gradientToColors: ['#3C50E0', '#1C3FB7', '#5475E5', '#8099EC', '#ADBCF2', '#C3CEF6', '#E1E8FF'],
  //         stops: [0, 25, 50, 75, 100]
  //       }
  //     },
  //   };
  return (
    <>
      <ReactApexChart
        options={chartOptions}
        series={chartSeries}
        type="radialBar"
        height={200}
      />
      <style>{`
        .apexcharts-datalabel-value {
          fill: #374151 !important;
        }
        .dark .apexcharts-datalabel-value {
          fill: #ffffff !important;
        }
        .dark .apexcharts-track {
          stroke: #374151 !important;
        }
      `}</style>
    </>
  );
}


================================================
File: src/components/Chat/ChatCard.tsx
================================================
import { Link } from "react-router-dom";
import { Chat } from "../../types/chat";

const chatData: Chat[] = [
  {
    active: true,
    avatar: "/images/user/user-01.png",
    name: "Devid Heilo",
    text: "Hello, how are you?",
    time: "12 min",
    textCount: 3,
    dot: 3,
  },
  {
    active: true,
    avatar: "/images/user/user-02.png",
    name: "Henry Fisher",
    text: "I am waiting for you",
    time: "5:54 PM",
    textCount: 0,
    dot: 1,
  },
  {
    active: null,
    avatar: "/images/user/user-04.png",
    name: "Wilium Smith",
    text: "Where are you now?",
    time: "10:12 PM",
    textCount: 0,
    dot: 3,
  },
  {
    active: true,
    seen: true,
    avatar: "/images/user/user-05.png",
    name: "Henry Deco",
    text: "Thank you so much!",
    time: "Sun",
    textCount: 2,
    dot: 6,
  },
  {
    active: false,
    avatar: "/images/user/user-06.png",
    name: "Jubin Jack",
    text: "Hello, how are you?",
    time: "Oct 23",
    textCount: 0,
    dot: 3,
  },
];

const ChatCard = () => {
  return (
    <div className="col-span-12 rounded-[10px] bg-white py-6 shadow-1 dark:bg-gray-dark dark:shadow-card xl:col-span-4">
      <h4 className="mb-5.5 px-7.5 text-body-2xlg font-bold text-dark dark:text-white">
        Chats
      </h4>

      <div>
        {chatData.map((chat, key) => (
          <Link
            to="/"
            className="flex items-center gap-4.5 px-7.5 py-3 hover:bg-gray-1 dark:hover:bg-dark-2"
            key={key}
          >
            <div className="relative h-14 w-14 rounded-full">
              <img
                width={56}
                height={56}
                src={chat.avatar}
                alt="User"
                style={{
                  width: "auto",
                  height: "auto",
                }}
              />
              <span
                className={`absolute bottom-0 right-0 h-3.5 w-3.5 rounded-full border-2 border-white dark:border-dark-2 ${
                  chat.active === true
                    ? "bg-green"
                    : chat.active === false
                      ? `bg-red-light`
                      : "bg-orange-light"
                }`}
              ></span>
            </div>

            <div className="flex flex-1 items-center justify-between">
              <div>
                <h5 className="font-medium text-dark dark:text-white">
                  {chat.name}
                </h5>
                <p>
                  <span
                    className={`mb-px text-body-sm font-medium ${chat.seen ? "dark:text-dark-3" : "text-dark-3 dark:text-dark-6"}`}
                  >
                    {chat.text}
                  </span>
                  <span className="text-xs"> . {chat.time}</span>
                </p>
              </div>
              {chat.textCount !== 0 && (
                <div className="flex items-center justify-center rounded-full bg-primary px-2 py-0.5">
                  <span className="text-sm font-medium text-white">
                    {" "}
                    {chat.textCount}
                  </span>
                </div>
              )}
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
};

export default ChatCard;


================================================
File: src/components/CheckMarks/CheckMark.tsx
================================================
import React from "react";
const CheckMark: React.FC = () => {
  return (
    <svg
      width="25"
      height="25"
      viewBox="0 0 25 25"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M12.5 24.5312C5.85937 24.5312 0.507812 19.1406 0.507812 12.5C0.507812 5.85937 5.85937 0.507812 12.5 0.507812C19.1406 0.507812 24.5312 5.85937 24.5312 12.5C24.5312 19.1406 19.1406 24.5312 12.5 24.5312ZM12.5 1.875C6.64062 1.875 1.875 6.64062 1.875 12.5C1.875 18.3594 6.64062 23.1641 12.5 23.1641C18.3594 23.1641 23.1641 18.3594 23.1641 12.5C23.1641 6.64062 18.3594 1.875 12.5 1.875Z"
        fill="#13C296"
      />
      <path
        d="M11.1719 15.2344C10.8984 15.2344 10.6641 15.1562 10.4297 14.9609L7.85156 12.4609C7.57812 12.1875 7.57812 11.7578 7.85156 11.4844C8.125 11.2109 8.55469 11.2109 8.82813 11.4844L11.1719 13.7891L16.1719 8.94531C16.4453 8.67187 16.875 8.67187 17.1484 8.94531C17.4219 9.21875 17.4219 9.64844 17.1484 9.92188L11.9531 15C11.6797 15.1563 11.4063 15.2344 11.1719 15.2344Z"
        fill="#13C296"
      />
    </svg>
  );
};

export default CheckMark;


================================================
File: src/components/CloseMarks/CloseMark.tsx
================================================
// import React from "react";

const CloseMark: React.FC = () => {
  return (
    <svg
      width="25"
      height="25"
      viewBox="0 0 25 25"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M12.4797 0C5.56911 0 0 5.56911 0 12.4797C0 19.3902 5.56911 25 12.4797 25C19.3902 25 25 19.3902 25 12.4797C25 5.56911 19.3902 0 12.4797 0ZM12.4797 23.5772C6.38211 23.5772 1.42276 18.5772 1.42276 12.4797C1.42276 6.38211 6.38211 1.42276 12.4797 1.42276C18.5772 1.42276 23.5772 6.38211 23.5772 12.4797C23.5772 18.5772 18.5772 23.5772 12.4797 23.5772Z"
        fill="#FF9494"
      />
      <path
        d="M16.2204 8.73978C15.9359 8.45523 15.4887 8.45523 15.2042 8.73978L12.4806 11.4634L9.75702 8.73978C9.47247 8.45523 9.02531 8.45523 8.74076 8.73978C8.45621 9.02433 8.45621 9.47149 8.74076 9.75604L11.4643 12.4796L8.74076 15.2032C8.45621 15.4878 8.45621 15.9349 8.74076 16.2195C8.86271 16.3414 9.06596 16.4227 9.22856 16.4227C9.39117 16.4227 9.59442 16.3414 9.71637 16.2195L12.4399 13.4959L15.1635 16.2195C15.2855 16.3414 15.4887 16.4227 15.6513 16.4227C15.8139 16.4227 16.0172 16.3414 16.1391 16.2195C16.4237 15.9349 16.4237 15.4878 16.1391 15.2032L13.4969 12.4796L16.2204 9.75604C16.4643 9.47149 16.4643 9.02433 16.2204 8.73978Z"
        fill="#FF9494"
      />
    </svg>
  );
};

export default CloseMark;


================================================
File: src/components/CommonUI/BlurScreenOverlay.tsx
================================================
import React from "react";
import ComingSoon from "./CommingSoon";

interface BlurScreenOverlayProps {
  children: React.ReactNode;
  title?: string;
  message?: string;
  submessage?: string;
  customOverlayStyle?: string;
  customMessageStyle?: string;
  useCommingSoonComponent?: boolean;
  useFullHightWidth?: boolean;
}
const BlurScreenOverlay: React.FC<BlurScreenOverlayProps> = ({
  children,
  title = "Coming Soon!",
  message = "We're working hard to bring you this feature.",
  submessage = "This feature will be available in the next update.",
  customOverlayStyle = "",
  customMessageStyle = "",
  useCommingSoonComponent = false,
  useFullHightWidth,
}) => {
  return (
    <div className="relative">
      {/* Blur Overlay */}
      <div
        className={`absolute inset-0 z-50 flex items-center justify-center backdrop-blur-sm ${customOverlayStyle}`}
      >
        {useCommingSoonComponent ? (
          <ComingSoon useFullHightWidth={useFullHightWidth} />
        ) : (
          <div
            className={`rounded-lg bg-white/90 p-8 text-center shadow-lg dark:bg-gray-800/90 ${customMessageStyle}`}
          >
            <h2 className="mb-4 text-3xl font-bold text-primary">{title}</h2>
            <p className="mb-2 text-lg text-gray-600 dark:text-gray-300">
              {message}
            </p>
            <p className="text-gray-500 dark:text-gray-400">{submessage}</p>
          </div>
        )}
      </div>

      {/* Original Content (Blurred) */}
      {children}
    </div>
  );
};

export default BlurScreenOverlay;


================================================
File: src/components/CommonUI/Card.tsx
================================================
export default function Card({ children, className = "" }: any) {
  return (
    <div
      className={`bg-white dark:bg-gray-800 rounded-lg shadow-md ${className}`}
    >
      {children}
    </div>
  );
}


================================================
File: src/components/CommonUI/CommingSoon.tsx
================================================
import React from "react";
import { BiTerminal, BiCodeBlock } from "react-icons/bi";
import { GiBarrier } from "react-icons/gi";
// import {
//   GiBarrier
// } from "react-icons/gi";

const ComingSoon = ({
  title = "Feature Coming Soon",
  description = "We're working hard to bring you something amazing. Stay tuned!",
  estimatedTime = "Q1 2025",
  useFullHightWidth = true,
}) => {
  return (
    <div
      className={`${
        useFullHightWidth ? "min-h-full w-full" : ""
      } flex justify-center items-center rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800`}
    >
      <div className="flex h-full flex-col items-center justify-center space-y-6">
        {/* Top Construction Icon */}
        <div className="relative">
          <div className="absolute -left-6 -top-6">
            <GiBarrier className="h-8 w-8 animate-bounce text-primary opacity-50" />
          </div>
          <div className="rounded-full bg-primary/10 p-4 dark:bg-primary/5">
            <div className="relative">
              <BiTerminal className="h-12 w-12 text-primary" />
              <BiCodeBlock className="absolute -right-2 -top-2 h-6 w-6 text-primary" />
            </div>
          </div>
          <div className="absolute -bottom-6 -right-6">
            <GiBarrier className="h-8 w-8 animate-bounce text-primary opacity-50" />
          </div>
        </div>

        {/* Title and Description */}
        <div className="text-center">
          <h2 className="mb-2 text-2xl font-bold text-gray-900 dark:text-white">
            {title}
          </h2>
          <p className="mb-6 text-gray-600 dark:text-gray-300">{description}</p>
        </div>

        {/* Progress Indicator */}
        <div className="w-full max-w-md space-y-2">
          <div className="flex justify-between text-sm text-gray-600 dark:text-gray-400">
            <span>Progress</span>
            <span>60%</span>
          </div>
          <div className="h-2 w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-700">
            <div
              className="h-full w-[60%] rounded-full bg-primary transition-all duration-1000 ease-in-out"
              style={{
                background:
                  "linear-gradient(90deg, rgba(87,80,241,1) 0%, rgba(110,104,242,1) 100%)",
              }}
            />
          </div>
        </div>

        {/* Timeline */}
        <div className="mt-6 flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <div className="h-3 w-3 rounded-full bg-green-500" />
            <span className="text-sm text-gray-600 dark:text-gray-400">
              Planning
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="h-3 w-3 rounded-full bg-blue-500" />
            <span className="text-sm text-gray-600 dark:text-gray-400">
              Development
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="h-3 w-3 rounded-full bg-gray-300 dark:bg-gray-600" />
            <span className="text-sm text-gray-600 dark:text-gray-400">
              Testing
            </span>
          </div>
        </div>

        {/* Estimated Time */}
        <div className="mt-4 rounded-full bg-primary/10 px-4 py-2 text-sm font-medium text-primary dark:bg-primary/5">
          Estimated Release: {estimatedTime}
        </div>
      </div>
    </div>
  );
};

export default ComingSoon;


================================================
File: src/components/CommonUI/Heading.tsx
================================================
interface headingInterFace {
  title: string;
  baseLine?: boolean;
  baselineClassName?: string;
  marginBottom?: string;
  alignCenter?: boolean;
}

export default function Heading({
  title = "",
  baseLine = true,
  baselineClassName = "",
  marginBottom = "mb-4",
  alignCenter = false,
}: headingInterFace) {
  return (
    <h2
      className={`text-xl font-semibold ${
        alignCenter ? "text-center" : "text-start"
      } dark:text-white sm:text-2xl ${marginBottom}`}
    >
      {title}
      {baseLine && <hr className={baselineClassName + "mt-1"} />}
    </h2>
  );
}


================================================
File: src/components/CommonUI/InfoItem.tsx
================================================
import React from "react";

interface InfoItemProps {
  label: string;
  value: string;
  isStatus?: boolean;
}

export const InfoItem: React.FC<InfoItemProps> = ({ label, value, isStatus = false }) => (
  <div className="mb-4">
    <p className="text-sm text-gray-500 dark:text-gray-400 mb-1">{label}</p>
    {isStatus ? (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
        value.toLowerCase() === "active" 
          ? "bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100" 
          : "bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100"
      }`}>
        {value}
      </span>
    ) : (
      <p className="font-medium text-gray-900 dark:text-gray-100">{value || "-"}</p>
    )}
  </div>
);

================================================
File: src/components/CommonUI/ScrollIndicator.tsx
================================================
import { useState, useEffect, useRef, useCallback } from "react";
import type {
  ScrollIndicatorHook,
  ScrollIndicatorButtonProps,
} from "../../types/scrollIndicatorTypes";

export const useScrollIndicator = (): ScrollIndicatorHook => {
  const [isVisible, setIsVisible] = useState(false);
  const navRef = useRef<HTMLElement>(null);

  const checkScroll = useCallback(() => {
    const nav = navRef.current;
    if (!nav) return;

    const hasOverflow = nav.scrollHeight > nav.clientHeight;
    const isAtBottom =
      Math.abs(nav.scrollHeight - nav.clientHeight - nav.scrollTop) < 1;

    setIsVisible(hasOverflow && !isAtBottom);
  }, []);

  useEffect(() => {
    const nav = navRef.current;
    if (!nav) return;

    // Initial check
    checkScroll();

    // Add scroll listener
    nav.addEventListener("scroll", checkScroll);

    // Add resize listener to check if overflow status changes
    const resizeObserver = new ResizeObserver(checkScroll);
    resizeObserver.observe(nav);

    return () => {
      nav.removeEventListener("scroll", checkScroll);
      resizeObserver.disconnect();
    };
  }, [checkScroll]);

  const scrollToBottom = useCallback(() => {
    if (navRef.current) {
      navRef.current.scrollTo({
        top: navRef.current.scrollHeight,
        behavior: "smooth",
      });
    }
  }, []);

  return {
    navRef,
    isVisible,
    scrollToBottom,
  };
};

export const ScrollIndicatorButton: React.FC<ScrollIndicatorButtonProps> = ({
  onClick,
  className = "",
}) => {
  return (
    <button
      onClick={onClick}
      className={`absolute bottom-4 left-[45%] -translate-x-1/2 animate-bounce 
        bg-primary text-white rounded-full p-2 shadow-lg transition-all 
        duration-300 hover:bg-primary/90 focus:outline-none focus:ring-2 
        focus:ring-primary/50 ${className}`}
      aria-label="Scroll to bottom"
      type="button"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <path d="M12 5v14M19 12l-7 7-7-7" />
      </svg>
    </button>
  );
};

export default useScrollIndicator;


================================================
File: src/components/CommonUI/LeadStatus/LeadStatus.tsx
================================================
import InputGroup from "../../FormElements/InputGroup";
import SelectGroupOne from "../../FormElements/SelectGroup/SelectGroupOne";
import { getStoredLostReason, getStoredStatus } from "../../../api/commonAPI";
import { useEffect, useState } from "react";

export default function LeadStatusUI({
  handleInputChange,
  handleSelectChange = () => {},
  formData,
  required = false,
  defaultValue,
  value,
  lostReasonValue,
  statusFieldName = "status",
}: any) {
  const leadStatusList = getStoredStatus(true);
  const leadStatusListRaw = getStoredStatus();
  const lostReasonList = getStoredLostReason(true);
  const [statusIds, setStatusIds] = useState({
    lostStatusId: "",
    wonStatusId: "",
  });

  const findLostWonStatusId = () => {
    const statusId = leadStatusListRaw.find((status) => status.lossStatus);
    const wonStatusId = leadStatusListRaw.find((status) => status.wonStatus);
    setStatusIds({
      lostStatusId: statusId?._id,
      wonStatusId: wonStatusId?._id,
    });
  };

  const renderHiddenField = (fieldName: any) => {
    if (fieldName === statusIds.wonStatusId) {
      return (
        <InputGroup
          label="Won amount in INR"
          name="leadWonAmount"
          type="number"
          value={formData.leadWonAmount}
          onChange={handleInputChange}
          required
        />
      );
    } else if (fieldName === statusIds.lostStatusId) {
      return (
        <SelectGroupOne
          label="Lost Reason"
          required
          options={lostReasonList}
          selectedOption={lostReasonValue}
          setSelectedOption={(value) =>
            handleSelectChange("leadLostReasonId", value)
          }
        />
      );
    }
  };

  useEffect(() => {
    findLostWonStatusId();
  }, []);
  return (
    <>
      <SelectGroupOne
        label="Lead status"
        required={required}
        options={leadStatusList}
        // setSelectedOption={(value) => handleSelectChange(value)}
        setSelectedOption={(value) =>
          handleSelectChange(statusFieldName, value)
        }
        selectedOption={value}
      />
      {renderHiddenField(formData?.status)}
    </>
  );
}


================================================
File: src/components/CommonUI/Loader/MiniLoader.tsx
================================================
import styled from "styled-components";

const MiniLoader = () => {
  return (
    <div className="w-full h-full flex flex-col gap-9 justify-center items-center">
      <StyledWrapper>
        <div className="loader" />
      </StyledWrapper>
      {/* <div>
        <span className="text-4xl font-bold text-black">Connect CRM</span>
      </div> */}
    </div>
  );
};

const StyledWrapper = styled.div`
  .loader {
    width: 44.8px;
    height: 44.8px;
    color: #5750F1;
    position: relative;
    background: radial-gradient(11.2px, currentColor 94%, #0000);
  }

  .loader:before {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: 50%;
    background: radial-gradient(
          10.08px at bottom right,
          #0000 94%,
          currentColor
        )
        top left,
      radial-gradient(10.08px at bottom left, #0000 94%, currentColor) top right,
      radial-gradient(10.08px at top right, #0000 94%, currentColor) bottom left,
      radial-gradient(10.08px at top left, #0000 94%, currentColor) bottom right;
    background-size: 22.4px 22.4px;
    background-repeat: no-repeat;
    animation: loader 1.5s infinite cubic-bezier(0.3, 1, 0, 1);
  }

  @keyframes loader {
    33% {
      inset: -11.2px;
      transform: rotate(0deg);
    }

    66% {
      inset: -11.2px;
      transform: rotate(90deg);
    }

    100% {
      inset: 0;
      transform: rotate(90deg);
    }
  }
`;

export default MiniLoader;


================================================
File: src/components/CommonUI/Loader/index.tsx
================================================
import styled from "styled-components";

const UniversalLoader = () => {
  return (
    <div className="h-screen w-full flex flex-col gap-9 justify-center items-center">
      <StyledWrapper>
        <div>
          <svg
            height="108px"
            width="108px"
            viewBox="0 0 128 128"
            className="loader"
          >
            <defs>
              <clipPath id="loader-eyes">
                <circle
                  transform="rotate(-40,64,64) translate(0,-56)"
                  r={8}
                  cy={64}
                  cx={64}
                  className="loader__eye1"
                />
                <circle
                  transform="rotate(40,64,64) translate(0,-56)"
                  r={8}
                  cy={64}
                  cx={64}
                  className="loader__eye2"
                />
              </clipPath>
              <linearGradient y2={1} x2={0} y1={0} x1={0} id="loader-grad">
                <stop stopColor="#000" offset="0%" />
                <stop stopColor="#fff" offset="100%" />
              </linearGradient>
              <mask id="loader-mask">
                <rect
                  fill="url(#loader-grad)"
                  height={128}
                  width={128}
                  y={0}
                  x={0}
                />
              </mask>
            </defs>
            <g
              strokeDasharray="175.93 351.86"
              strokeWidth={12}
              strokeLinecap="round"
            >
              <g>
                <rect
                  clipPath="url(#loader-eyes)"
                  height={64}
                  width={128}
                  fill="hsl(193,90%,50%)"
                />
                <g stroke="hsl(193,90%,50%)" fill="none">
                  <circle
                    transform="rotate(180,64,64)"
                    r={56}
                    cy={64}
                    cx={64}
                    className="loader__mouth1"
                  />
                  <circle
                    transform="rotate(0,64,64)"
                    r={56}
                    cy={64}
                    cx={64}
                    className="loader__mouth2"
                  />
                </g>
              </g>
              <g mask="url(#loader-mask)">
                <rect
                  clipPath="url(#loader-eyes)"
                  height={64}
                  width={128}
                  fill="hsl(223,90%,50%)"
                />
                <g stroke="hsl(223,90%,50%)" fill="none">
                  <circle
                    transform="rotate(180,64,64)"
                    r={56}
                    cy={64}
                    cx={64}
                    className="loader__mouth1"
                  />
                  <circle
                    transform="rotate(0,64,64)"
                    r={56}
                    cy={64}
                    cx={64}
                    className="loader__mouth2"
                  />
                </g>
              </g>
            </g>
          </svg>
        </div>
      </StyledWrapper>
      <div>
        <span className="text-4xl font-bold text-black">Connect Docs</span>
      </div>
    </div>
  );
};

const StyledWrapper = styled.div`
  .loader {
    width: 8em;
    height: 8em;
  }

  .loader__eye1,
  .loader__eye2,
  .loader__mouth1,
  .loader__mouth2 {
    animation: eye1 3s ease-in-out infinite;
  }

  .loader__eye1,
  .loader__eye2 {
    transform-origin: 64px 64px;
  }

  .loader__eye2 {
    animation-name: eye2;
  }

  .loader__mouth1 {
    animation-name: mouth1;
  }

  .loader__mouth2 {
    animation-name: mouth2;
    visibility: hidden;
  }

  @media (prefers-color-scheme: dark) {
    :root {
      --bg: hsl(var(--hue), 90%, 10%);
      --fg: hsl(var(--hue), 90%, 90%);
    }
  }

  @keyframes eye1 {
    from {
      transform: rotate(-260deg) translate(0, -56px);
    }

    50%,
    60% {
      animation-timing-function: cubic-bezier(0.17, 0, 0.58, 1);
      transform: rotate(-40deg) translate(0, -56px) scale(1);
    }

    to {
      transform: rotate(225deg) translate(0, -56px) scale(0.35);
    }
  }

  @keyframes eye2 {
    from {
      transform: rotate(-260deg) translate(0, -56px);
    }

    50% {
      transform: rotate(40deg) translate(0, -56px) rotate(-40deg) scale(1);
    }

    52.5% {
      transform: rotate(40deg) translate(0, -56px) rotate(-40deg) scale(1, 0);
    }

    55%,
    70% {
      animation-timing-function: cubic-bezier(0, 0, 0.28, 1);
      transform: rotate(40deg) translate(0, -56px) rotate(-40deg) scale(1);
    }

    to {
      transform: rotate(150deg) translate(0, -56px) scale(0.4);
    }
  }

  @keyframes eyeBlink {
    from,
    25%,
    75%,
    to {
      transform: scaleY(1);
    }

    50% {
      transform: scaleY(0);
    }
  }

  @keyframes mouth1 {
    from {
      animation-timing-function: ease-in;
      stroke-dasharray: 0 351.86;
      stroke-dashoffset: 0;
    }

    25% {
      animation-timing-function: ease-out;
      stroke-dasharray: 175.93 351.86;
      stroke-dashoffset: 0;
    }

    50% {
      animation-timing-function: steps(1, start);
      stroke-dasharray: 175.93 351.86;
      stroke-dashoffset: -175.93;
      visibility: visible;
    }

    75%,
    to {
      visibility: hidden;
    }
  }

  @keyframes mouth2 {
    from {
      animation-timing-function: steps(1, end);
      visibility: hidden;
    }

    50% {
      animation-timing-function: ease-in-out;
      visibility: visible;
      stroke-dashoffset: 0;
    }

    to {
      stroke-dashoffset: -351.86;
    }
  }
`;

export default UniversalLoader;


================================================
File: src/components/CommonUI/NoDataFound/BlurTv.tsx
================================================
import styled from "styled-components";

const BlurTv = ({ message = "Check Your Network :(" }) => {
  return (
    <StyledWrapper>
      <div className="main_wrapper">
        <div className="main">
          <div className="antenna">
            <div className="antenna_shadow" />
            <div className="a1" />
            <div className="a1d" />
            <div className="a2" />
            <div className="a2d" />
            <div className="a_base" />
          </div>
          <div className="tv">
            <div className="cruve">
              <svg
                className="curve_svg"
                version="1.1"
                xmlns="http://www.w3.org/2000/svg"
                xmlnsXlink="http://www.w3.org/1999/xlink"
                viewBox="0 0 189.929 189.929"
                xmlSpace="preserve"
              >
                <path
                  d="M70.343,70.343c-30.554,30.553-44.806,72.7-39.102,115.635l-29.738,3.951C-5.442,137.659,11.917,86.34,49.129,49.13
        C86.34,11.918,137.664-5.445,189.928,1.502l-3.95,29.738C143.041,25.54,100.895,39.789,70.343,70.343z"
                />
              </svg>
            </div>
            <div className="display_div">
              <div className="screen_out">
                <div className="screen_out1">
                  <div className="screen">
                    <span className="notfound_text">{message}</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="lines">
              <div className="line1" />
              <div className="line2" />
              <div className="line3" />
            </div>
            <div className="buttons_div">
              <div className="b1">
                <div />
              </div>
              <div className="b2" />
              <div className="speakers">
                <div className="g1">
                  <div className="g11" />
                  <div className="g12" />
                  <div className="g13" />
                </div>
                <div className="g" />
                <div className="g" />
              </div>
            </div>
          </div>
          <div className="bottom">
            <div className="base1" />
            <div className="base2" />
            <div className="base3" />
          </div>
        </div>
      </div>
    </StyledWrapper>
  );
};

const StyledWrapper = styled.div`
  /* Design Inspired by one of Stefan Devai's Design on Dribble */

  .main_wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 30em;
    // height: 30em;
  }

  .main {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-top: 5em;
  }

  .antenna {
    width: 5em;
    height: 5em;
    border-radius: 50%;
    border: 2px solid black;
    background-color: #f27405;
    margin-bottom: -6em;
    margin-left: 0em;
    // z-index: -1;
  }
  .antenna_shadow {
    position: absolute;
    background-color: transparent;
    width: 50px;
    height: 56px;
    margin-left: 1.68em;
    border-radius: 45%;
    transform: rotate(140deg);
    border: 4px solid transparent;
    box-shadow: inset 0px 16px #a85103, inset 0px 16px 1px 1px #a85103;
    -moz-box-shadow: inset 0px 16px #a85103, inset 0px 16px 1px 1px #a85103;
  }
  .antenna::after {
    content: "";
    position: absolute;
    margin-top: -9.4em;
    margin-left: 0.4em;
    transform: rotate(-25deg);
    width: 1em;
    height: 0.5em;
    border-radius: 50%;
    background-color: #f69e50;
  }
  .antenna::before {
    content: "";
    position: absolute;
    margin-top: 0.2em;
    margin-left: 1.25em;
    transform: rotate(-20deg);
    width: 1.5em;
    height: 0.8em;
    border-radius: 50%;
    background-color: #f69e50;
  }
  .a1 {
    position: relative;
    top: -102%;
    left: -130%;
    width: 12em;
    height: 5.5em;
    border-radius: 50px;
    background-image: linear-gradient(
      #171717,
      #171717,
      #353535,
      #353535,
      #171717
    );
    transform: rotate(-29deg);
    clip-path: polygon(50% 0%, 49% 100%, 52% 100%);
  }
  .a1d {
    position: relative;
    top: -211%;
    left: -35%;
    transform: rotate(45deg);
    width: 0.5em;
    height: 0.5em;
    border-radius: 50%;
    border: 2px solid black;
    background-color: #979797;
    z-index: 99;
  }
  .a2 {
    position: relative;
    top: -210%;
    left: -10%;
    width: 12em;
    height: 4em;
    border-radius: 50px;
    background-color: #171717;
    background-image: linear-gradient(
      #171717,
      #171717,
      #353535,
      #353535,
      #171717
    );
    margin-right: 5em;
    clip-path: polygon(
      47% 0,
      47% 0,
      34% 34%,
      54% 25%,
      32% 100%,
      29% 96%,
      49% 32%,
      30% 38%
    );
    transform: rotate(-8deg);
  }
  .a2d {
    position: relative;
    top: -294%;
    left: 94%;
    width: 0.5em;
    height: 0.5em;
    border-radius: 50%;
    border: 2px solid black;
    background-color: #979797;
    z-index: 99;
  }

  .notfound_text {
    background-color: black;
    padding-left: 0.3em;
    padding-right: 0.3em;
    font-size: 0.75em;
    color: white;
    letter-spacing: 0;
    border-radius: 5px;
    z-index: 10;
  }
  .tv {
    width: 17em;
    height: 9em;
    margin-top: 3em;
    border-radius: 15px;
    background-color: #d36604;
    display: flex;
    justify-content: center;
    border: 2px solid #1d0e01;
    box-shadow: inset 0.2em 0.2em #e69635;
  }
  .tv::after {
    content: "";
    position: absolute;
    width: 17em;
    height: 9em;
    border-radius: 15px;
    background: repeating-radial-gradient(
          #d36604 0 0.0001%,
          #00000070 0 0.0002%
        )
        50% 0/2500px 2500px,
      repeating-conic-gradient(#d36604 0 0.0001%, #00000070 0 0.0002%) 60% 60%/2500px
        2500px;
    background-blend-mode: difference;
    opacity: 0.09;
  }
  .curve_svg {
    position: absolute;
    margin-top: 0.25em;
    margin-left: -0.25em;
    height: 12px;
    width: 12px;
  }
  .display_div {
    display: flex;
    align-items: center;
    align-self: center;
    justify-content: center;
    border-radius: 15px;
    box-shadow: 3.5px 3.5px 0px #e69635;
  }
  .screen_out {
    width: auto;
    height: auto;

    border-radius: 10px;
  }
  .screen_out1 {
    width: 11em;
    height: 7.75em;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
  }
  .screen {
    width: 13em;
    height: 7.85em;
    font-family: Montserrat;
    border: 2px solid #1d0e01;
    background: repeating-radial-gradient(#000 0 0.0001%, #ffffff 0 0.0002%) 50%
        0/2500px 2500px,
      repeating-conic-gradient(#000 0 0.0001%, #ffffff 0 0.0002%) 60% 60%/2500px
        2500px;
    background-blend-mode: difference;
    animation: b 0.2s infinite alternate;
    border-radius: 10px;
    z-index: 99;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: #252525;
    letter-spacing: 0.15em;
    text-align: center;
  }
  @keyframes b {
    100% {
      background-position: 50% 0, 60% 50%;
    }
  }

  /* Another Error Screen to Use 

  .screen {
    width: 13em;
    height: 7.85em;
    position: relative;
    background: linear-gradient(to right, #002fc6 0%, #002bb2 14.2857142857%, #3a3a3a 14.2857142857%, #303030 28.5714285714%, #ff0afe 28.5714285714%, #f500f4 42.8571428571%, #6c6c6c 42.8571428571%, #626262 57.1428571429%, #0affd9 57.1428571429%, #00f5ce 71.4285714286%, #3a3a3a 71.4285714286%, #303030 85.7142857143%, white 85.7142857143%, #fafafa 100%);
    border-radius: 10px;
    border: 2px solid black;
    z-index: 99;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: #252525;
    letter-spacing: 0.15em;
    text-align: center;
    overflow: hidden;
  }
  .screen:before, .screen:after {
    content: "";
    position: absolute;
    left: 0;
    z-index: 1;
    width: 100%;
  }
  .screen:before {
    top: 0;
    height: 68.4782608696%;
    background: linear-gradient(to right, white 0%, #fafafa 14.2857142857%, #ffe60a 14.2857142857%, #f5dc00 28.5714285714%, #0affd9 28.5714285714%, #00f5ce 42.8571428571%, #10ea00 42.8571428571%, #0ed600 57.1428571429%, #ff0afe 57.1428571429%, #f500f4 71.4285714286%, #ed0014 71.4285714286%, #d90012 85.7142857143%, #002fc6 85.7142857143%, #002bb2 100%);
  }
  .screen:after {
    bottom: 0;
    height: 21.7391304348%;
    background: linear-gradient(to right, #006c6b 0%, #005857 16.6666666667%, white 16.6666666667%, #fafafa 33.3333333333%, #001b75 33.3333333333%, #001761 50%, #6c6c6c 50%, #626262 66.6666666667%, #929292 66.6666666667%, #888888 83.3333333333%, #3a3a3a 83.3333333333%, #303030 100%);
  }

    */

  .lines {
    display: flex;
    column-gap: 0.1em;
    align-self: flex-end;
  }
  .line1,
  .line3 {
    width: 2px;
    height: 0.5em;
    background-color: black;
    border-radius: 25px 25px 0px 0px;
    margin-top: 0.5em;
  }
  .line2 {
    flex-grow: 1;
    width: 2px;
    height: 1em;
    background-color: black;
    border-radius: 25px 25px 0px 0px;
  }

  .buttons_div {
    width: 4.25em;
    align-self: center;
    height: 8em;
    background-color: #e69635;
    border: 2px solid #1d0e01;
    padding: 0.6em;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    row-gap: 0.75em;
    box-shadow: 3px 3px 0px #e69635;
  }
  .b1 {
    width: 1.65em;
    height: 1.65em;
    border-radius: 50%;
    background-color: #7f5934;
    border: 2px solid black;
    box-shadow: inset 2px 2px 1px #b49577, -2px 0px #513721,
      -2px 0px 0px 1px black;
  }
  .b1::before {
    content: "";
    position: absolute;
    margin-top: 1em;
    margin-left: 0.5em;
    transform: rotate(47deg);
    border-radius: 5px;
    width: 0.1em;
    height: 0.4em;
    background-color: #000000;
  }
  .b1::after {
    content: "";
    position: absolute;
    margin-top: 0.9em;
    margin-left: 0.8em;
    transform: rotate(47deg);
    border-radius: 5px;
    width: 0.1em;
    height: 0.55em;
    background-color: #000000;
  }
  .b1 div {
    content: "";
    position: absolute;
    margin-top: -0.1em;
    margin-left: 0.65em;
    transform: rotate(45deg);
    width: 0.15em;
    height: 1.5em;
    background-color: #000000;
  }
  .b2 {
    width: 1.65em;
    height: 1.65em;
    border-radius: 50%;
    background-color: #7f5934;
    border: 2px solid black;
    box-shadow: inset 2px 2px 1px #b49577, -2px 0px #513721,
      -2px 0px 0px 1px black;
  }
  .b2::before {
    content: "";
    position: absolute;
    margin-top: 1.05em;
    margin-left: 0.8em;
    transform: rotate(-45deg);
    border-radius: 5px;
    width: 0.15em;
    height: 0.4em;
    background-color: #000000;
  }
  .b2::after {
    content: "";
    position: absolute;
    margin-top: -0.1em;
    margin-left: 0.65em;
    transform: rotate(-45deg);
    width: 0.15em;
    height: 1.5em;
    background-color: #000000;
  }
  .speakers {
    display: flex;
    flex-direction: column;
    row-gap: 0.5em;
  }
  .speakers .g1 {
    display: flex;
    column-gap: 0.25em;
  }
  .speakers .g1 .g11,
  .g12,
  .g13 {
    width: 0.65em;
    height: 0.65em;
    border-radius: 50%;
    background-color: #7f5934;
    border: 2px solid black;
    box-shadow: inset 1.25px 1.25px 1px #b49577;
  }
  .speakers .g {
    width: auto;
    height: 2px;
    background-color: #171717;
  }

  .bottom {
    width: 100%;
    height: auto;
    display: flex;
    align-items: center;
    justify-content: center;
    column-gap: 8.7em;
  }
  .base1 {
    height: 1em;
    width: 2em;
    border: 2px solid #171717;
    background-color: #4d4d4d;
    margin-top: -0.15em;
    z-index: -1;
  }
  .base2 {
    height: 1em;
    width: 2em;
    border: 2px solid #171717;
    background-color: #4d4d4d;
    margin-top: -0.15em;
    z-index: -1;
  }
  .base3 {
    position: absolute;
    height: 0.15em;
    width: 17.5em;
    background-color: #171717;
    margin-top: 0.8em;
  }

  .text_404 {
    position: absolute;
    display: flex;
    flex-direction: row;
    column-gap: 6em;
    z-index: -5;
    margin-bottom: 2em;
    align-items: center;
    justify-content: center;
    opacity: 0.5;
    font-family: Montserrat;
  }
  .text_4041 {
    transform: scaleY(24.5) scaleX(9);
  }
  .text_4042 {
    transform: scaleY(24.5) scaleX(9);
  }
  .text_4043 {
    transform: scaleY(24.5) scaleX(9);
  }
`;

export default BlurTv;


================================================
File: src/components/CommonUI/NoDataFound/NoData.tsx
================================================
import React, { useState } from "react";
import { BiSearchAlt2, BiRefresh } from "react-icons/bi";
import { RiEmotionSadLine, RiEmotionLaughLine } from "react-icons/ri";
import ButtonDefault from "../../Buttons/ButtonDefault";

interface NoDataFoundProps {
  title?: string;
  message?: string;
  onRefresh?: () => void;
  showRefresh?: boolean;
}

const NoDataFound: React.FC<NoDataFoundProps> = ({
    title = "No Data Found",
    message = "We searched high and low, but it seems the data is playing hide and seek!",
    onRefresh,
    showRefresh = true
  }) => {
    const [isSearching, setIsSearching] = useState(false);
    const [searchCount, setSearchCount] = useState(0);
  
    const handleSearch = () => {
      setIsSearching(true);
      setSearchCount(prev => prev + 1);
      
      setTimeout(() => {
        setIsSearching(false);
      }, 1500);
    };
  
    const handleRefresh = () => {
      setSearchCount(0);
      onRefresh?.();
    };
  
    const funnyMessages = [
      "Still looking...",
      "Have you seen my data? About this tall 📏",
      "Maybe it's on a coffee break ☕",
      "Plot twist: The data was the friends we made along the way!",
      "404: Data got lost in the cloud ☁️"
    ];
  
    return (
      <div className="flex min-h-[400px] w-full flex-col items-center justify-center p-6">
        {/* Main Illustration */}
        <div className={`relative mb-8 transition-transform duration-500 ${
          isSearching ? 'scale-110' : 'scale-100'
        }`}>
          <svg 
            width="200" 
            height="200" 
            viewBox="0 0 400 400" 
            fill="none" 
            xmlns="http://www.w3.org/2000/svg" 
            className={`transition-transform duration-300 ${isSearching ? 'rotate-6' : 'rotate-0'}`}
          >
            {/* Background Circle */}
            <circle 
              cx="200" 
              cy="200" 
              r="180" 
              fill="#F3F4F6" 
              className="dark:fill-gray-700" 
            />
  
            {/* Magnifying Glass */}
            <g className={`transform transition-transform duration-500 ${
              isSearching ? 'translate-x-5 translate-y-5' : ''
            }`}>
              <circle 
                cx="175" 
                cy="175" 
                r="70" 
                stroke="#5750F1" 
                strokeWidth="20" 
                fill="white"
                className="dark:fill-gray-800" 
              />
              <line 
                x1="225" 
                y1="225" 
                x2="280" 
                y2="280" 
                stroke="#5750F1" 
                strokeWidth="20" 
                strokeLinecap="round" 
              />
            </g>
  
            {/* Floating Documents */}
            <g className="animate-bounce">
              <rect 
                x="120" 
                y="140" 
                width="40" 
                height="50" 
                rx="4" 
                fill="#5750F1" 
                opacity="0.3" 
              />
              <rect 
                x="180" 
                y="160" 
                width="40" 
                height="50" 
                rx="4" 
                fill="#5750F1" 
                opacity="0.5" 
              />
              <rect 
                x="150" 
                y="180" 
                width="40" 
                height="50" 
                rx="4" 
                fill="#5750F1" 
                opacity="0.7" 
              />
            </g>
  
            {/* Search Rings */}
            {isSearching && (
              <>
                <circle 
                  cx="200" 
                  cy="200" 
                  r="120" 
                  stroke="#5750F1" 
                  strokeWidth="2" 
                  className="animate-ping opacity-75" 
                />
                <circle 
                  cx="200" 
                  cy="200" 
                  r="150" 
                  stroke="#5750F1" 
                  strokeWidth="2" 
                  className="animate-ping opacity-50" 
                />
              </>
            )}
          </svg>
        </div>
  
        {/* Text Content */}
        <div className="mb-8 text-center">
          <h2 className="mb-2 text-2xl font-bold text-gray-900 dark:text-white">
            {title}
          </h2>
          <p className="mb-4 text-gray-600 dark:text-gray-300">
            {searchCount > 0 ? funnyMessages[searchCount % funnyMessages.length] : message}
          </p>
        </div>
  
        {/* Action Buttons */}
        <div className="flex gap-4">
          <ButtonDefault
            label="Keep Searching"
            onClick={handleSearch}
            variant="primary"
            disabled={isSearching}
            icon={<BiSearchAlt2 className="h-5 w-5" />}
          />
          
          {showRefresh && (
            <ButtonDefault
              label="Refresh"
              onClick={handleRefresh}
              variant="outline"
              icon={<BiRefresh className={`h-5 w-5 ${isSearching ? 'animate-spin' : ''}`} />}
            />
          )}
        </div>
      </div>
    );
  };
  
  export default NoDataFound;


================================================
File: src/components/CommonUI/StyledComponent/Avatar.tsx
================================================
import styled from "styled-components";

const AvatarMassao = () => {
  return (
    <div className="w-[112px] h-[112px]">
    <StyledWrapper>
      <div className="bo">
        <div className="face">
          {" "}
          <div className="earL" />
          <div className="earR" />
          <div className="eyeL" />
          <div className="eyeR" />
          <div className="hairs" />
          <div className="nose" />
          <div className="mouth" />
          <div className="smileL">
            <svg
              xmlSpace="preserve"
              viewBox="0 0 65 65"
              xmlns="http://www.w3.org/2000/svg"
            >
              <filter id="blurMe">
                <feGaussianBlur in="SourceGraphic" stdDeviation={2} />
              </filter>
              <path
                d="M25 19c-6 2-12 4-18 5-2 0-4-2-6-3 1-1 2-3 3-4 11-3 22-7 32-10 2-1 4 1 6 2-1 1-2 4-3 4-4 2-9 4-14 6z"
                fill="#EF7F71"
                filter="url(#blurMe)"
              />
              <path
                d="M35 35c-6 2-12 4-18 5-2 0-4-2-6-3 1-1 2-3 3-4 11-3 22-7 32-10 2-1 4 1 6 2-1 1-2 4-3 4-4 2-9 4-14 6z"
                fill="#EF7F71"
                filter="url(#blurMe)"
              />
              <path
                d="M45 50c-6 2-12 4-18 5-2 0-4-2-6-3 1-1 2-3 3-4 11-3 22-7 32-10 2-1 4 1 6 2-1 1-2 4-3 4-4 2-9 4-14 6z"
                fill="#EF7F71"
                filter="url(#blurMe)"
              />
            </svg>
          </div>
          <div className="smileR">
            <svg
              xmlSpace="preserve"
              viewBox="0 0 65 65"
              xmlns="http://www.w3.org/2000/svg"
            >
              <filter id="blurMe">
                <feGaussianBlur in="SourceGraphic" stdDeviation={2} />
              </filter>
              <path
                d="M25 19c-6 2-12 4-18 5-2 0-4-2-6-3 1-1 2-3 3-4 11-3 22-7 32-10 2-1 4 1 6 2-1 1-2 4-3 4-4 2-9 4-14 6z"
                fill="#EF7F71"
                filter="url(#blurMe)"
              />
              <path
                d="M35 35c-6 2-12 4-18 5-2 0-4-2-6-3 1-1 2-3 3-4 11-3 22-7 32-10 2-1 4 1 6 2-1 1-2 4-3 4-4 2-9 4-14 6z"
                fill="#EF7F71"
                filter="url(#blurMe)"
              />
              <path
                d="M45 50c-6 2-12 4-18 5-2 0-4-2-6-3 1-1 2-3 3-4 11-3 22-7 32-10 2-1 4 1 6 2-1 1-2 4-3 4-4 2-9 4-14 6z"
                fill="#EF7F71"
                filter="url(#blurMe)"
              />
            </svg>
          </div>
          <div className="snow">
            <div className="mountain-cap-1" />
            <div className="mountain-cap-2" />
            <div className="mountain-cap-3" />
            <div className="mountain-cap-4" />
            <div></div>
          </div>
        </div>
      </div>
    </StyledWrapper>
    </div>
  );
};

const StyledWrapper = styled.div`
  .face {
    position: relative;
    width: 300px;
    height: 350px;
    background-color: #6c757d;
    background: linear-gradient(180deg, #452824 184px, #f2bbad 34px);
    /* transform: translateX(0px); */
    border-top-right-radius: 250px 350px;
    border-top-left-radius: 250px 350px;
    border-bottom-left-radius: 250px 250px;
    border-bottom-right-radius: 250px 250px;
    border: 5px solid black;
  }

  .hairs {
    height: 180px;
    background-color: #f2bbad;
    position: absolute;
    width: 290px;
    border-top-right-radius: 250px 350px;
    border-top-left-radius: 250px 350px;
    top: 25px;
  }

  .snow {
    transform: translateX(150px);
    transform-origin: right;
  }

  .mountain-cap-1,
  .mountain-cap-2,
  .mountain-cap-3,
  .mountain-cap-4 {
    position: absolute;
    top: 20px;
    border-left: 20px solid transparent;
    border-right: 20px solid transparent;
    border-top: 40px solid #452824;
  }

  .mountain-cap-1 {
    left: -65px;
  }

  .mountain-cap-2 {
    left: -35px;
  }

  .mountain-cap-3 {
    left: -5px;
  }

  .mountain-cap-4 {
    left: 25px;
  }

  .earL {
    border-top-right-radius: 250px 350px;
    border-top-left-radius: 250px 350px;
    border-bottom-left-radius: 250px 250px;
    border-bottom-right-radius: 250px 250px;
    height: 70px;
    width: 50px;
    background-color: #f2bbad;
    position: absolute;
    left: -30px;
    top: 150px;
    z-index: -1;
    border: 5px solid black;
  }

  .earR {
    border-top-right-radius: 250px 350px;
    border-top-left-radius: 250px 350px;
    border-bottom-left-radius: 250px 250px;
    border-bottom-right-radius: 250px 250px;
    height: 70px;
    width: 50px;
    background-color: #f2bbad;
    position: absolute;
    right: -30px;
    top: 150px;
    z-index: -4;
    border: 5px solid black;
  }

  .eyeR {
    border-top-right-radius: 250px 350px;
    border-top-left-radius: 250px 350px;
    border-bottom-left-radius: 250px 250px;
    border-bottom-right-radius: 250px 250px;
    height: 10px;
    width: 10px;
    background-color: black;
    position: absolute;
    left: 128px;
    top: 120px;
    z-index: 2;
    animation: blinkR 5s infinite linear;
  }

  .eyeL {
    border-top-right-radius: 250px 350px;
    border-top-left-radius: 250px 350px;
    border-bottom-left-radius: 250px 250px;
    border-bottom-right-radius: 250px 250px;
    height: 10px;
    width: 10px;
    background-color: black;
    position: absolute;
    right: 128px;
    top: 120px;
    z-index: 2;
    animation: blinkL 5s infinite linear;
  }

  .nose {
    background: #fefefe;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    color: #0f0;
    position: absolute;
    top: 220px;
    left: 140px;
    scale: 1 1;
    transition: all ease-in-out 0.3s;
    z-index: 100;
  }

  .nose:hover {
    scale: 1 1.25;
    top: 236px;
  }

  .nose:active {
    animation: propeller 0.5s infinite linear;
    transform-origin: 50% -55px;
    scale: 1 1.25;
    top: 220px;
    animation-delay: 0.5s;
  }

  @keyframes propeller {
    to {
      transform: rotateZ(360deg);
    }
  }

  @keyframes blinkL {
    98% {
      height: 10px;
      width: 10px;
      right: 128px;
      top: 120px;
    }

    100% {
      height: 3px;
      width: 11px;
      right: 126px;
      top: 123px;
    }
  }

  @keyframes blinkR {
    98% {
      height: 10px;
      width: 10px;
      left: 128px;
      top: 120px;
    }

    100% {
      height: 3px;
      width: 11px;
      left: 126px;
      top: 123px;
    }
  }

  .nose:before {
    content: "";
    position: absolute;
    top: -64px;
    left: 50%;
    border: 10px solid transparent;
    border-bottom: 62px solid #fefefe;
    transform: translateX(-50%);
  }

  .mouth {
    position: absolute;
    top: 300px;
    left: 140px;
    background: #a36655;
    width: 25px;
    height: 18px;
    border: 5px solid black;
    border-radius: 50%;
    transition: all 0.3s linear;
  }

  .face:active .mouth {
    top: 290px;
    width: 60px;
    height: 25px;
    left: 123px;
    border-radius: 7px 7px 130px 130px;
  }

  .face:active .smileL {
    height: 30px;
    width: 30px;
  }

  .face:active .smileR {
    height: 30px;
    width: 30px;
  }

  .bo {
    z-index: 10;
    zoom: 0.8;
  }

  .smileL {
    position: absolute;
    height: 0px;
    width: 0px;
    rotate: 310deg;
    top: 180px;
    left: 70px;
    transition: all 0.1s linear;
  }

  .smileR {
    position: absolute;
    height: 0px;
    width: 0px;
    rotate: 310deg;
    top: 180px;
    right: 70px;
    transition: all 0.1s linear;
  }
`;

export default AvatarMassao;


================================================
File: src/components/Dashboard/Overview.tsx
================================================
import { useState, useEffect } from "react";
import {
  FaHandshake,
  FaBriefcase,
  FaUsers,
  FaUserPlus,
  FaUserSecret,
  FaCalendarCheck,
} from "react-icons/fa";
import { FaMoneyBill1Wave } from "react-icons/fa6";
import { MdEventRepeat } from "react-icons/md";
import { HiTrendingUp, HiTrendingDown } from "react-icons/hi";
import DonutCharts from "../Charts/DonutChart";
import ChartTwo from "../Charts/ChartTwo";
import TargetStats from "../TargetStats/TargetStats";
import EmployeePerformance from "../Tables/EmployeePerformance";
import CalendarBox from "../CalenderBox/CalenderBox";
import ChartOne from "../Charts/ChartOne";
import DataStatsOne from "../DataStats/DataStatsOne";
import StatusStats from "../StatusStats/StatusStats";
import DollarIcon from "../Assets/Icons/DashBoardIcons/DollarIcon";
import { API } from "../../api";
import { toast } from "react-toastify";
import MiniLoader from "../CommonUI/Loader/MiniLoader";
import CallReport from "../Tables/DashboardCallReport";

interface DashboardMetrics {
  paymentOverview: {
    chartData: Array<{
      month: string;
      received: number;
      loss: number;
      receivedAmount: number;
      lossAmount: number;
    }>;
    summary: {
      receivedLeads: number;
      lostLeads: number;
    };
  };
  leadSourceMetricss: {
    total: number;
    sources: Array<{
      name: string;
      value: number;
      color: string;
      percentage: string;
    }>;
  };
  topMetrics: Array<{
    value: number;
    change: string;
    title: string;
    color: string;
    webroute: string;
    deeplink: string;
  }>;
  activityMetrics: Array<{
    title: string;
    color: string;
    today: number;
    tomorrow: number;
    leadStatus: string;
    route: string;
  }>;
  performanceMetrics: {
    yearlySales: {
      amount: number;
      count: number;
      title: string;
      color: string;
      percentage: number;
      currency: string;
    };
    monthlySales: {
      amount: number;
      count: number;
      title: string;
      color: string;
      percentage: number;
      currency: string;
    };
    missOpportunity: {
      amount: number;
      count: number;
      title: string;
      color: string;
      percentage: number;
      currency: string;
    };
  };
  employeePerformance: Array<{
    assignedLeads: number;
    totalRevenue: number;
    agent: string;
    closed: number;
    open: number;
    failed: number;
    conversion: string;
    isOnline: boolean;
    revenue: string;
  }>;
}

const getLastMonthDateRange = () => {
  const today = new Date();
  const currentYear = today.getFullYear();
  const currentMonth = today.getMonth(); // 0-11

  // First day of last month
  const firstDay = new Date(currentYear, currentMonth - 1, 1);

  // Last day of last month
  const lastDay = new Date(currentYear, currentMonth, 0);

  // Format dates as YYYY-MM-DD
  const startDate = firstDay.toISOString().split("T")[0];
  const endDate = lastDay.toISOString().split("T")[0];

  return { startDate, endDate };
};

const Overview: React.FC = () => {
  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const dateRange = getLastMonthDateRange();

  const fetchDashboardMetrics = async () => {
    try {
      const response = await API.getAuthAPI("dashboard/metrics", true);
      if (response.error) throw new Error(response.error);
      setMetrics(response.data);
    } catch (error: any) {
      toast.error(error.message || "Failed to fetch dashboard metrics");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDashboardMetrics();
  }, []);

  // Transform topMetrics for DataStatsOne
  const totalStats =
    metrics?.topMetrics.map((metric) => ({
      icon: getIconForMetric(metric.title),
      color: metric.color,
      title: metric.title,
      value: metric.value.toString(),
      webroute: metric.webroute,
      growthRate: parseFloat(metric.change),
    })) || [];

  // Transform activityMetrics for StatusStats
  const statusStats =
    metrics?.activityMetrics.map((metric) => ({
      icon: getIconForStatus(metric.title),
      color: metric.color,
      title: metric.title,
      value: metric.today,
      nextValue: metric.tomorrow,
      growthRate: 0, // Not provided in new API response
      statusId: metric.leadStatus, // Not provided in new API response
    })) || [];

  // Transform performanceMetrics for TargetStats
  const targetStats = [
    {
      icon: <HiTrendingUp />,
      color: metrics?.performanceMetrics.yearlySales.color || "#3FD97F",
      title: metrics?.performanceMetrics.yearlySales.title || "Yearly Sales",
      value: `${metrics?.performanceMetrics.yearlySales.currency}${
        metrics?.performanceMetrics.yearlySales.amount.toLocaleString() || "0"
      }`,
      salesValue: metrics?.performanceMetrics.yearlySales.count || 0,
      growthRate: metrics?.performanceMetrics.yearlySales.percentage || 0,
      positiveSentiment: true,
      targetSalesValue: 60,
    },
    {
      icon: <FaMoneyBill1Wave />,
      color: metrics?.performanceMetrics.monthlySales.color || "#18BFFF",
      title: metrics?.performanceMetrics.monthlySales.title || "Monthly Sales",
      value: `${metrics?.performanceMetrics.monthlySales.currency}${
        metrics?.performanceMetrics.monthlySales.amount.toLocaleString() || "0"
      }`,
      salesValue: metrics?.performanceMetrics.monthlySales.count || 0,
      growthRate: metrics?.performanceMetrics.monthlySales.percentage || 0,
      positiveSentiment: true,
      targetSalesValue: 5,
    },
    {
      icon: <HiTrendingDown />,
      color: metrics?.performanceMetrics.missOpportunity.color || "#FF9C55",
      title:
        metrics?.performanceMetrics.missOpportunity.title || "Miss Opportunity",
      value: `${metrics?.performanceMetrics.missOpportunity.currency}${
        metrics?.performanceMetrics.missOpportunity.amount.toLocaleString() ||
        "0"
      }`,
      salesValue: metrics?.performanceMetrics.missOpportunity.count || 0,
      growthRate: metrics?.performanceMetrics.missOpportunity.percentage || 0,
      positiveSentiment: false,
      targetSalesValue: 18,
    },
  ];

  if (loading) {
    return <MiniLoader />;
  }

  return (
    <>
      <div className="flex flex-col gap-4">
        <DataStatsOne dataList={totalStats} />
        <StatusStats dataList={statusStats} />
        <TargetStats dataList={targetStats} />
      </div>

      <div className="mt-4 grid grid-cols-12 gap-4 md:mt-6 md:gap-6 2xl:mt-9 2xl:gap-7.5">
        <ChartOne paymentOverview={metrics?.paymentOverview || null} />
        <ChartTwo paymentOverview={metrics?.paymentOverview || null} />
        <DonutCharts leadSourceMetrics={metrics?.leadSourceMetricss || null} />
        <div className="col-span-12 xl:col-span-7">
          <CalendarBox widgetModeOn />
        </div>
        <div className="col-span-12 xl:col-span-12">
          <EmployeePerformance data={metrics?.employeePerformance || []} />
        </div>
        <div className="col-span-12 xl:col-span-12">
          <CallReport
            startDate={dateRange.startDate}
            endDate={dateRange.endDate}
          />
        </div>
      </div>
    </>
  );
};

// Helper function to get appropriate icon based on metric title
const getIconForMetric = (title: string) => {
  switch (title) {
    case "All Leads":
      return <FaUsers />;
    case "All Followup Leads":
      return <FaUserPlus />;
    case "All Imported Leads":
      return <DollarIcon />;
    case "All Outsource Leads":
      return <FaUserSecret />;
    default:
      return <FaUsers />;
  }
};

// Helper function to get appropriate icon based on status title
const getIconForStatus = (title: string) => {
  switch (title) {
    case "Call Back":
      return <FaHandshake />;
    case "Meeting":
      return <FaBriefcase />;
    case "Visit":
      return <MdEventRepeat />;
    case "Re-Visit":
      return <FaCalendarCheck />;
    default:
      return <FaHandshake />;
  }
};

export default Overview;


================================================
File: src/components/DataStats/DataStatsOne.tsx
================================================
import { dataStats } from "../../types/dataStats";
import GrowthIconGreen from "../Assets/Icons/DashBoardIcons/GrowthIconGreen";
import FallIconRed from "../Assets/Icons/DashBoardIcons/FallIconRed";
import { Link } from "react-router-dom";

interface DataStatsProps {
  dataList: dataStats[];
}
const DataStatsOne: React.FC<DataStatsProps> = ({ dataList }) => {
  return (
    <>
      <div className="flex w-full gap-4 overflow-auto">
        {dataList.map((item, index) => (
          <Link
            key={item?.title || "DataStatsOne" + index}
            to={item.webroute?.split(".in")[1] || ""}
            className="min-w-[268px] w-full"
          >
            <div
              className="flex w-full  items-center gap-4 rounded-[10px] bg-white p-4 py-1 shadow-1 dark:bg-gray-dark sm:block sm:gap-0 sm:p-6"
            >
              <div
                className="flex min-h-11 min-w-11 items-center justify-center rounded-full text-2xl text-white sm:max-h-14.5 sm:min-h-14.5 sm:min-w-14.5 sm:max-w-14.5"
                style={{ backgroundColor: item.color }}
              >
                {item.icon}
              </div>

              <div className="mt-0 flex items-end justify-between gap-2 sm:mt-6 sm:gap-0">
                <div>
                  <h4 className="mb-1.5 text-heading-6 font-bold text-dark dark:text-white">
                    {item.value}
                  </h4>
                  <span className="text-body-sm font-medium">{item.title}</span>
                </div>

                <span
                  className={`flex items-center gap-1.5 text-body-sm font-medium ${
                    item.growthRate && item.growthRate > 0
                      ? "text-green"
                      : "text-red"
                  }`}
                >
                  {item.growthRate ? `${item.growthRate}%` : null}
                  {item.growthRate && item.growthRate > 0 ? (
                    <GrowthIconGreen />
                  ) : item.growthRate && item.growthRate <= 0 ? (
                    <FallIconRed />
                  ) : null}
                </span>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </>
  );
};

export default DataStatsOne;


================================================
File: src/components/Dropdowns/DropdownDefault.tsx
================================================
import { useState } from "react";
import ClickOutside from "../ClickOutside";

const DropdownDefault = () => {
  const [dropdownOpen, setDropdownOpen] = useState(false);

  return (
    <ClickOutside onClick={() => setDropdownOpen(false)}>
      <div className="relative flex">
        <button
          className="hover:text-primary"
          onClick={() => setDropdownOpen(!dropdownOpen)}
        >
          <svg
            className="fill-current"
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M2 10C3.10457 10 4 9.10457 4 8C4 6.89543 3.10457 6 2 6C0.89543 6 0 6.89543 0 8C0 9.10457 0.89543 10 2 10Z"
              fill=""
            />
            <path
              d="M8 10C9.10457 10 10 9.10457 10 8C10 6.89543 9.10457 6 8 6C6.89543 6 6 6.89543 6 8C6 9.10457 6.89543 10 8 10Z"
              fill=""
            />
            <path
              d="M14 10C15.1046 10 16 9.10457 16 8C16 6.89543 15.1046 6 14 6C12.8954 6 12 6.89543 12 8C12 9.10457 12.8954 10 14 10Z"
              fill=""
            />
          </svg>
        </button>
        {dropdownOpen && (
          <div
            className={`absolute right-0 top-full z-40 w-46.5 space-y-1.5 rounded-[7px] border border-stroke bg-white p-2 shadow-2 dark:border-dark-3 dark:bg-dark-2 dark:shadow-card`}
          >
            <button className="flex w-full items-center gap-2 rounded-lg px-2.5 py-[9px] text-left  font-medium text-dark-4 hover:bg-gray-2 hover:text-dark dark:text-dark-6 dark:hover:bg-dark-3 dark:hover:text-white">
              <svg
                className="fill-current"
                width="18"
                height="18"
                viewBox="0 0 18 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g clipPath="url(#clip0_2575_3985)">
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M8.95697 0.9375L10.125 0.9375C10.4357 0.9375 10.6875 1.18934 10.6875 1.5C10.6875 1.81066 10.4357 2.0625 10.125 2.0625H9C7.21633 2.0625 5.93517 2.06369 4.96018 2.19478C4.00138 2.32369 3.42334 2.56886 2.9961 2.9961C2.56886 3.42334 2.32369 4.00138 2.19478 4.96018C2.06369 5.93517 2.0625 7.21633 2.0625 9C2.0625 10.7837 2.06369 12.0648 2.19478 13.0398C2.32369 13.9986 2.56886 14.5767 2.9961 15.0039C3.42334 15.4311 4.00138 15.6763 4.96018 15.8052C5.93517 15.9363 7.21633 15.9375 9 15.9375C10.7837 15.9375 12.0648 15.9363 13.0398 15.8052C13.9986 15.6763 14.5767 15.4311 15.0039 15.0039C15.4311 14.5767 15.6763 13.9986 15.8052 13.0398C15.9363 12.0648 15.9375 10.7837 15.9375 9V7.875C15.9375 7.56434 16.1893 7.3125 16.5 7.3125C16.8107 7.3125 17.0625 7.56434 17.0625 7.875V9.04303C17.0625 10.7743 17.0625 12.1311 16.9202 13.1897C16.7745 14.2733 16.4705 15.1283 15.7994 15.7994C15.1283 16.4705 14.2733 16.7745 13.1897 16.9202C12.1311 17.0625 10.7743 17.0625 9.04303 17.0625H8.95697C7.22567 17.0625 5.8689 17.0625 4.81028 16.9202C3.72673 16.7745 2.87171 16.4705 2.2006 15.7994C1.5295 15.1283 1.22549 14.2733 1.07981 13.1897C0.937483 12.1311 0.937491 10.7743 0.9375 9.04303V8.95697C0.937491 7.22567 0.937483 5.86889 1.07981 4.81028C1.22549 3.72673 1.5295 2.87171 2.2006 2.2006C2.87171 1.5295 3.72673 1.22549 4.81028 1.07981C5.86889 0.937483 7.22567 0.937491 8.95697 0.9375ZM12.5779 1.70694C13.6038 0.681022 15.2671 0.681022 16.2931 1.70694C17.319 2.73285 17.319 4.39619 16.2931 5.4221L11.307 10.4082C11.0285 10.6867 10.8541 10.8611 10.6594 11.013C10.4302 11.1918 10.1821 11.3451 9.91961 11.4702C9.69676 11.5764 9.46271 11.6544 9.08909 11.7789L6.9107 12.505C6.50851 12.6391 6.0651 12.5344 5.76533 12.2347C5.46556 11.9349 5.36089 11.4915 5.49495 11.0893L6.22108 8.91092C6.34559 8.53729 6.42359 8.30324 6.5298 8.08039C6.65489 7.81791 6.80821 7.56984 6.98703 7.34056C7.13887 7.1459 7.31333 6.97147 7.59183 6.693L12.5779 1.70694ZM15.4976 2.50243C14.911 1.91586 13.96 1.91586 13.3734 2.50243L13.0909 2.7849C13.108 2.85679 13.1318 2.94245 13.1649 3.038C13.2724 3.34779 13.4758 3.75579 13.86 4.13999C14.2442 4.5242 14.6522 4.7276 14.962 4.83508C15.0575 4.86823 15.1432 4.89205 15.2151 4.90907L15.4976 4.62661C16.0841 4.04003 16.0841 3.08901 15.4976 2.50243ZM14.3289 5.79532C13.9419 5.6289 13.4911 5.36209 13.0645 4.93549C12.6379 4.50889 12.3711 4.05812 12.2047 3.67114L8.41313 7.46269C8.10075 7.77508 7.97823 7.89897 7.87411 8.03246C7.74553 8.19731 7.6353 8.37567 7.54536 8.56439C7.47252 8.71722 7.41651 8.8822 7.2768 9.30131L6.95288 10.2731L7.72693 11.0471L8.69869 10.7232C9.1178 10.5835 9.28278 10.5275 9.43561 10.4546C9.62433 10.3647 9.80269 10.2545 9.96754 10.1259C10.101 10.0218 10.2249 9.89926 10.5373 9.58687L14.3289 5.79532Z"
                    fill=""
                  />
                </g>
                <defs>
                  <clipPath id="clip0_2575_3985">
                    <rect width="18" height="18" fill="white" />
                  </clipPath>
                </defs>
              </svg>
              Edit
            </button>
            <button className="flex w-full items-center gap-2 rounded-lg px-2.5 py-[9px] text-left font-medium text-dark-4 hover:bg-gray-2 hover:text-dark dark:text-dark-6 dark:hover:bg-dark-3 dark:hover:text-white">
              <svg
                className="fill-current"
                width="18"
                height="18"
                viewBox="0 0 18 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M7.73202 1.68751H10.2681C10.4304 1.68741 10.5718 1.68732 10.7053 1.70864C11.2328 1.79287 11.6892 2.12186 11.9359 2.59563C11.9984 2.71555 12.043 2.84971 12.0942 3.00371L12.1779 3.25488C12.1921 3.2974 12.1962 3.30943 12.1996 3.31891C12.3309 3.682 12.6715 3.92745 13.0575 3.93723C13.0676 3.93748 13.08 3.93753 13.1251 3.93753H15.3751C15.6857 3.93753 15.9376 4.18937 15.9376 4.50003C15.9376 4.81069 15.6857 5.06253 15.3751 5.06253H2.625C2.31434 5.06253 2.0625 4.81069 2.0625 4.50003C2.0625 4.18937 2.31434 3.93753 2.625 3.93753H4.87506C4.9201 3.93753 4.93253 3.93749 4.94267 3.93723C5.32866 3.92745 5.66918 3.68202 5.80052 3.31893C5.80397 3.30938 5.80794 3.29761 5.82218 3.25488L5.90589 3.00372C5.95711 2.84973 6.00174 2.71555 6.06419 2.59563C6.3109 2.12186 6.76735 1.79287 7.29482 1.70864C7.42834 1.68732 7.56973 1.68741 7.73202 1.68751ZM6.75611 3.93753C6.79475 3.86176 6.82898 3.78303 6.85843 3.70161C6.86737 3.67689 6.87615 3.65057 6.88742 3.61675L6.96227 3.39219C7.03065 3.18706 7.04639 3.14522 7.06201 3.11523C7.14424 2.95731 7.29639 2.84764 7.47222 2.81957C7.50561 2.81423 7.55027 2.81253 7.76651 2.81253H10.2336C10.4499 2.81253 10.4945 2.81423 10.5279 2.81957C10.7037 2.84764 10.8559 2.95731 10.9381 3.11523C10.9537 3.14522 10.9695 3.18705 11.0379 3.39219L11.1127 3.61662L11.1417 3.70163C11.1712 3.78304 11.2054 3.86177 11.244 3.93753H6.75611Z"
                  fill=""
                />
                <path
                  d="M4.43632 6.33761C4.41565 6.02764 4.14762 5.79311 3.83765 5.81377C3.52767 5.83444 3.29314 6.10247 3.31381 6.41245L3.6614 11.6262C3.72552 12.5883 3.77731 13.3654 3.89879 13.9752C4.02509 14.6092 4.23991 15.1387 4.6836 15.5538C5.1273 15.9689 5.66996 16.1481 6.31095 16.2319C6.92747 16.3126 7.70628 16.3125 8.67045 16.3125H9.32963C10.2938 16.3125 11.0727 16.3126 11.6892 16.2319C12.3302 16.1481 12.8728 15.9689 13.3165 15.5538C13.7602 15.1387 13.975 14.6092 14.1013 13.9752C14.2228 13.3654 14.2746 12.5883 14.3387 11.6263L14.6863 6.41245C14.707 6.10247 14.4725 5.83444 14.1625 5.81377C13.8525 5.79311 13.5845 6.02764 13.5638 6.33761L13.2189 11.5119C13.1515 12.5228 13.1034 13.2262 12.998 13.7554C12.8958 14.2688 12.753 14.5405 12.5479 14.7323C12.3429 14.9242 12.0623 15.0485 11.5433 15.1164C11.0082 15.1864 10.3032 15.1875 9.29007 15.1875H8.71005C7.69692 15.1875 6.99192 15.1864 6.45686 15.1164C5.93786 15.0485 5.65724 14.9242 5.45218 14.7323C5.24712 14.5405 5.10438 14.2687 5.00211 13.7554C4.89669 13.2262 4.84867 12.5228 4.78127 11.5119L4.43632 6.33761Z"
                  fill=""
                />
                <path
                  d="M7.0691 7.69032C7.37822 7.65941 7.65387 7.88494 7.68478 8.19406L8.05978 11.9441C8.09069 12.2532 7.86516 12.5288 7.55604 12.5597C7.24692 12.5906 6.97127 12.3651 6.94036 12.056L6.56536 8.306C6.53445 7.99688 6.75998 7.72123 7.0691 7.69032Z"
                  fill=""
                />
                <path
                  d="M10.931 7.69032C11.2402 7.72123 11.4657 7.99688 11.4348 8.306L11.0598 12.056C11.0289 12.3651 10.7532 12.5906 10.4441 12.5597C10.135 12.5288 9.90945 12.2532 9.94036 11.9441L10.3154 8.19406C10.3463 7.88494 10.6219 7.65941 10.931 7.69032Z"
                  fill=""
                />
              </svg>
              Delete
            </button>
          </div>
        )}
      </div>
    </ClickOutside>
  );
};

export default DropdownDefault;


================================================
File: src/components/Dropdowns/DropdownDefaultTwo.tsx
================================================
import { useState } from "react";
import ClickOutside from "../ClickOutside";

const DropdownDefaultTwo = () => {
  const [dropdownOpen, setDropdownOpen] = useState(false);

  return (
    <ClickOutside onClick={() => setDropdownOpen(false)}>
      <div className="relative flex">
        <button
          className="flex items-center justify-center rounded-md bg-white px-1.5 py-[5px] shadow-1 hover:text-dark dark:bg-gray-dark dark:shadow-card dark:hover:text-white"
          onClick={() => setDropdownOpen(!dropdownOpen)}
        >
          <svg
            className="fill-current"
            width="24"
            height="25"
            viewBox="0 0 24 25"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M7 12.5C7 13.6046 6.10457 14.5 5 14.5C3.89543 14.5 3 13.6046 3 12.5C3 11.3954 3.89543 10.5 5 10.5C6.10457 10.5 7 11.3954 7 12.5Z"
              fill=""
            />
            <path
              d="M14 12.5C14 13.6046 13.1046 14.5 12 14.5C10.8954 14.5 10 13.6046 10 12.5C10 11.3954 10.8954 10.5 12 10.5C13.1046 10.5 14 11.3954 14 12.5Z"
              fill=""
            />
            <path
              d="M21 12.5C21 13.6046 20.1046 14.5 19 14.5C17.8954 14.5 17 13.6046 17 12.5C17 11.3954 17.8954 10.5 19 10.5C20.1046 10.5 21 11.3954 21 12.5Z"
              fill=""
            />
          </svg>
        </button>
        {dropdownOpen && (
          <div
            className={`absolute right-0 top-full z-40 w-46.5 space-y-1.5 rounded-[7px] border border-stroke bg-white p-2 shadow-2 dark:border-dark-3 dark:bg-dark-2 dark:shadow-card`}
          >
            <button className="flex w-full items-center gap-2 rounded-lg px-2.5 py-[9px] text-left font-medium text-dark-4 hover:bg-gray-2 hover:text-dark dark:text-dark-6 dark:hover:bg-dark-3 dark:hover:text-white">
              <svg
                className="fill-current"
                width="18"
                height="18"
                viewBox="0 0 18 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g clipPath="url(#clip0_2575_3985)">
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M8.95697 0.9375L10.125 0.9375C10.4357 0.9375 10.6875 1.18934 10.6875 1.5C10.6875 1.81066 10.4357 2.0625 10.125 2.0625H9C7.21633 2.0625 5.93517 2.06369 4.96018 2.19478C4.00138 2.32369 3.42334 2.56886 2.9961 2.9961C2.56886 3.42334 2.32369 4.00138 2.19478 4.96018C2.06369 5.93517 2.0625 7.21633 2.0625 9C2.0625 10.7837 2.06369 12.0648 2.19478 13.0398C2.32369 13.9986 2.56886 14.5767 2.9961 15.0039C3.42334 15.4311 4.00138 15.6763 4.96018 15.8052C5.93517 15.9363 7.21633 15.9375 9 15.9375C10.7837 15.9375 12.0648 15.9363 13.0398 15.8052C13.9986 15.6763 14.5767 15.4311 15.0039 15.0039C15.4311 14.5767 15.6763 13.9986 15.8052 13.0398C15.9363 12.0648 15.9375 10.7837 15.9375 9V7.875C15.9375 7.56434 16.1893 7.3125 16.5 7.3125C16.8107 7.3125 17.0625 7.56434 17.0625 7.875V9.04303C17.0625 10.7743 17.0625 12.1311 16.9202 13.1897C16.7745 14.2733 16.4705 15.1283 15.7994 15.7994C15.1283 16.4705 14.2733 16.7745 13.1897 16.9202C12.1311 17.0625 10.7743 17.0625 9.04303 17.0625H8.95697C7.22567 17.0625 5.8689 17.0625 4.81028 16.9202C3.72673 16.7745 2.87171 16.4705 2.2006 15.7994C1.5295 15.1283 1.22549 14.2733 1.07981 13.1897C0.937483 12.1311 0.937491 10.7743 0.9375 9.04303V8.95697C0.937491 7.22567 0.937483 5.86889 1.07981 4.81028C1.22549 3.72673 1.5295 2.87171 2.2006 2.2006C2.87171 1.5295 3.72673 1.22549 4.81028 1.07981C5.86889 0.937483 7.22567 0.937491 8.95697 0.9375ZM12.5779 1.70694C13.6038 0.681022 15.2671 0.681022 16.2931 1.70694C17.319 2.73285 17.319 4.39619 16.2931 5.4221L11.307 10.4082C11.0285 10.6867 10.8541 10.8611 10.6594 11.013C10.4302 11.1918 10.1821 11.3451 9.91961 11.4702C9.69676 11.5764 9.46271 11.6544 9.08909 11.7789L6.9107 12.505C6.50851 12.6391 6.0651 12.5344 5.76533 12.2347C5.46556 11.9349 5.36089 11.4915 5.49495 11.0893L6.22108 8.91092C6.34559 8.53729 6.42359 8.30324 6.5298 8.08039C6.65489 7.81791 6.80821 7.56984 6.98703 7.34056C7.13887 7.1459 7.31333 6.97147 7.59183 6.693L12.5779 1.70694ZM15.4976 2.50243C14.911 1.91586 13.96 1.91586 13.3734 2.50243L13.0909 2.7849C13.108 2.85679 13.1318 2.94245 13.1649 3.038C13.2724 3.34779 13.4758 3.75579 13.86 4.13999C14.2442 4.5242 14.6522 4.7276 14.962 4.83508C15.0575 4.86823 15.1432 4.89205 15.2151 4.90907L15.4976 4.62661C16.0841 4.04003 16.0841 3.08901 15.4976 2.50243ZM14.3289 5.79532C13.9419 5.6289 13.4911 5.36209 13.0645 4.93549C12.6379 4.50889 12.3711 4.05812 12.2047 3.67114L8.41313 7.46269C8.10075 7.77508 7.97823 7.89897 7.87411 8.03246C7.74553 8.19731 7.6353 8.37567 7.54536 8.56439C7.47252 8.71722 7.41651 8.8822 7.2768 9.30131L6.95288 10.2731L7.72693 11.0471L8.69869 10.7232C9.1178 10.5835 9.28278 10.5275 9.43561 10.4546C9.62433 10.3647 9.80269 10.2545 9.96754 10.1259C10.101 10.0218 10.2249 9.89926 10.5373 9.58687L14.3289 5.79532Z"
                    fill=""
                  />
                </g>
                <defs>
                  <clipPath id="clip0_2575_3985">
                    <rect width="18" height="18" fill="white" />
                  </clipPath>
                </defs>
              </svg>
              Edit
            </button>
            <button className="flex w-full items-center gap-2 rounded-lg px-2.5 py-[9px] text-left font-medium text-dark-4 hover:bg-gray-2 hover:text-dark dark:text-dark-6 dark:hover:bg-dark-3 dark:hover:text-white">
              <svg
                className="fill-current"
                width="18"
                height="18"
                viewBox="0 0 18 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M7.73202 1.68751H10.2681C10.4304 1.68741 10.5718 1.68732 10.7053 1.70864C11.2328 1.79287 11.6892 2.12186 11.9359 2.59563C11.9984 2.71555 12.043 2.84971 12.0942 3.00371L12.1779 3.25488C12.1921 3.2974 12.1962 3.30943 12.1996 3.31891C12.3309 3.682 12.6715 3.92745 13.0575 3.93723C13.0676 3.93748 13.08 3.93753 13.1251 3.93753H15.3751C15.6857 3.93753 15.9376 4.18937 15.9376 4.50003C15.9376 4.81069 15.6857 5.06253 15.3751 5.06253H2.625C2.31434 5.06253 2.0625 4.81069 2.0625 4.50003C2.0625 4.18937 2.31434 3.93753 2.625 3.93753H4.87506C4.9201 3.93753 4.93253 3.93749 4.94267 3.93723C5.32866 3.92745 5.66918 3.68202 5.80052 3.31893C5.80397 3.30938 5.80794 3.29761 5.82218 3.25488L5.90589 3.00372C5.95711 2.84973 6.00174 2.71555 6.06419 2.59563C6.3109 2.12186 6.76735 1.79287 7.29482 1.70864C7.42834 1.68732 7.56973 1.68741 7.73202 1.68751ZM6.75611 3.93753C6.79475 3.86176 6.82898 3.78303 6.85843 3.70161C6.86737 3.67689 6.87615 3.65057 6.88742 3.61675L6.96227 3.39219C7.03065 3.18706 7.04639 3.14522 7.06201 3.11523C7.14424 2.95731 7.29639 2.84764 7.47222 2.81957C7.50561 2.81423 7.55027 2.81253 7.76651 2.81253H10.2336C10.4499 2.81253 10.4945 2.81423 10.5279 2.81957C10.7037 2.84764 10.8559 2.95731 10.9381 3.11523C10.9537 3.14522 10.9695 3.18705 11.0379 3.39219L11.1127 3.61662L11.1417 3.70163C11.1712 3.78304 11.2054 3.86177 11.244 3.93753H6.75611Z"
                  fill=""
                />
                <path
                  d="M4.43632 6.33761C4.41565 6.02764 4.14762 5.79311 3.83765 5.81377C3.52767 5.83444 3.29314 6.10247 3.31381 6.41245L3.6614 11.6262C3.72552 12.5883 3.77731 13.3654 3.89879 13.9752C4.02509 14.6092 4.23991 15.1387 4.6836 15.5538C5.1273 15.9689 5.66996 16.1481 6.31095 16.2319C6.92747 16.3126 7.70628 16.3125 8.67045 16.3125H9.32963C10.2938 16.3125 11.0727 16.3126 11.6892 16.2319C12.3302 16.1481 12.8728 15.9689 13.3165 15.5538C13.7602 15.1387 13.975 14.6092 14.1013 13.9752C14.2228 13.3654 14.2746 12.5883 14.3387 11.6263L14.6863 6.41245C14.707 6.10247 14.4725 5.83444 14.1625 5.81377C13.8525 5.79311 13.5845 6.02764 13.5638 6.33761L13.2189 11.5119C13.1515 12.5228 13.1034 13.2262 12.998 13.7554C12.8958 14.2688 12.753 14.5405 12.5479 14.7323C12.3429 14.9242 12.0623 15.0485 11.5433 15.1164C11.0082 15.1864 10.3032 15.1875 9.29007 15.1875H8.71005C7.69692 15.1875 6.99192 15.1864 6.45686 15.1164C5.93786 15.0485 5.65724 14.9242 5.45218 14.7323C5.24712 14.5405 5.10438 14.2687 5.00211 13.7554C4.89669 13.2262 4.84867 12.5228 4.78127 11.5119L4.43632 6.33761Z"
                  fill=""
                />
                <path
                  d="M7.0691 7.69032C7.37822 7.65941 7.65387 7.88494 7.68478 8.19406L8.05978 11.9441C8.09069 12.2532 7.86516 12.5288 7.55604 12.5597C7.24692 12.5906 6.97127 12.3651 6.94036 12.056L6.56536 8.306C6.53445 7.99688 6.75998 7.72123 7.0691 7.69032Z"
                  fill=""
                />
                <path
                  d="M10.931 7.69032C11.2402 7.72123 11.4657 7.99688 11.4348 8.306L11.0598 12.056C11.0289 12.3651 10.7532 12.5906 10.4441 12.5597C10.135 12.5288 9.90945 12.2532 9.94036 11.9441L10.3154 8.19406C10.3463 7.88494 10.6219 7.65941 10.931 7.69032Z"
                  fill=""
                />
              </svg>
              Delete
            </button>
          </div>
        )}
      </div>
    </ClickOutside>
  );
};

export default DropdownDefaultTwo;


================================================
File: src/components/DynamicDataManagement/DynamicDataManagement.tsx
================================================
import React, { useState, useEffect } from "react";
import { Button, Tooltip } from "antd";
import {
  EyeFilled,
  EditFilled,
  EyeInvisibleFilled,
  DeleteFilled,
} from "@ant-design/icons";
import InputGroup from "../../components/FormElements/InputGroup";
import ButtonDefault from "../../components/Buttons/ButtonDefault";
import CustomAntdTable from "../Tables/CustomAntdTable";
interface Field {
  name: string;
  label: string;
  type: string;
  placeholder?: string;
}

interface DynamicDataManagementProps {
  title: string;
  fields: Field[];
  columns: any[];
  data: any[];
  onAdd: (newItem: any) => void;
  onEdit: (key: string, updatedItem: any) => void;
  onDelete?: (key: string) => void;
  onSoftDelete?: (key: string, status: boolean) => void;
  onUpdate: (key: string, status: boolean) => void;
  customClasses?: string;
  isLoading?: boolean;
}

const DynamicDataManagement: React.FC<DynamicDataManagementProps> = ({
  title,
  fields,
  columns,
  data,
  onAdd,
  onEdit,
  onDelete = () => {},
  onSoftDelete = () => {},
  onUpdate,
  customClasses = "",
  isLoading = false,
}) => {
  const [formData, setFormData] = useState<any>({});
  const [editingKey, setEditingKey] = useState<string | null>(null);
  const [sectionOpen, setSectionOpen] = useState<boolean>(false);

  useEffect(() => {
    const initialFormData = fields.reduce((acc, field) => {
      acc[field.name] = "";
      return acc;
    }, {} as any);
    setFormData(initialFormData);
  }, [fields]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prevData: any) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleColorInputChange = (color: any) => {
    const { name, value } = color;
    setFormData((prevData: any) => ({
      ...prevData,
      [name]: value.toHexString(),
    }));
  };

  const handleSubmit = () => {
    setSectionOpen(false);
    if (editingKey) {
      onEdit(editingKey, formData);
      setEditingKey(null);
    } else {
      onAdd(formData);
    }
    resetForm();
  };

  const resetForm = () => {
    const resetData = fields.reduce((acc, field) => {
      acc[field.name] = "";
      return acc;
    }, {} as any);
    setFormData(resetData);
  };

  const handleEdit = (key: string) => {
    setSectionOpen(true);
    const editingItem = data.find((item) => item.key === key);
    if (editingItem) {
      setFormData(editingItem);
      setEditingKey(key);
    }
  };

  // const handleDelete = (key: string) => {
  //   onDelete(key);
  // };

  const handleUpdate = (key: string, status: boolean) => {
    onUpdate(key, status);
  };

  const actionColumn = {
    title: "Action",
    key: "action",
    render: (_: any, record: any) => (
      <span>
        <Tooltip title="Do you want to use this entry in your CRM ? If yes choose open-eye icon. ">
          <Button
            icon={
              record.isActive ? (
                <EyeFilled />
              ) : (
                <EyeInvisibleFilled className="text-red" />
              )
            }
            onClick={() => onSoftDelete(record.key, record.isActive)}
            className="mr-2 text-green-light dark:bg-transparent dark:disabled:text-gray"
            disabled={record.lossStatus || record.wonStatus}
          />
        </Tooltip>
        <Tooltip title="Use this button to Edit this endtry.">
          <Button
            icon={<EditFilled />}
            onClick={() => handleEdit(record.key)}
            className="mr-2 text-blue-500 dark:bg-transparent"
          />
        </Tooltip>
        {/* <Tooltip title="Use this button to Delete this entry.">
          <Button
            icon={<DeleteFilled />}
            onClick={() => onDelete(record.key)}
            className="text-red-500"
          />
        </Tooltip> */}
      </span>
    ),
    width: 150,
  };

  const tableColumns = [...columns, actionColumn];

  return (
    <div className={`rounded-lg bg-white dark:bg-transparent ${customClasses}`}>
      <div className="mb-4 flex items-center justify-between">
        <h2 className="text-xl font-semibold text-dark dark:text-white sm:text-2xl">
          {title}
        </h2>
        <ButtonDefault
          label={sectionOpen ? "Cancel" : "Add New"}
          onClick={() => setSectionOpen(!sectionOpen)}
        />
      </div>

      {sectionOpen && (
        <div className="mb-4 flex flex-wrap items-end gap-4 lg:flex-nowrap">
          {fields.map((field) => (
            <InputGroup
              key={field.name}
              label={field.label}
              name={field.name}
              type={field.type}
              placeholder={field.placeholder || field.label}
              value={formData[field.name]}
              onChange={handleInputChange}
              colorValue={formData[field.name]}
              colorOnChange={handleColorInputChange}
              customClasses="w-full"
            />
          ))}
          <ButtonDefault
            label={editingKey ? "Update" : "Submit"}
            onClick={handleSubmit}
          />
        </div>
      )}

      <CustomAntdTable
        columns={tableColumns}
        dataSource={data}
        pagination={false}
        className="w-full"
        isLoading={isLoading}
      />

      
    </div>
  );
};

export default DynamicDataManagement;


================================================
File: src/components/Footer/Footer.tsx
================================================

export default function Footer() {
  return (
    <footer className="flex w-full flex-col sm:flex-row items-center justify-center sm:items-center sm:justify-between border-b border-stroke bg-white p-4 dark:border-stroke-dark dark:bg-gray-dark sm:text-sm text-xs gap-2">
      <span className="text-center">
        <a
          href="https://www.codeconnect.in/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Connect Docs{" "}
        </a>{" "}
        <a
          // href="https://www.codeconnect.in/"
          target="_blank"
          rel="noopener noreferrer"
        >
          | Term of Service{" "}
        </a>{" "}
        <a
          // href="https://www.codeconnect.in/"
          target="_blank"
          rel="noopener noreferrer"
        >
          | Privacy Policy{" "}
        </a>{" "}
        <a
          // href="https://forms.gle/7f4nmkJN9zMMfyiH9"
          target="_blank"
          rel="noopener noreferrer"
          className="text-green"
        >
          | Share Feedback
        </a>{" "}
      </span>
      <span>
        All rights reserved{" "}
        <a
          // href="https://www.codeconnect.in/"
          target="_blank"
          rel="noopener noreferrer"
        >
          © Connect Docs
        </a>{" "}
        {new Date().getFullYear()}
      </span>
    </footer>
  );
}


================================================
File: src/components/FormElements/CustomCollapse.tsx
================================================
import { Collapse } from "antd";
import type { CollapseProps } from "antd";

export default function CustomCollapse({ items }: CollapseProps) {
  return (
    <>
      <Collapse items={items} className="bg-primary" />

      <style>{`
        .ant-collapse>.ant-collapse-item >.ant-collapse-header .ant-collapse-arrow{
            color: white;
        }
        .dark .ant-collapse .ant-collapse-content>.ant-collapse-content-box{
        background: #122031;
        }
        .dark .ant-collapse{
            border-color: black;
        }
        .dark .ant-collapse .ant-collapse-content{
            border-color: black;

        }
    `}</style>
    </>
  );
}


================================================
File: src/components/FormElements/MultiSelect.tsx
================================================
import React, { useState, useEffect, useRef } from "react";

interface Option {
  value: string;
  text: string;
  selected: boolean;
  element?: HTMLElement;
}

interface DropdownProps {
  id: string;
  label: string;
  optionsList: { label: string; value: string | number }[];
  required?: boolean;
  disabled?: boolean;
  onChange: (option: string[] | number[]) => void;
}

const MultiSelect: React.FC<DropdownProps> = ({
  id,
  label = "",
  optionsList = [],
  required = false,
  disabled = false,
  onChange = () => {},
}) => {
  const [options, setOptions] = useState<Option[]>([]);
  const [selected, setSelected] = useState<number[]>([]);
  const [show, setShow] = useState(false);
  const dropdownRef = useRef<any>(null);
  const trigger = useRef<any>(null);

  useEffect(() => {
    const loadOptions = () => {
      const select = document.getElementById(id) as HTMLSelectElement | null;
      if (select) {
        const newOptions: Option[] = [];
        for (let i = 0; i < select.options.length; i++) {
          newOptions.push({
            value: select.options[i].value,
            text: select.options[i].innerText,
            selected: select.options[i].hasAttribute("selected"),
          });
        }
        setOptions(newOptions);
      }
    };

    loadOptions();
  }, [id]);

  const open = () => {
    setShow(true);
  };

  const isOpen = () => {
    return show === true;
  };

  const select = (index: number, event: React.MouseEvent) => {
    const newOptions = [...options];

    if (!newOptions[index].selected) {
      newOptions[index].selected = true;
      newOptions[index].element = event.currentTarget as HTMLElement;
      setSelected([...selected, index]);
    } else {
      const selectedIndex = selected.indexOf(index);
      if (selectedIndex !== -1) {
        newOptions[index].selected = false;
        setSelected(selected.filter((i) => i !== index));
      }
    }

    setOptions(newOptions);
  };

  const remove = (index: number) => {
    const newOptions = [...options];
    const selectedIndex = selected.indexOf(index);

    if (selectedIndex !== -1) {
      newOptions[index].selected = false;
      setSelected(selected.filter((i) => i !== index));
      setOptions(newOptions);
    }
  };

  const selectedValues = () => {
    return selected.map((option) => options[option].value);
  };

  useEffect(() => {
    const clickHandler = ({ target }: MouseEvent) => {
      if (!dropdownRef.current) return;
      if (
        !show ||
        dropdownRef.current.contains(target) ||
        trigger.current.contains(target)
      )
        return;
      setShow(false);
    };
    document.addEventListener("click", clickHandler);
    return () => document.removeEventListener("click", clickHandler);
  });

  useEffect(() => {
    onChange(selected);
  }, [selected]);

  return (
    <div className="relative z-50">
      <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
        {label || "Multiselect Dropdown"}
        {required && <span className="text-red"> *</span>}
      </label>
      <div>
        <select
          className="hidden"
          id={id}
          disabled={disabled}
          required={required}
        >
          {optionsList?.map((item) => (
            <option key={item.value} value={item.value}>
              {item.label}
            </option>
          ))}
        </select>

        <div className="flex flex-col items-center">
          <input name="values" type="hidden" defaultValue={selectedValues()} />
          <div className="relative z-20 inline-block w-full">
            <div className="relative flex flex-col items-center">
              <div ref={trigger} onClick={open} className="w-full">
                <div className="mb-2 flex rounded-[7px] border-[1.5px] border-stroke py-[9px] pl-3 pr-3 outline-none transition focus:border-primary active:border-primary dark:border-dark-3 dark:bg-dark-2">
                  <div className="flex flex-auto flex-wrap gap-3">
                    {selected.map((index) => (
                      <div
                        key={index}
                        className="flex items-center justify-center rounded-[5px] border-[.5px] border-stroke bg-gray-2 px-2.5 py-[3px] text-body-sm font-medium dark:border-dark-3 dark:bg-dark"
                      >
                        <div className="max-w-full flex-initial">
                          {options[index].text}
                        </div>
                        <div className="flex flex-auto flex-row-reverse">
                          <div
                            onClick={() => remove(index)}
                            className="cursor-pointer pl-1 hover:text-red"
                          >
                            <svg
                              className="fill-current"
                              role="button"
                              width="12"
                              height="12"
                              viewBox="0 0 12 12"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                fillRule="evenodd"
                                clipRule="evenodd"
                                d="M9.35355 3.35355C9.54882 3.15829 9.54882 2.84171 9.35355 2.64645C9.15829 2.45118 8.84171 2.45118 8.64645 2.64645L6 5.29289L3.35355 2.64645C3.15829 2.45118 2.84171 2.45118 2.64645 2.64645C2.45118 2.84171 2.45118 3.15829 2.64645 3.35355L5.29289 6L2.64645 8.64645C2.45118 8.84171 2.45118 9.15829 2.64645 9.35355C2.84171 9.54882 3.15829 9.54882 3.35355 9.35355L6 6.70711L8.64645 9.35355C8.84171 9.54882 9.15829 9.54882 9.35355 9.35355C9.54882 9.15829 9.54882 8.84171 9.35355 8.64645L6.70711 6L9.35355 3.35355Z"
                                fill=""
                              />
                            </svg>
                          </div>
                        </div>
                      </div>
                    ))}
                    {selected.length === 0 && (
                      <div className="flex-1">
                        <input
                          placeholder="Select an option"
                          className="h-full w-full appearance-none bg-transparent p-1 px-2 text-dark-5 outline-none dark:text-dark-6"
                          defaultValue={selectedValues()}
                        />
                      </div>
                    )}
                  </div>
                  <div className="flex items-center py-1 pl-1 pr-1">
                    <button
                      type="button"
                      onClick={open}
                      className="cursor-pointer text-dark-4 outline-none focus:outline-none dark:text-dark-6"
                    >
                      <svg
                        className="fill-current"
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M3.69149 7.09327C3.91613 6.83119 4.31069 6.80084 4.57277 7.02548L9.99936 11.6768L15.4259 7.02548C15.688 6.80084 16.0826 6.83119 16.3072 7.09327C16.5319 7.35535 16.5015 7.74991 16.2394 7.97455L10.4061 12.9745C10.172 13.1752 9.82667 13.1752 9.59261 12.9745L3.75928 7.97455C3.4972 7.74991 3.46685 7.35535 3.69149 7.09327Z"
                          fill=""
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              <div className="w-full px-4">
                <div
                  className={`max-h-select absolute left-0 top-full z-40 w-full overflow-y-auto rounded bg-white shadow-1 dark:bg-dark-2 dark:shadow-card ${
                    isOpen() ? "" : "hidden"
                  }`}
                  ref={dropdownRef}
                  onFocus={() => setShow(true)}
                  onBlur={() => setShow(false)}
                >
                  <div className="flex w-full flex-col">
                    {options.map((option, index) => (
                      <div key={index}>
                        <div
                          className="w-full cursor-pointer rounded-t border-b border-stroke hover:bg-primary/5 dark:border-dark-3"
                          onClick={(event) => select(index, event)}
                        >
                          <div
                            className={`relative flex w-full items-center border-l-2 border-transparent p-2 pl-2 ${
                              option.selected ? "border-primary" : ""
                            }`}
                          >
                            <div className="flex w-full items-center">
                              <div className="mx-2 leading-6">
                                {option.text}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MultiSelect;


================================================
File: src/components/FormElements/index.tsx
================================================
// "use client";
// import Breadcrumb from "@/components/Breadcrumbs/Breadcrumb";
// import CheckboxFive from "@/components/FormElements/Checkboxes/CheckboxFive";
// import CheckboxFour from "@/components/FormElements/Checkboxes/CheckboxFour";
// import CheckboxOne from "@/components/FormElements/Checkboxes/CheckboxOne";
// import CheckboxThree from "@/components/FormElements/Checkboxes/CheckboxThree";
// import CheckboxTwo from "@/components/FormElements/Checkboxes/CheckboxTwo";
// import SwitcherFour from "@/components/FormElements/Switchers/SwitcherFour";
// import SwitcherOne from "@/components/FormElements/Switchers/SwitcherOne";
// import SwitcherThree from "@/components/FormElements/Switchers/SwitcherThree";
// import SwitcherTwo from "../../../components/FormElements/Switchers/SwitcherTwo";
// import DatePickerTwo from "@/components/FormElements/DatePicker/DatePickerTwo";÷
// // import DatePickerOne from "../../components/FormElements/DatePicker/DatePickerOne";
// // import MultiSelect from "@/components/FormElements/MultiSelect";
// import SelectGroupTwo from "./SelectGroup/SelectGroupTwo";
// import MultiSelect from "./MultiSelect";
// import DatePickerOne from "./DatePicker/DatePickerOne";
// import SelectGroupTwo from "@/components/FormElements/SelectGroup/SelectGroupTwo";


const FormElements = () => {
  return (
    <>
      {/* <Breadcrumb pageName="FormElements" /> */}

      <div className="grid grid-cols-1 gap-9 sm:grid-cols-2">
        <div className="flex flex-col gap-9">
          {/* <!-- Input Fields --> */}
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-6.5 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                Input Fields
              </h3>
            </div>
            <div className="flex flex-col gap-5.5 p-6.5">
              <div>
                <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                  Default Input
                </label>
                <input
                  type="text"
                  placeholder="Default Input"
                  className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5.5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                />
              </div>

              <div>
                <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                  Active Input
                </label>
                <input
                  type="text"
                  placeholder="Active Input"
                  className="w-full rounded-[7px] border-[1.5px] border-primary bg-transparent px-5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:bg-dark-2 dark:text-white"
                />
              </div>

              <div>
                <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                  Disabled label
                </label>
                <input
                  type="text"
                  placeholder="Disabled label"
                  disabled
                  className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary dark:disabled:bg-dark"
                />
              </div>
            </div>
          </div>

          {/* <!-- Toggle switch input --> */}
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-6.5 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                Toggle switch input
              </h3>
            </div>
            <div className="flex flex-col gap-5.5 p-6.5">
              {/* <SwitcherOne />
              <SwitcherTwo />
              <SwitcherThree />
              <SwitcherFour /> */}
            </div>
          </div>

          {/* <!-- Time and date --> */}
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-6.5 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                Time and date
              </h3>
            </div>
            <div className="flex flex-col gap-5.5 p-6.5">
              {/* <DatePickerOne />
              <DatePickerTwo /> */}
            </div>
          </div>

          {/* <!-- File upload --> */}
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-6.5 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                File upload
              </h3>
            </div>
            <div className="flex flex-col gap-5.5 p-6.5">
              <div>
                <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                  Attach file
                </label>
                <input
                  type="file"
                  className="w-full cursor-pointer rounded-[7px] border-[1.5px] border-stroke bg-transparent outline-none transition file:mr-5 file:border-collapse file:cursor-pointer file:border-0 file:border-r file:border-solid file:border-stroke file:bg-[#E2E8F0] file:px-6.5 file:py-[13px] file:text-body-sm file:font-medium file:text-dark-5 file:hover:bg-primary file:hover:bg-opacity-10 focus:border-primary active:border-primary disabled:cursor-default disabled:bg-dark dark:border-dark-3 dark:bg-dark-2 dark:file:border-dark-3 dark:file:bg-white/30 dark:file:text-white dark:focus:border-primary"
                />
              </div>

              <div>
                <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                  Attach file
                </label>
                <input
                  type="file"
                  className="w-full cursor-pointer rounded-[7px] border-[1.5px] border-stroke px-3 py-[9px] outline-none transition file:mr-4 file:rounded file:border-[0.5px] file:border-stroke file:bg-stroke file:px-2.5 file:py-1 file:text-body-xs file:font-medium file:text-dark-5 focus:border-primary file:focus:border-primary active:border-primary disabled:cursor-default disabled:bg-dark dark:border-dark-3 dark:bg-dark-2 dark:file:border-dark-3 dark:file:bg-white/30 dark:file:text-white"
                />
              </div>
            </div>
          </div>
        </div>

        <div className="flex flex-col gap-9">
          {/* <!-- Textarea Fields --> */}
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-6.5 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                Textarea Fields
              </h3>
            </div>
            <div className="flex flex-col gap-6 p-6.5">
              <div>
                <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                  Default textarea
                </label>
                <textarea
                  rows={6}
                  placeholder="Default textarea"
                  className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5.5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                ></textarea>
              </div>

              <div>
                <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                  Active textarea
                </label>
                <textarea
                  rows={6}
                  placeholder="Active textarea"
                  className="w-full rounded-[7px] border-[1.5px] border-primary bg-transparent px-5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:bg-dark-2 dark:text-white"
                ></textarea>
              </div>

              <div>
                <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
                  Disabled textarea
                </label>
                <textarea
                  rows={6}
                  disabled
                  placeholder="Disabled textarea"
                  className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary dark:disabled:bg-dark"
                ></textarea>
              </div>
            </div>
          </div>

          {/* <!-- Checkbox and radio --> */}
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-6.5 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                Checkbox and radio
              </h3>
            </div>
            <div className="flex flex-col gap-5.5 p-6.5">
              {/* <CheckboxOne />
              <CheckboxTwo />
              <CheckboxThree />
              <CheckboxFour />
              <CheckboxFive /> */}
            </div>
          </div>

          {/* <!-- Select input --> */}
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-6.5 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                Select input
              </h3>
            </div>
            <div className="flex flex-col gap-5.5 p-6.5">
              {/* <SelectGroupTwo />
              <MultiSelect
                id="multiSelect"
                label="Multiselect dropdown"
                optionsList={[
                  {
                    label: "Design",
                    value: "1",
                  },
                  {
                    label: "Development",
                    value: "2",
                  },
                  {
                    label: "Option 3",
                    value: "3",
                  },
                ]}
              /> */}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default FormElements;


================================================
File: src/components/FormElements/Checkboxes/CheckboxFive.tsx
================================================
import { useState } from "react";

const CheckboxFive = () => {
  const [isChecked, setIsChecked] = useState<boolean>(false);

  return (
    <div>
      <label
        htmlFor="checkboxLabelFive"
        className="flex cursor-pointer select-none items-center text-body-sm font-medium text-dark dark:text-white"
      >
        <div className="relative">
          <input
            type="checkbox"
            id="checkboxLabelFive"
            className="sr-only"
            onChange={() => {
              setIsChecked(!isChecked);
            }}
          />
          <div
            className={`box mr-2 flex h-5 w-5 items-center justify-center rounded-full border border-primary ${
              isChecked && "!border-4"
            }`}
          >
            <span className="h-2.5 w-2.5 rounded-full bg-white dark:bg-transparent"></span>
          </div>
        </div>
        Checkbox Text
      </label>
    </div>
  );
};

export default CheckboxFive;


================================================
File: src/components/FormElements/Checkboxes/CheckboxFour.tsx
================================================
import { useState } from "react";

const CheckboxFour = () => {
  const [isChecked, setIsChecked] = useState<boolean>(false);

  return (
    <div>
      <label
        htmlFor="checkboxLabelFour"
        className="flex cursor-pointer select-none items-center text-body-sm font-medium text-dark dark:text-white"
      >
        <div className="relative">
          <input
            type="checkbox"
            id="checkboxLabelFour"
            className="sr-only"
            onChange={() => {
              setIsChecked(!isChecked);
            }}
          />
          <div
            className={`mr-2 flex h-5 w-5 items-center justify-center rounded-full border ${
              isChecked
                ? "border-primary bg-gray-2 dark:bg-dark-2"
                : "border-dark-5 dark:border-dark-6"
            }`}
          >
            <span
              className={`h-2.5 w-2.5 rounded-full bg-transparent ${
                isChecked && "!bg-primary"
              }`}
            >
              {" "}
            </span>
          </div>
        </div>
        Checkbox Text
      </label>
    </div>
  );
};

export default CheckboxFour;


================================================
File: src/components/FormElements/Checkboxes/CheckboxOne.tsx
================================================
import { useState } from "react";

const CheckboxOne = () => {
  const [isChecked, setIsChecked] = useState<boolean>(false);

  return (
    <div>
      <label
        htmlFor="checkboxLabelOne"
        className="flex cursor-pointer select-none items-center text-body-sm font-medium"
      >
        <div className="relative">
          <input
            type="checkbox"
            id="checkboxLabelOne"
            className="sr-only"
            onChange={() => {
              setIsChecked(!isChecked);
            }}
          />
          <div
            className={`mr-2 flex h-5 w-5 items-center justify-center rounded border ${
              isChecked
                ? "border-primary bg-gray-2 dark:bg-transparent"
                : "border-dark-5 dark:border-dark-6"
            }`}
          >
            <span
              className={`h-2.5 w-2.5 rounded-sm ${isChecked && "bg-primary"}`}
            ></span>
          </div>
        </div>
        Checkbox Text
      </label>
    </div>
  );
};

export default CheckboxOne;


================================================
File: src/components/FormElements/Checkboxes/CheckboxThree.tsx
================================================
import { useState } from "react";

const CheckboxThree = () => {
  const [isChecked, setIsChecked] = useState<boolean>(false);

  return (
    <div>
      <label
        htmlFor="checkboxLabelThree"
        className="flex cursor-pointer select-none items-center text-body-sm font-medium"
      >
        <div className="relative">
          <input
            type="checkbox"
            id="checkboxLabelThree"
            className="sr-only"
            onChange={() => {
              setIsChecked(!isChecked);
            }}
          />
          <div
            className={`box mr-2 flex h-5 w-5 items-center justify-center rounded border ${
              isChecked
                ? "border-primary bg-gray-2 dark:bg-transparent"
                : "border-dark-5 dark:border-dark-6"
            }`}
          >
            <span
              className={`text-primary opacity-0 ${
                isChecked && "!opacity-100"
              }`}
            >
              <svg
                className="fill-current"
                width="11"
                height="11"
                viewBox="0 0 11 11"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g clipPath="url(#clip0_803_2686)">
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M1.23529 2.29669C0.942402 2.00379 0.942402 1.52892 1.23529 1.23603C1.52819 0.943134 2.00306 0.943134 2.29596 1.23603L5.37433 4.3144L8.45261 1.23612C8.7455 0.943225 9.22038 0.943225 9.51327 1.23612C9.80616 1.52901 9.80616 2.00389 9.51327 2.29678L6.43499 5.37506L9.51327 8.45334C9.80616 8.74624 9.80616 9.22111 9.51327 9.514C9.22038 9.8069 8.7455 9.8069 8.45261 9.514L5.37433 6.43572L2.29596 9.51409C2.00306 9.80699 1.52819 9.80699 1.23529 9.51409C0.942402 9.2212 0.942402 8.74633 1.23529 8.45343L4.31367 5.37506L1.23529 2.29669Z"
                    fill=""
                  />
                </g>
                <defs>
                  <clipPath id="clip0_803_2686">
                    <rect width="10.75" height="10.75" fill="white" />
                  </clipPath>
                </defs>
              </svg>
            </span>
          </div>
        </div>
        Checkbox Text
      </label>
    </div>
  );
};

export default CheckboxThree;


================================================
File: src/components/FormElements/Checkboxes/CheckboxTwo.tsx
================================================
import React from "react";

const CheckboxTwo = ({
  label = "",
  id = "",
  onChange = () => {},
  checked = false,
  idForAPI = "",
}: {
  label?: string;
  id: string;
  onChange?: (value: { value: string; isChecked: boolean }) => void;
  checked?: boolean;
  idForAPI?: string;
}) => {
  return (
    <div>
      <label
        htmlFor={id}
        className="flex cursor-pointer select-none items-center text-body-sm font-medium"
      >
        <div className="relative">
          <input
            type="checkbox"
            id={id}
            className="sr-only"
            checked={checked}
            onChange={() => {
              onChange({
                value: idForAPI ? idForAPI : id,
                isChecked: !checked,
              });
            }}
          />
          <div
            className={`mr-2 flex h-5 w-5 items-center justify-center rounded border ${
              checked
                ? "border-primary bg-gray-2 dark:bg-transparent"
                : "border border-dark-5 dark:border-dark-6"
            }`}
          >
            <span className={`${checked ? "opacity-100" : "opacity-0"}`}>
              <svg
                width="11"
                height="8"
                viewBox="0 0 11 8"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M10.0915 0.951972L10.0867 0.946075L10.0813 0.940568C9.90076 0.753564 9.61034 0.753146 9.42927 0.939309L4.16201 6.22962L1.58507 3.63469C1.40401 3.44841 1.11351 3.44879 0.932892 3.63584C0.755703 3.81933 0.755703 4.10875 0.932892 4.29224L0.932878 4.29225L0.934851 4.29424L3.58046 6.95832C3.73676 7.11955 3.94983 7.2 4.1473 7.2C4.36196 7.2 4.55963 7.11773 4.71406 6.9584L10.0468 1.60234C10.2436 1.4199 10.2421 1.1339 10.0915 0.951972ZM4.2327 6.30081L4.2317 6.2998C4.23206 6.30015 4.23237 6.30049 4.23269 6.30082L4.2327 6.30081Z"
                  fill="#5750F1"
                  stroke="#5750F1"
                  strokeWidth="0.4"
                />
              </svg>
            </span>
          </div>
        </div>
        {label}
      </label>
    </div>
  );
};

export default CheckboxTwo;


================================================
File: src/components/FormElements/DatePicker/AntDateTimePicker.tsx
================================================
import React from "react";
import { DatePicker } from "antd";
import type { DatePickerProps } from "antd";
import dayjs from "dayjs";

interface DateTimePickerProps {
  label?: string;
  onChange: (selectedDates: Date[], dateStr: string) => void;
  enableTime?: boolean;
  defaultValue?: string;
  customClassName?: string;
}

const AntDateTimePicker: React.FC<DateTimePickerProps> = ({
  label,
  onChange,
  enableTime = false,
  defaultValue,
  customClassName = "",
}) => {
  const handleChange: DatePickerProps["onChange"] = (date, dateString) => {
    if (date) {
      const selectedDate = date.toDate();
      onChange([selectedDate], selectedDate.toISOString());
    } else {
      onChange([], "");
    }
  };

  return (
    <div className={customClassName}>
      {label && (
        <label className="mb-1 block text-body-sm font-medium text-dark dark:text-white">
          {label}
        </label>
      )}
      <DatePicker
        className="w-full h-[50px] rounded-[7px] border-[1.5px] border-stroke bg-transparent px-4 py-2.5 
          outline-none transition focus:border-primary active:border-primary 
          dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:placeholder:text-dark-6"
        showTime={enableTime}
        defaultValue={defaultValue ? dayjs(defaultValue) : undefined}
        format={enableTime ? "DD/MM/YYYY - HH:mm" : "DD/MM/YYYY"}
        onChange={handleChange}
        placement="bottomLeft"
        size="large"
        popupClassName="dark:bg-dark-2 dark:border-dark-3"
      />

      <style>{`
        /* General DatePicker Styles */
        .ant-picker {
          background-color: transparent;
        }
        
        .ant-picker:hover {
          border-color: #5750F1;
        }
        
        .ant-picker-focused {
          border-color: #5750F1;
          box-shadow: 0 0 0 2px rgba(87, 80, 241, 0.2);
        }

        /* Icon Colors */
        .ant-picker-suffix, 
        .ant-picker-clear {
          color: #9CA3AF;
        }

        .dark .ant-picker-suffix,
        .dark .ant-picker-clear {
          color: #6B7280;
        }

        /* Dropdown Panel Dark Mode */
        .dark .ant-picker-dropdown {
          background-color: #1F2937;
        }

        .dark .ant-picker-dropdown .ant-picker-time-panel-column:not(:first-child) {
          border-left: 1px solid #374151;
        }

        .dark .ant-picker-dropdown .ant-picker-panel-container {
          background-color: #1F2937;
          border: 1px solid #374151;
        }

        .dark .ant-picker-cell {
          color: #D1D5DB;
        }

        .dark .ant-picker-cell-in-view {
          color: #F3F4F6;
        }

        .dark .ant-picker-cell:hover:not(.ant-picker-cell-selected):not(.ant-picker-cell-range-start):not(.ant-picker-cell-range-end):not(.ant-picker-cell-range-hover-start):not(.ant-picker-cell-range-hover-end) .ant-picker-cell-inner {
          background-color: #374151;
        }

        .dark .ant-picker-cell-selected .ant-picker-cell-inner,
        .dark .ant-picker-cell-range-start .ant-picker-cell-inner,
        .dark .ant-picker-cell-range-end .ant-picker-cell-inner {
          background-color: #5750F1;
          color: white;
        }

        .dark .ant-picker-time-panel-column > li.ant-picker-time-panel-cell-selected .ant-picker-time-panel-cell-inner {
          background-color: #374151;
          color: white;
        }

        .dark .ant-picker-header {
          color: #F3F4F6;
          border-bottom: 1px solid #374151;
        }

        .dark .ant-picker-header button {
          color: #D1D5DB;
        }

        .dark .ant-picker-header button:hover {
          color: #F3F4F6;
        }

        .dark .ant-picker-content th {
          color: #9CA3AF;
        }

        .dark .ant-picker-footer,
        .dark .ant-picker-time-panel-column {
          border-top: 1px solid #374151;
        }

        /* Time Panel Dark Mode */
        .dark .ant-picker-time-panel {
          border-left: 1px solid #374151;
        }

        .dark .ant-picker-time-panel-column > li .ant-picker-time-panel-cell-inner {
          color: #D1D5DB;
        }

        .dark .ant-picker-time-panel-column > li .ant-picker-time-panel-cell-inner:hover {
          background-color: #374151;
        }

        /* Input Dark Mode */
        .dark .ant-picker-input > input {
          color: #F3F4F6;
        }

        .dark .ant-picker-input > input::placeholder {
          color: #6B7280;
        }

        /* Mobile Optimization */
        @media (max-width: 640px) {
          .ant-picker-dropdown {
            width: calc(100vw - 32px) !important;
            min-width: auto !important;
          }

          .ant-picker-time-panel {
            width: 100% !important;
          }

          .ant-picker-datetime-panel {
            display: flex;
            flex-direction: column;
          }

          .ant-picker-time-panel {
            border-top: 1px solid #e5e7eb;
            border-left: none !important;
          }

          .dark .ant-picker-time-panel {
            border-top: 1px solid #374151;
          }
        }
      `}</style>
    </div>
  );
};

export default AntDateTimePicker;


================================================
File: src/components/FormElements/DatePicker/DatePickerOne.tsx
================================================
import React, { useEffect, useRef } from "react";
import flatpickr from "flatpickr";

interface DatePickerOneProps {
  label: string;
  onChange: (selectedDates: Date[], dateStr: string) => void;
  customClassName?: string;
}

const DatePickerOne: React.FC<DatePickerOneProps> = ({
  label,
  onChange,
  customClassName = "",
}) => {
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (inputRef.current) {
      const fp = flatpickr(inputRef.current, {
        mode: "single",
        static: true,
        monthSelectorType: "static",
        dateFormat: "M j, Y",
        prevArrow:
          '<svg class="fill-current" width="7" height="11" viewBox="0 0 7 11"><path d="M5.4 10.8l1.4-1.4-4-4 4-4L5.4 0 0 5.4z" /></svg>',
        nextArrow:
          '<svg class="fill-current" width="7" height="11" viewBox="0 0 7 11"><path d="M1.4 10.8L0 9.4l4-4-4-4L1.4 0l5.4 5.4z" /></svg>',
        onChange: (selectedDates, dateStr) => {
          onChange(selectedDates, dateStr);
        },
      });

      return () => {
        fp.destroy();
      };
    }
  }, [onChange]);

  return (
    <>
      {label && (
        <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
          {label}
        </label>
      )}
      <div className={"relative" + customClassName}>
        <input
          ref={inputRef}
          className="form-datepicker w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal outline-none transition focus:border-primary active:border-primary dark:border-dark-3 dark:bg-dark-2 dark:focus:border-primary"
          placeholder="mm/dd/yyyy"
          data-class="flatpickr-right"
        />

        <div className="pointer-events-none absolute inset-0 left-auto right-5 flex items-center">
          <svg
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M14.166 11.6666C14.6263 11.6666 14.9993 11.2935 14.9993 10.8333C14.9993 10.373 14.6263 9.99992 14.166 9.99992C13.7058 9.99992 13.3327 10.373 13.3327 10.8333C13.3327 11.2935 13.7058 11.6666 14.166 11.6666Z"
              fill="#9CA3AF"
            />
            <path
              d="M14.166 14.9999C14.6263 14.9999 14.9993 14.6268 14.9993 14.1666C14.9993 13.7063 14.6263 13.3333 14.166 13.3333C13.7058 13.3333 13.3327 13.7063 13.3327 14.1666C13.3327 14.6268 13.7058 14.9999 14.166 14.9999Z"
              fill="#9CA3AF"
            />
            <path
              d="M10.8327 10.8333C10.8327 11.2935 10.4596 11.6666 9.99935 11.6666C9.53911 11.6666 9.16602 11.2935 9.16602 10.8333C9.16602 10.373 9.53911 9.99992 9.99935 9.99992C10.4596 9.99992 10.8327 10.373 10.8327 10.8333Z"
              fill="#9CA3AF"
            />
            <path
              d="M10.8327 14.1666C10.8327 14.6268 10.4596 14.9999 9.99935 14.9999C9.53911 14.9999 9.16602 14.6268 9.16602 14.1666C9.16602 13.7063 9.53911 13.3333 9.99935 13.3333C10.4596 13.3333 10.8327 13.7063 10.8327 14.1666Z"
              fill="#9CA3AF"
            />
            <path
              d="M5.83268 11.6666C6.29292 11.6666 6.66602 11.2935 6.66602 10.8333C6.66602 10.373 6.29292 9.99992 5.83268 9.99992C5.37245 9.99992 4.99935 10.373 4.99935 10.8333C4.99935 11.2935 5.37245 11.6666 5.83268 11.6666Z"
              fill="#9CA3AF"
            />
            <path
              d="M5.83268 14.9999C6.29292 14.9999 6.66602 14.6268 6.66602 14.1666C6.66602 13.7063 6.29292 13.3333 5.83268 13.3333C5.37245 13.3333 4.99935 13.7063 4.99935 14.1666C4.99935 14.6268 5.37245 14.9999 5.83268 14.9999Z"
              fill="#9CA3AF"
            />
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M5.83268 1.45825C6.17786 1.45825 6.45768 1.73807 6.45768 2.08325V2.71885C7.00935 2.70824 7.61712 2.70825 8.28556 2.70825H11.713C12.3815 2.70825 12.9893 2.70824 13.541 2.71885V2.08325C13.541 1.73807 13.8208 1.45825 14.166 1.45825C14.5112 1.45825 14.791 1.73807 14.791 2.08325V2.77249C15.0076 2.78901 15.2128 2.80977 15.4069 2.83586C16.3839 2.96722 17.1747 3.24398 17.7983 3.86762C18.4219 4.49126 18.6987 5.28205 18.8301 6.25907C18.9577 7.2084 18.9577 8.42142 18.9577 9.95287V11.7136C18.9577 13.245 18.9577 14.4581 18.8301 15.4074C18.6987 16.3845 18.4219 17.1752 17.7983 17.7989C17.1747 18.4225 16.3839 18.6993 15.4069 18.8306C14.4575 18.9583 13.2445 18.9583 11.7131 18.9583H8.28567C6.75422 18.9583 5.54117 18.9583 4.59183 18.8306C3.61481 18.6993 2.82402 18.4225 2.20039 17.7989C1.57675 17.1752 1.29998 16.3845 1.16863 15.4074C1.04099 14.4581 1.041 13.2451 1.04102 11.7136V9.9529C1.041 8.42144 1.04099 7.20841 1.16863 6.25907C1.29998 5.28205 1.57675 4.49126 2.20039 3.86762C2.82402 3.24398 3.61481 2.96722 4.59183 2.83586C4.78594 2.80977 4.99106 2.78901 5.20768 2.77249V2.08325C5.20768 1.73807 5.48751 1.45825 5.83268 1.45825ZM4.75839 4.07472C3.91998 4.18744 3.43694 4.39883 3.08427 4.7515C2.73159 5.10418 2.5202 5.58722 2.40748 6.42563C2.38839 6.56761 2.37243 6.71709 2.35909 6.87492H17.6396C17.6263 6.71709 17.6103 6.56761 17.5912 6.42563C17.4785 5.58722 17.2671 5.10418 16.9144 4.7515C16.5618 4.39883 16.0787 4.18744 15.2403 4.07472C14.3839 3.95958 13.255 3.95825 11.666 3.95825H8.33268C6.74367 3.95825 5.61478 3.95958 4.75839 4.07472ZM2.29102 9.99992C2.29102 9.28824 2.29128 8.66886 2.30192 8.12492H17.6968C17.7074 8.66886 17.7077 9.28824 17.7077 9.99992V11.6666C17.7077 13.2556 17.7064 14.3845 17.5912 15.2409C17.4785 16.0793 17.2671 16.5623 16.9144 16.915C16.5618 17.2677 16.0787 17.4791 15.2403 17.5918C14.3839 17.7069 13.255 17.7083 11.666 17.7083H8.33268C6.74367 17.7083 5.61478 17.7069 4.75839 17.5918C3.91998 17.4791 3.43694 17.2677 3.08427 16.915C2.73159 16.5623 2.5202 16.0793 2.40748 15.2409C2.29234 14.3845 2.29102 13.2556 2.29102 11.6666V9.99992Z"
              fill="#9CA3AF"
            />
          </svg>
        </div>
      </div>
    </>
  );
};

export default DatePickerOne;


================================================
File: src/components/FormElements/DatePicker/DatePickerTwo.tsx
================================================
import flatpickr from "flatpickr";
import { useEffect } from "react";

const DatePickerTwo = () => {
  useEffect(() => {
    // Init flatpickr
    flatpickr(".form-datepicker", {
      mode: "single",
      static: true,
      monthSelectorType: "static",
      dateFormat: "M j, Y",
      prevArrow:
        '<svg class="fill-current" width="7" height="11" viewBox="0 0 7 11"><path d="M5.4 10.8l1.4-1.4-4-4 4-4L5.4 0 0 5.4z" /></svg>',
      nextArrow:
        '<svg class="fill-current" width="7" height="11" viewBox="0 0 7 11"><path d="M1.4 10.8L0 9.4l4-4-4-4L1.4 0l5.4 5.4z" /></svg>',
    });
  }, []);

  return (
    <div>
      <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
        Select date
      </label>
      <div className="relative">
        <input
          className="form-datepicker w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal outline-none transition focus:border-primary active:border-primary dark:border-dark-3 dark:bg-dark-2 dark:focus:border-primary"
          placeholder="mm/dd/yyyy"
          data-class="flatpickr-right"
        />

        <div className="pointer-events-none absolute inset-0 left-auto right-5 flex items-center text-dark-4 dark:text-dark-6">
          <svg
            className="fill-current"
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M3.69149 7.09327C3.91613 6.83119 4.31069 6.80084 4.57277 7.02548L9.99936 11.6768L15.4259 7.02548C15.688 6.80084 16.0826 6.83119 16.3072 7.09327C16.5319 7.35535 16.5015 7.74991 16.2394 7.97455L10.4061 12.9745C10.172 13.1752 9.82667 13.1752 9.59261 12.9745L3.75928 7.97455C3.4972 7.74991 3.46685 7.35535 3.69149 7.09327Z"
              fill=""
            />
          </svg>
        </div>
      </div>
    </div>
  );
};

export default DatePickerTwo;


================================================
File: src/components/FormElements/DatePicker/DateTimePicker.tsx
================================================
import React, { useEffect, useRef } from "react";
import flatpickr from "flatpickr";

interface DatePickerOneProps {
  label?: string;
  onChange: (selectedDates: Date[], dateStr: string) => void;
  enableTime?: boolean;
  defaultValue?: string;
  customClassName?: string;
}

const DateTimePicker: React.FC<DatePickerOneProps> = ({
  label,
  onChange,
  enableTime = false,
  defaultValue,
  customClassName = "",
}) => {
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (inputRef.current) {
      const fp = flatpickr(inputRef.current, {
        mode: "single",
        static: true,
        monthSelectorType: "static",
        enableTime,
        // minDate: "today",
        dateFormat: "M j, Y H:i",
        time_24hr: true,
        defaultDate: defaultValue, // Set the default value
        prevArrow:
          '<svg class="fill-current" width="7" height="11" viewBox="0 0 7 11"><path d="M5.4 10.8l1.4-1.4-4-4 4-4L5.4 0 0 5.4z" /></svg>',
        nextArrow:
          '<svg class="fill-current" width="7" height="11" viewBox="0 0 7 11"><path d="M1.4 10.8L0 9.4l4-4-4-4L1.4 0l5.4 5.4z" /></svg>',
        onClose: (selectedDates, dateStr) => {
          // Convert to UTC before passing back
          if (selectedDates.length > 0) {
            const utcDate = new Date(selectedDates[0].toUTCString());
            onChange([utcDate], utcDate.toISOString());
          }
        },
      });

      return () => {
        fp.destroy();
      };
    }
  }, [onChange]);

  return (
    <div>
      {label && (
        <label className="mb-1 block text-body-sm font-medium text-dark dark:text-white">
          {label}
        </label>
      )}
      <div className={"relative" + customClassName}>
        <input
          ref={inputRef}
          className="form-datepicker w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5 py-3 font-normal outline-none transition focus:border-primary active:border-primary dark:border-dark-3 dark:bg-dark-2 dark:focus:border-primary"
          placeholder="mm/dd/yyyy"
          defaultValue={defaultValue} // Set default input value
          data-class="flatpickr-right"
        />

        <div className="pointer-events-none absolute inset-0 left-auto right-5 flex items-center">
          <svg
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M14.166 11.6666C14.6263 11.6666 14.9993 11.2935 14.9993 10.8333C14.9993 10.373 14.6263 9.99992 14.166 9.99992C13.7058 9.99992 13.3327 10.373 13.3327 10.8333C13.3327 11.2935 13.7058 11.6666 14.166 11.6666Z"
              fill="#9CA3AF"
            />
            <path
              d="M14.166 14.9999C14.6263 14.9999 14.9993 14.6268 14.9993 14.1666C14.9993 13.7063 14.6263 13.3333 14.166 13.3333C13.7058 13.3333 13.3327 13.7063 13.3327 14.1666C13.3327 14.6268 13.7058 14.9999 14.166 14.9999Z"
              fill="#9CA3AF"
            />
            <path
              d="M10.8327 10.8333C10.8327 11.2935 10.4596 11.6666 9.99935 11.6666C9.53911 11.6666 9.16602 11.2935 9.16602 10.8333C9.16602 10.373 9.53911 9.99992 9.99935 9.99992C10.4596 9.99992 10.8327 10.373 10.8327 10.8333Z"
              fill="#9CA3AF"
            />
            <path
              d="M10.8327 14.1666C10.8327 14.6268 10.4596 14.9999 9.99935 14.9999C9.53911 14.9999 9.16602 14.6268 9.16602 14.1666C9.16602 13.7063 9.53911 13.3333 9.99935 13.3333C10.4596 13.3333 10.8327 13.7063 10.8327 14.1666Z"
              fill="#9CA3AF"
            />
            <path
              d="M5.83268 11.6666C6.29292 11.6666 6.66602 11.2935 6.66602 10.8333C6.66602 10.373 6.29292 9.99992 5.83268 9.99992C5.37245 9.99992 4.99935 10.373 4.99935 10.8333C4.99935 11.2935 5.37245 11.6666 5.83268 11.6666Z"
              fill="#9CA3AF"
            />
            <path
              d="M5.83268 14.9999C6.29292 14.9999 6.66602 14.6268 6.66602 14.1666C6.66602 13.7063 6.29292 13.3333 5.83268 13.3333C5.37245 13.3333 4.99935 13.7063 4.99935 14.1666C4.99935 14.6268 5.37245 14.9999 5.83268 14.9999Z"
              fill="#9CA3AF"
            />
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M5.83268 1.45825C6.17786 1.45825 6.45768 1.73807 6.45768 2.08325V2.71885C7.00935 2.70824 7.61712 2.70825 8.28556 2.70825H11.713C12.3815 2.70825 12.9893 2.70824 13.541 2.71885V2.08325C13.541 1.73807 13.8208 1.45825 14.166 1.45825C14.5112 1.45825 14.791 1.73807 14.791 2.08325V2.77249C15.0076 2.78901 15.2128 2.80977 15.4069 2.83586C16.3839 2.96722 17.1747 3.24398 17.7983 3.86762C18.4219 4.49126 18.6987 5.28205 18.8301 6.25907C18.9577 7.2084 18.9577 8.42142 18.9577 9.95287V11.7136C18.9577 13.245 18.9577 14.4581 18.8301 15.4074C18.6987 16.3845 18.4219 17.1752 17.7983 17.7989C17.1747 18.4225 16.3839 18.6993 15.4069 18.8306C14.4575 18.9583 13.2445 18.9583 11.7131 18.9583H8.28567C6.75422 18.9583 5.54117 18.9583 4.59183 18.8306C3.61481 18.6993 2.82402 18.4225 2.20039 17.7989C1.57675 17.1752 1.29998 16.3845 1.16863 15.4074C1.04099 14.4581 1.041 13.2451 1.04102 11.7136V9.9529C1.041 8.42144 1.04099 7.20841 1.16863 6.25907C1.29998 5.28205 1.57675 4.49126 2.20039 3.86762C2.82402 3.24398 3.61481 2.96722 4.59183 2.83586C4.78594 2.80977 4.99106 2.78901 5.20768 2.77249V2.08325C5.20768 1.73807 5.48751 1.45825 5.83268 1.45825ZM4.75839 4.07472C3.91998 4.18744 3.43694 4.39883 3.08427 4.7515C2.73159 5.10418 2.5202 5.58722 2.40748 6.42563C2.38839 6.56761 2.37243 6.71709 2.35909 6.87492H17.6396C17.6263 6.71709 17.6103 6.56761 17.5912 6.42563C17.4785 5.58722 17.2671 5.10418 16.9144 4.7515C16.5618 4.39883 16.0787 4.18744 15.2403 4.07472C14.3839 3.95958 13.255 3.95825 11.666 3.95825H8.33268C6.74367 3.95825 5.61478 3.95958 4.75839 4.07472ZM2.29102 9.99992C2.29102 9.28824 2.29128 8.66886 2.30192 8.12492H17.6968C17.7074 8.66886 17.7077 9.28824 17.7077 9.99992V11.6666C17.7077 13.2556 17.7064 14.3845 17.5912 15.2409C17.4785 16.0793 17.2671 16.5623 16.9144 16.915C16.5618 17.2677 16.0787 17.4791 15.2403 17.5918C14.3839 17.7069 13.255 17.7083 11.666 17.7083H8.33268C6.74367 17.7083 5.61478 17.7069 4.75839 17.5918C3.91998 17.4791 3.43694 17.2677 3.08427 16.915C2.73159 16.5623 2.5202 16.0793 2.40748 15.2409C2.29234 14.3845 2.29102 13.2556 2.29102 11.6666V9.99992Z"
              fill="#9CA3AF"
            />
          </svg>
        </div>
      </div>
      <style>{`
      .dark .flatpickr-time input{
      color: white
      }
      
      .dark .flatpickr-time .flatpickr-time-separator, .flatpickr-time .flatpickr-am-pm{
      color: white
      }

      .dark .flatpickr-day.flatpickr-disabled, .flatpickr-day .flatpickr-disabled:hover{
      opacity:0.5;
      }
      `}</style>
    </div>
  );
};

export default DateTimePicker;


================================================
File: src/components/FormElements/FileUpload/FileUploadFillType.tsx
================================================
import { Tooltip } from "antd";
import { QuestionCircleOutlined } from "@ant-design/icons";

interface InputGroupProps {
  customClasses?: string;
  label?: string;
  name?: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  value?: string;
  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
  ref?: any;
  id?: string;
  accept?: string;
  tooltipInfo?: string;
}

export default function FileUploadFillType({
  customClasses,
  label = "",
  name,
  placeholder,
  disabled = false,
  required = false,
  value,
  onChange = () => {},
  ref,
  id,
  accept,
  tooltipInfo = "",
}: InputGroupProps) {
  return (
    <div>
      {label && (
        <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
          {label}
        </label>
      )}
      <div className="flex items-center gap-2">
        <input
          type="file"
          ref={ref}
          id={id}
          accept={accept}
          className={`w-full cursor-pointer rounded-[7px] border-[1.5px] border-stroke bg-transparent outline-none transition file:mr-5 file:border-collapse file:cursor-pointer file:border-0 file:border-r file:border-solid file:border-stroke file:bg-[#E2E8F0] file:px-6.5 file:py-[13px] file:text-body-sm file:font-medium file:text-dark-5 file:hover:bg-primary file:hover:bg-opacity-10 focus:border-primary active:border-primary disabled:cursor-default disabled:bg-dark dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:file:border-dark-3 dark:file:bg-white/30 dark:file:text-white dark:focus:border-primary ${customClasses}`}
          onChange={onChange}
          name={name}
          placeholder={placeholder}
          disabled={disabled}
          required={required}
          value={value}
        />
        {tooltipInfo && (
          <Tooltip title={tooltipInfo}>
            <QuestionCircleOutlined className="text-gray-500 dark:text-gray-400" />
          </Tooltip>
        )}
      </div>
    </div>
  );
}


================================================
File: src/components/FormElements/InputGroup/index.tsx
================================================
import { ColorPicker } from "antd";

interface InputGroupProps {
  customClasses?: string;
  label?: string;
  name?: string;
  type?: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  value?: string | number;
  colorValue?: string;
  readOnly?: boolean;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  colorOnChange?: any;
  colorMode?: "single" | "gradient" | ("single" | "gradient")[];
  maxLength?: number;
  pattern?: string;
}

const InputGroup: React.FC<InputGroupProps> = ({
  customClasses,
  label,
  name,
  type,
  placeholder,
  disabled = false,
  required,
  value,
  onChange,
  readOnly = false,
  colorOnChange = () => {},
  colorValue,
  colorMode = "single",
  maxLength,
  pattern = "",
}) => {
  return (
    <>
      <div className={customClasses}>
        {label && (
          <label className="mb-1 block text-body-sm font-medium text-dark dark:text-white">
            {label}
            {required && <span className="text-red"> *</span>}
          </label>
        )}
        {type !== "color" ? (
          <input
            type={type}
            id={name}
            name={name}
            disabled={disabled}
            placeholder={placeholder}
            value={value}
            maxLength={maxLength}
            // pattern={pattern}
            onChange={onChange}
            required={required}
            readOnly={readOnly}
            className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5.5 py-3 text-dark outline-none transition placeholder:text-dark-6 focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary dark:disabled:bg-dark"
          />
        ) : (
          // <input
          //   type={type}
          //   id={name}
          //   name={name}
          //   disabled={disabled}
          //   placeholder={placeholder}
          //   value={value}
          //   onChange={onChange}
          //   required={required}
          //   readOnly={readOnly}
          //   // className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5.5 py-3 text-dark outline-none transition placeholder:text-dark-6 focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary dark:disabled:bg-dark"
          //   // className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5.5 py-3 text-dark outline-none transition placeholder:text-dark-6 focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary dark:disabled:bg-dark"
          // />
          <ColorPicker
            defaultValue="#5750F1"
            showText
            size="large"
            allowClear
            disabled={disabled}
            value={colorValue || "#5750F1"}
            mode={colorMode}
            onChange={(value) => colorOnChange({ name, value })}
            format="hex"
          />
        )}
      </div>
      <style>{`
      .ant-color-picker-trigger.ant-color-picker-lg{
        height: 51px;
        justify-content: center;
        align-items: center;
        padding: 0 10px;
      }
      `}</style>
    </>
  );
};

export default InputGroup;


================================================
File: src/components/FormElements/SelectGroup/SelectGroupOne.tsx
================================================
import React from "react";
import { SelectOption, SelectProps } from "../../../types/selectType";

const SelectGroupOne = ({
  label,
  options,
  selectedOption,
  setSelectedOption,
  customClasses = "",
  wrapperClasses = "",
  customStyles = "",
  disabled = false,
  required = false,
  placeholder = "Select an option",
  allowClear = false,
  isGrouped = false,
}: SelectProps & { allowClear?: boolean; isGrouped?: boolean }) => {
  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedOption?.(event.target.value);
  };

  const handleClear = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setSelectedOption?.("");
  };

  return (
    <div className={`relative ${wrapperClasses}`}>
      {label && (
        <label className="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-200">
          {label} {required && <span className="text-red-500">*</span>}
        </label>
      )}
      <div className="relative">
        <select
          value={selectedOption || ""}
          onChange={handleChange}
          disabled={disabled}
          className={`
            w-full appearance-none rounded-lg border bg-white px-5 py-[15px] text-sm
            transition duration-200 ease-in-out
            focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/20
            disabled:cursor-not-allowed disabled:bg-gray-100
            dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 placeholder:text-dark-6 
            dark:focus:border-primary dark:focus:ring-primary/30
            ${
              disabled
                ? "border-gray-200 text-gray-400"
                : "border-gray-300 text-gray-900"
            }
            ${customClasses}
          `}
          style={customStyles ? JSON.parse(customStyles) : {}}
        >
          <option value="" className="text-dark-6 ">
            {placeholder}
          </option>
          {isGrouped
            ? options.map((group: any) => (
                <optgroup
                  key={group.label}
                  label={group.label}
                  className="font-medium text-gray-900 dark:text-white"
                >
                  {group.options.map((option: SelectOption) => (
                    <option
                      key={option.value}
                      value={option.value}
                      className="py-2 text-gray-800 dark:text-gray-200"
                    >
                      {option.label}
                    </option>
                  ))}
                </optgroup>
              ))
            : options.map((option: SelectOption) => (
                <option
                  key={option.value}
                  value={option.value}
                  className="py-2 text-gray-800 dark:text-gray-200"
                >
                  {option.label}
                </option>
              ))}
        </select>

        <div className="absolute right-0 top-0 flex h-full items-center space-x-1 pr-2">
          {allowClear && selectedOption && (
            <button
              onClick={handleClear}
              className="rounded-full p-1 text-gray-400 transition-colors hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-gray-600 dark:hover:text-gray-300"
              type="button"
            >
              <svg
                className="h-4 w-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          )}

          <div className="pointer-events-none !m-0 p-0 text-gray-500 dark:text-gray-400">
            <svg
              className="h-4 w-4 transition-transform duration-200"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M19 9l-7 7-7-7"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SelectGroupOne;


================================================
File: src/components/FormElements/SelectGroup/SelectGroupThree.tsx
================================================
"use client";
import React, { useState } from "react";

const SelectGroupThree: React.FC = () => {
  const [selectedOption, setSelectedOption] = useState<string>("");
  const [isOptionSelected, setIsOptionSelected] = useState<boolean>(false);

  const changeTextColor = () => {
    setIsOptionSelected(true);
  };

  return (
    <div className="mb-5.5">
      <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
        {" "}
        Which option best describes you?{" "}
      </label>

      <div className="dark:bg-form-input relative z-20 bg-transparent">
        <select
          value={selectedOption}
          onChange={(e) => {
            setSelectedOption(e.target.value);
            changeTextColor();
          }}
          className={`relative z-20 w-full appearance-none rounded border border-stroke bg-transparent px-5 py-3 outline-none transition focus:border-primary active:border-primary dark:border-dark-3 dark:bg-dark-2 dark:focus:border-primary ${
            isOptionSelected ? "text-dark dark:text-white" : ""
          }`}
        >
          <option value="" disabled className="text-body dark:text-bodydark">
            Select your subject
          </option>
          <option value="Student" className="text-body dark:text-bodydark">
            Student
          </option>
          <option
            value="UX/UI Designer"
            className="text-body dark:text-bodydark"
          >
            UX/UI Designer
          </option>
          <option
            value="Web Developer"
            className="text-body dark:text-bodydark"
          >
            Web Developer
          </option>
        </select>

        <span className="absolute right-4 top-1/2 z-30 -translate-y-1/2">
          <svg
            className="fill-current"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g opacity="0.8">
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M5.29289 8.29289C5.68342 7.90237 6.31658 7.90237 6.70711 8.29289L12 13.5858L17.2929 8.29289C17.6834 7.90237 18.3166 7.90237 18.7071 8.29289C19.0976 8.68342 19.0976 9.31658 18.7071 9.70711L12.7071 15.7071C12.3166 16.0976 11.6834 16.0976 11.2929 15.7071L5.29289 9.70711C4.90237 9.31658 4.90237 8.68342 5.29289 8.29289Z"
                fill=""
              ></path>
            </g>
          </svg>
        </span>
      </div>
    </div>
  );
};

export default SelectGroupThree;


================================================
File: src/components/FormElements/SelectGroup/SelectGroupTwo.tsx
================================================
"use client";
import React, { useState } from "react";

const SelectGroupTwo: React.FC = () => {
  const [selectedOption, setSelectedOption] = useState<string>("");
  const [isOptionSelected, setIsOptionSelected] = useState<boolean>(false);

  const changeTextColor = () => {
    setIsOptionSelected(true);
  };

  return (
    <div>
      <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
        Select Country
      </label>

      <div className="relative z-20 rounded-[7px] bg-white dark:bg-dark-2">
        <span className="absolute left-4 top-1/2 z-30 -translate-y-1/2">
          <svg
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g clipPath="url(#clip0_1680_14985)">
              <path
                d="M9.99935 18.3334C5.39697 18.3334 1.66602 14.6024 1.66602 10.0001C1.66602 5.39771 5.39697 1.66675 9.99935 1.66675C14.6017 1.66675 18.3327 5.39771 18.3327 10.0001C18.3327 14.6024 14.6017 18.3334 9.99935 18.3334ZM8.09103 16.3896C7.28887 14.6883 6.79712 12.8119 6.68877 10.8334H3.38426C3.71435 13.4805 5.59634 15.6457 8.09103 16.3896ZM8.35827 10.8334C8.4836 12.8657 9.06418 14.7748 9.99935 16.4601C10.9345 14.7748 11.5151 12.8657 11.6404 10.8334H8.35827ZM16.6144 10.8334H13.3099C13.2016 12.8119 12.7098 14.6883 11.9077 16.3896C14.4023 15.6457 16.2844 13.4805 16.6144 10.8334ZM3.38426 9.16675H6.68877C6.79712 7.18822 7.28887 5.31181 8.09103 3.61055C5.59634 4.35452 3.71435 6.51966 3.38426 9.16675ZM8.35827 9.16675H11.6404C11.5151 7.13443 10.9345 5.22529 9.99935 3.54007C9.06418 5.22529 8.4836 7.13443 8.35827 9.16675ZM11.9077 3.61055C12.7098 5.31181 13.2016 7.18822 13.3099 9.16675H16.6144C16.2844 6.51966 14.4023 4.35452 11.9077 3.61055Z"
                fill="#6B7280"
              />
            </g>
            <defs>
              <clipPath id="clip0_1680_14985">
                <rect width="20" height="20" fill="white" />
              </clipPath>
            </defs>
          </svg>
        </span>

        <select
          value={selectedOption}
          onChange={(e) => {
            setSelectedOption(e.target.value);
            changeTextColor();
          }}
          className={`relative z-10 w-full appearance-none rounded-[7px] border border-stroke bg-transparent px-11.5 py-3 outline-none transition focus:border-primary active:border-primary dark:border-dark-3 dark:bg-dark-2 ${
            isOptionSelected ? "text-dark dark:text-white" : ""
          }`}
        >
          <option value="UnitedStates" className="text-dark-5 dark:text-dark-6">
            United States
          </option>
          <option value="UK" className="text-dark-5 dark:text-dark-6">
            UK
          </option>
          <option value="Canada" className="text-dark-5 dark:text-dark-6">
            Canada
          </option>
        </select>

        <span className="absolute right-4.5 top-1/2 z-10 -translate-y-1/2 text-dark-4 dark:text-dark-6">
          <svg
            className="fill-current"
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M3.69149 7.09327C3.91613 6.83119 4.31069 6.80084 4.57277 7.02548L9.99936 11.6768L15.4259 7.02548C15.688 6.80084 16.0826 6.83119 16.3072 7.09327C16.5319 7.35535 16.5015 7.74991 16.2394 7.97455L10.4061 12.9745C10.172 13.1752 9.82667 13.1752 9.59261 12.9745L3.75928 7.97455C3.4972 7.74991 3.46685 7.35535 3.69149 7.09327Z"
              fill=""
            />
          </svg>
        </span>
      </div>
    </div>
  );
};

export default SelectGroupTwo;


================================================
File: src/components/FormElements/Switchers/SwitcherFour.tsx
================================================
import { useState } from "react";

const SwitcherFour = () => {
  const [enabled, setEnabled] = useState<boolean>(false);

  return (
    <div>
      <label
        htmlFor="toggle4"
        className="flex cursor-pointer select-none items-center"
      >
        <div className="relative">
          <input
            type="checkbox"
            id="toggle4"
            className="sr-only"
            onChange={() => {
              setEnabled(!enabled);
            }}
          />
          <div className="block h-8 w-14 rounded-full bg-[#212B36] dark:bg-primary"></div>
          <div
            className={`absolute left-1 top-1 flex h-6 w-6 items-center justify-center rounded-full bg-white transition ${
              enabled && "!right-1 !translate-x-full"
            }`}
          ></div>
        </div>
      </label>
    </div>
  );
};

export default SwitcherFour;


================================================
File: src/components/FormElements/Switchers/SwitcherOne.tsx
================================================
import { useState } from "react";

const SwitcherOne = () => {
  const [enabled, setEnabled] = useState<boolean>(false);

  return (
    <div>
      <label
        htmlFor="toggle1"
        className="flex cursor-pointer select-none items-center"
      >
        <div className="relative">
          <input
            type="checkbox"
            id="toggle1"
            className="sr-only"
            onChange={() => {
              setEnabled(!enabled);
            }}
          />
          <div className="block h-8 w-14 rounded-full bg-gray-3 dark:bg-[#5A616B]"></div>
          <div
            className={`absolute left-1 top-1 h-6 w-6 rounded-full bg-white shadow-switch-1 transition ${
              enabled && "!right-1 !translate-x-full !bg-primary dark:!bg-white"
            }`}
          ></div>
        </div>
      </label>
    </div>
  );
};

export default SwitcherOne;


================================================
File: src/components/FormElements/Switchers/SwitcherThree.tsx
================================================
import { useState } from "react";

const SwitcherThree = () => {
  const [enabled, setEnabled] = useState(false);

  return (
    <div>
      <label
        htmlFor="toggle3"
        className="flex cursor-pointer select-none items-center"
      >
        <div className="relative">
          <input
            type="checkbox"
            id="toggle3"
            className="sr-only"
            onChange={() => {
              setEnabled(!enabled);
            }}
          />
          <div className="block h-8 w-14 rounded-full bg-gray-3 dark:bg-[#5A616B]"></div>
          <div
            className={`dot absolute left-1 top-1 flex h-6 w-6 items-center justify-center rounded-full bg-white shadow-switch-1 transition ${
              enabled && "!right-1 !translate-x-full !bg-primary dark:!bg-white"
            }`}
          >
            <span className={`hidden ${enabled && "!block"}`}>
              <svg
                className="fill-white dark:fill-dark"
                width="11"
                height="8"
                viewBox="0 0 11 8"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M10.2355 0.812752L10.2452 0.824547C10.4585 1.08224 10.4617 1.48728 10.1855 1.74621L4.85633 7.09869C4.66442 7.29617 4.41535 7.4001 4.14693 7.4001C3.89823 7.4001 3.63296 7.29979 3.43735 7.09851L0.788615 4.43129C0.536589 4.1703 0.536617 3.758 0.788643 3.49701C1.04747 3.22897 1.4675 3.22816 1.72731 3.49457L4.16182 5.94608L9.28643 0.799032C9.54626 0.532887 9.96609 0.533789 10.2248 0.801737L10.2355 0.812752Z"
                  fill=""
                />
              </svg>
            </span>
            <span className={`${enabled && "hidden"}`}>
              <svg
                className="fill-current"
                width="11"
                height="11"
                viewBox="0 0 11 11"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g clipPath="url(#clip0_803_2686)">
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M1.23529 2.29669C0.942402 2.00379 0.942402 1.52892 1.23529 1.23603C1.52819 0.943134 2.00306 0.943134 2.29596 1.23603L5.37433 4.3144L8.45261 1.23612C8.7455 0.943225 9.22038 0.943225 9.51327 1.23612C9.80616 1.52901 9.80616 2.00389 9.51327 2.29678L6.43499 5.37506L9.51327 8.45334C9.80616 8.74624 9.80616 9.22111 9.51327 9.514C9.22038 9.8069 8.7455 9.8069 8.45261 9.514L5.37433 6.43572L2.29596 9.51409C2.00306 9.80699 1.52819 9.80699 1.23529 9.51409C0.942402 9.2212 0.942402 8.74633 1.23529 8.45343L4.31367 5.37506L1.23529 2.29669Z"
                    fill=""
                  />
                </g>
                <defs>
                  <clipPath id="clip0_803_2686">
                    <rect width="10.75" height="10.75" fill="white" />
                  </clipPath>
                </defs>
              </svg>
            </span>
          </div>
        </div>
      </label>
    </div>
  );
};

export default SwitcherThree;


================================================
File: src/components/FormElements/Switchers/SwitcherTwo.tsx
================================================
import { useEffect, useState } from "react";

const SwitcherTwo = ({
  id,
  defaultChecked,
  onChange = () => {},
  idForAPI = "",
  disabled = false,
}: {
  id: string;
  defaultChecked?: boolean;
  onChange?: any;
  idForAPI?: string;
  disabled?: boolean;
}) => {
  const [enabled, setEnabled] = useState(defaultChecked);

  return (
    <div>
      <label
        htmlFor={id}
        className="flex cursor-pointer select-none items-center"
      >
        <div className="relative">
          <input
            id={id}
            type="checkbox"
            className="sr-only"
            onChange={() => {
              onChange(idForAPI ? idForAPI : id, !enabled);
              setEnabled(!enabled);
            }}
            disabled={disabled}
          />
          <div className="h-5 w-14 rounded-full bg-gray-3 dark:bg-[#5A616B]"></div>
          <div
            className={`dot shadow-switch-2 absolute -top-1 left-0 h-7 w-7 rounded-full bg-white transition ${
              enabled &&
              "!right-0 !translate-x-full !bg-primary dark:!bg-green-light"
            }`}
          ></div>
        </div>
      </label>
    </div>
  );
};

export default SwitcherTwo;


================================================
File: src/components/FormElements/TextArea/TextAreaCustom.tsx
================================================

interface TextAreaProps {
  customClasses?: string;
  label?: string;
  name?: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  value?: string | number;
  readOnly?: boolean;
  rows?: number;
  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;
}

export default function TextAreaCustom({
  customClasses,
  label,
  name,
  placeholder,
  disabled = false,
  required,
  value,
  onChange = () => {},
  readOnly = false,
  rows = 6,
}: TextAreaProps) {
  return (
    <div className={customClasses}>
      {label && (
        <label className="mb-1 block text-body-sm font-medium text-dark dark:text-white">
          {label}
          {required && <span className="text-red"> *</span>}
        </label>
      )}
      <textarea
        rows={rows}
        id={name}
        name={name}
        disabled={disabled}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        required={required}
        readOnly={readOnly}
        className="w-full rounded-[7px] border-[1.5px] border-stroke bg-transparent px-5.5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
      />
    </div>
  );
}

================================================
File: src/components/Header/DarkModeSwitcher.tsx
================================================
import useColorMode from "../../hooks/useColorMode";

const DarkModeSwitcher = () => {
  const [colorMode, setColorMode] = useColorMode();

  return (
    <li>
      <div
        onClick={() => {
          if (typeof setColorMode === "function") {
            setColorMode(colorMode === "light" ? "dark" : "light");
          }
        }}
        className={`relative z-10 flex h-12 w-[96px] cursor-pointer items-center gap-2.5 rounded-full bg-gray-3 p-[5px] text-dark dark:bg-[#020d1a] dark:text-white`}
      >
        <div
          className={`absolute left-0.5 top-1/2 z-1 h-9.5 w-9.5 -translate-y-1/2 rounded-full bg-white transition-transform duration-300 ease-in-out dark:bg-dark-3 ${colorMode === "dark" ? "translate-x-[51px]" : "translate-x-[3px]"}`}
        />

        <span className="relative z-10 flex h-9.5 w-full max-w-9.5 items-center justify-center">
          <svg
            className="fill-current"
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M10 1.0415C10.3452 1.0415 10.625 1.32133 10.625 1.6665V2.49984C10.625 2.84502 10.3452 3.12484 10 3.12484C9.65484 3.12484 9.37502 2.84502 9.37502 2.49984V1.6665C9.37502 1.32133 9.65484 1.0415 10 1.0415ZM3.66553 3.66535C3.90961 3.42127 4.30533 3.42127 4.54941 3.66535L4.87678 3.99271C5.12085 4.23679 5.12085 4.63252 4.87678 4.87659C4.6327 5.12067 4.23697 5.12067 3.99289 4.87659L3.66553 4.54923C3.42145 4.30515 3.42145 3.90942 3.66553 3.66535ZM16.3343 3.66556C16.5784 3.90964 16.5784 4.30537 16.3343 4.54945L16.0069 4.87681C15.7629 5.12089 15.3671 5.12089 15.123 4.87681C14.879 4.63273 14.879 4.237 15.123 3.99293L15.4504 3.66556C15.6945 3.42148 16.0902 3.42148 16.3343 3.66556ZM10 5.62484C7.58377 5.62484 5.62502 7.58359 5.62502 9.99984C5.62502 12.4161 7.58377 14.3748 10 14.3748C12.4163 14.3748 14.375 12.4161 14.375 9.99984C14.375 7.58359 12.4163 5.62484 10 5.62484ZM4.37502 9.99984C4.37502 6.89324 6.89342 4.37484 10 4.37484C13.1066 4.37484 15.625 6.89324 15.625 9.99984C15.625 13.1064 13.1066 15.6248 10 15.6248C6.89342 15.6248 4.37502 13.1064 4.37502 9.99984ZM1.04169 9.99984C1.04169 9.65466 1.32151 9.37484 1.66669 9.37484H2.50002C2.8452 9.37484 3.12502 9.65466 3.12502 9.99984C3.12502 10.345 2.8452 10.6248 2.50002 10.6248H1.66669C1.32151 10.6248 1.04169 10.345 1.04169 9.99984ZM16.875 9.99984C16.875 9.65466 17.1548 9.37484 17.5 9.37484H18.3334C18.6785 9.37484 18.9584 9.65466 18.9584 9.99984C18.9584 10.345 18.6785 10.6248 18.3334 10.6248H17.5C17.1548 10.6248 16.875 10.345 16.875 9.99984ZM15.123 15.1229C15.3671 14.8788 15.7629 14.8788 16.0069 15.1229L16.3343 15.4502C16.5784 15.6943 16.5784 16.09 16.3343 16.3341C16.0902 16.5782 15.6945 16.5782 15.4504 16.3341L15.123 16.0067C14.879 15.7627 14.879 15.3669 15.123 15.1229ZM4.87678 15.1231C5.12085 15.3672 5.12085 15.7629 4.87678 16.007L4.54941 16.3343C4.30533 16.5784 3.90961 16.5784 3.66553 16.3343C3.42145 16.0903 3.42145 15.6945 3.66553 15.4504L3.99289 15.1231C4.23697 14.879 4.6327 14.879 4.87678 15.1231ZM10 16.8748C10.3452 16.8748 10.625 17.1547 10.625 17.4998V18.3332C10.625 18.6783 10.3452 18.9582 10 18.9582C9.65484 18.9582 9.37502 18.6783 9.37502 18.3332V17.4998C9.37502 17.1547 9.65484 16.8748 10 16.8748Z"
              fill=""
            />
          </svg>
        </span>
        <span className="relative z-10 flex h-9.5 w-full max-w-9.5 items-center justify-center">
          <svg
            className="fill-current"
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M9.18118 2.33448C5.30895 2.74335 2.29169 6.01923 2.29169 9.99984C2.29169 14.257 5.74283 17.7082 10 17.7082C13.9806 17.7082 17.2565 14.6909 17.6654 10.8187C16.5598 12.2222 14.8439 13.1248 12.9167 13.1248C9.57997 13.1248 6.87502 10.4199 6.87502 7.08317C6.87502 5.15599 7.77765 3.44009 9.18118 2.33448ZM1.04169 9.99984C1.04169 5.05229 5.05247 1.0415 10 1.0415C10.5972 1.0415 10.8962 1.51755 10.9474 1.89673C10.9967 2.26148 10.8618 2.72538 10.4426 2.97873C9.05223 3.81884 8.12502 5.34302 8.12502 7.08317C8.12502 9.72954 10.2703 11.8748 12.9167 11.8748C14.6568 11.8748 16.181 10.9476 17.0211 9.55731C17.2745 9.13804 17.7384 9.00321 18.1031 9.05247C18.4823 9.10368 18.9584 9.40265 18.9584 9.99984C18.9584 14.9474 14.9476 18.9582 10 18.9582C5.05247 18.9582 1.04169 14.9474 1.04169 9.99984Z"
              fill=""
            />
          </svg>
        </span>
      </div>
    </li>
  );
};

export default DarkModeSwitcher;


================================================
File: src/components/Header/DropdownNotification.tsx
================================================
import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import ClickOutside from "../ClickOutside";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import {
  MdOutlineNotifications,
  MdCalendarToday,
  MdPersonAdd,
} from "react-icons/md";
import { FiBell, FiAlertCircle } from "react-icons/fi";
import { toast } from "react-toastify";
import { API } from "../../api";

dayjs.extend(relativeTime);

interface Notification {
  _id: string;
  companyId: string;
  userId: string;
  titleTemplate: string;
  bodyTemplate: string;
  seenStatus: boolean;
  createdAt: string;
  updatedAt: string;
}

const DropdownNotification = () => {
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [unSeenNotifIds, setUnSeenNotifIds] = useState([]);

  const fetchNotifications = async () => {
    try {
      setIsLoading(true);
      const response = await API.getAuthAPI("getNotification", true);

      if (response.error) {
        throw new Error(response.error);
      }

      setNotifications(response.data || []);
      const unseenIds =
        response.data
          ?.filter((notification: Notification) => !notification.seenStatus)
          .map((notification: Notification) => notification._id) || [];

      // Update seen status if there are unseen notifications
      if (unseenIds.length > 0) {
        setUnSeenNotifIds(unseenIds);
      }
    } catch (error: any) {
      toast.error(error.message || "Failed to fetch notifications");
      setNotifications([]);
    } finally {
      setIsLoading(false);
    }
  };

  const updateSeenStatus = async (notificationIds: string[]) => {
    try {
      if (!notificationIds.length) return;
      const response = await API.PutAuthAPI(
        { notificationIds },
        null,
        "seenUpdate",
        true
      );

      if (response.error) throw new Error(response.error);

      // // Update local state
      // setNotifications((prev) =>
      //   prev.map((notification) =>
      //     notificationIds.includes(notification._id)
      //       ? { ...notification, seenStatus: true }
      //       : notification
      //   )
      // );
    } catch (error: any) {
      console.error("Failed to update notification status:", error);
    }
  };

  useEffect(() => {
    fetchNotifications();
  }, []);

  useEffect(() => {
    if (dropdownOpen && unSeenNotifIds) updateSeenStatus(unSeenNotifIds);
  }, [dropdownOpen]);

  // Calculate number of unseen notifications
  const unseenCount = notifications.filter(
    (notification) => !notification.seenStatus
  ).length;

  const handleNotificationClick = (notificationId: string) => {
    // Update local state
    setNotifications((prev) =>
      prev.map((notification) =>
        notification._id === notificationId
          ? { ...notification, seenStatus: true }
          : notification
      )
    );

    // Here you could also make an API call to update the seenStatus on the server
  };

  const formatTimeAgo = (dateString: string) => {
    return dayjs(dateString).fromNow();
  };

  return (
    <ClickOutside
      onClick={() => setDropdownOpen(false)}
      className="relative hidden sm:block"
    >
      <li>
        <Link
          onClick={() => setDropdownOpen(!dropdownOpen)}
          to="#"
          className="relative flex h-12 w-12 items-center justify-center rounded-full border border-stroke bg-gray-2 text-dark hover:text-primary dark:border-dark-4 dark:bg-dark-3 dark:text-white dark:hover:text-white"
        >
          <span className="relative">
            <svg
              className="fill-current duration-300 ease-in-out"
              width="20"
              height="20"
              viewBox="0 0 20 20"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M10.0001 1.0415C6.43321 1.0415 3.54172 3.933 3.54172 7.49984V8.08659C3.54172 8.66736 3.36981 9.23513 3.04766 9.71836L2.09049 11.1541C0.979577 12.8205 1.82767 15.0855 3.75983 15.6125C4.3895 15.7842 5.0245 15.9294 5.66317 16.0482L5.66475 16.0525C6.30558 17.7624 8.01834 18.9582 10 18.9582C11.9817 18.9582 13.6944 17.7624 14.3352 16.0525L14.3368 16.0483C14.9755 15.9295 15.6106 15.7842 16.2403 15.6125C18.1724 15.0855 19.0205 12.8205 17.9096 11.1541L16.9524 9.71836C16.6303 9.23513 16.4584 8.66736 16.4584 8.08659V7.49984C16.4584 3.933 13.5669 1.0415 10.0001 1.0415ZM12.8137 16.2806C10.9446 16.504 9.05539 16.504 7.18626 16.2806C7.77872 17.1319 8.8092 17.7082 10 17.7082C11.1908 17.7082 12.2213 17.1319 12.8137 16.2806ZM4.79172 7.49984C4.79172 4.62335 7.12357 2.2915 10.0001 2.2915C12.8765 2.2915 15.2084 4.62335 15.2084 7.49984V8.08659C15.2084 8.91414 15.4533 9.72317 15.9124 10.4117L16.8696 11.8475C17.5072 12.804 17.0204 14.104 15.9114 14.4065C12.0412 15.462 7.95893 15.462 4.08872 14.4065C2.9797 14.104 2.49291 12.804 3.13055 11.8475L4.08772 10.4117C4.54676 9.72317 4.79172 8.91414 4.79172 8.08659V7.49984Z"
                fill=""
              />
            </svg>

            {unseenCount > 0 && (
              <span className="absolute -top-0.5 right-0 z-1 h-2.5 w-2.5 rounded-full border-2 border-gray-2 bg-red-light dark:border-dark-3">
                <span className="absolute -z-1 inline-flex h-full w-full animate-ping rounded-full bg-red-light opacity-75"></span>
              </span>
            )}
          </span>
        </Link>

        {dropdownOpen && (
          <div className="absolute -right-27 mt-7.5 flex h-[550px] w-75 flex-col rounded-xl border-[0.5px] border-stroke bg-white px-5.5 pb-5.5 pt-5 shadow-default dark:border-dark-3 dark:bg-gray-dark sm:right-0 sm:w-[364px]">
            <div className="mb-3 flex items-center justify-between">
              <h5 className="text-lg font-medium text-dark dark:text-white">
                Notifications
              </h5>
              {unseenCount > 0 && (
                <span className="rounded-md bg-primary px-2 py-0.5 text-body-xs font-medium text-white">
                  {unseenCount} new
                </span>
              )}
            </div>

            <ul className="no-scrollbar mb-0 flex h-auto flex-col gap-1 overflow-y-auto">
              {isLoading ? (
                <div className="flex h-40 items-center justify-center">
                  <div className="h-6 w-6 animate-spin rounded-full border-2 border-gray-300 border-t-primary"></div>
                </div>
              ) : notifications.length > 0 ? (
                notifications.map((notification) => (
                  <li
                    key={notification._id}
                    className={`transition-all duration-300 ${
                      !notification.seenStatus
                        ? "bg-blue-50 dark:bg-blue-900/10"
                        : ""
                    }`}
                  >
                    <Link
                      className="flex items-center gap-4 rounded-[10px] p-2.5 hover:bg-gray-2 dark:hover:bg-dark-3"
                      to="#"
                      onClick={() => handleNotificationClick(notification._id)}
                    >
                      {/* Icon container with background */}
                      <div
                        className={`flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full ${
                          !notification.seenStatus
                            ? "bg-primary/10 text-primary dark:bg-primary/20"
                            : "bg-gray-100 text-gray-600 dark:bg-gray-800 dark:text-gray-400"
                        }`}
                      >
                        {notification.titleTemplate
                          .toLowerCase()
                          .includes("follow-up") ? (
                          <MdCalendarToday size={20} />
                        ) : notification.titleTemplate
                            .toLowerCase()
                            .includes("new lead") ? (
                          <MdPersonAdd size={20} />
                        ) : notification.titleTemplate
                            .toLowerCase()
                            .includes("notification") ? (
                          <MdOutlineNotifications size={20} />
                        ) : (
                          <FiAlertCircle size={20} />
                        )}
                      </div>

                      <div className="flex w-full flex-col">
                        <div className="flex items-center justify-between">
                          <span className="block font-medium text-dark dark:text-white">
                            {notification.titleTemplate}
                          </span>
                          {!notification.seenStatus && (
                            <span className="h-2 w-2 rounded-full bg-primary"></span>
                          )}
                        </div>
                        <span className="block text-sm text-dark-5 dark:text-dark-6">
                          {notification.bodyTemplate}
                        </span>
                        <span className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                          {formatTimeAgo(notification.createdAt)}
                        </span>
                      </div>
                    </Link>
                  </li>
                ))
              ) : (
                <div>No notifications</div>
              )}
            </ul>

            {notifications.length === 0 && (
              <div className="flex h-full items-center justify-center text-gray-500 dark:text-gray-400">
                No notifications yet
              </div>
            )}

            {/* <Link
              className="mt-auto flex items-center justify-center rounded-[7px] border border-primary p-2.5 font-medium text-primary hover:bg-blue-light-5 dark:border-dark-4 dark:text-dark-6 dark:hover:border-primary dark:hover:bg-blue-light-3 dark:hover:text-primary"
              to="#"
            >
              See all notifications
            </Link> */}
          </div>
        )}
      </li>
    </ClickOutside>
  );
};

export default DropdownNotification;


================================================
File: src/components/Header/DropdownUser.tsx
================================================
import { useEffect, useState } from "react";

import { Link } from "react-router-dom";
import ClickOutside from "../ClickOutside";
import { handleLogout } from "../../utils/handleLogOut";
import AvatarMassao from "../CommonUI/StyledComponent/Avatar";
import { Avatar } from "antd";
interface UserData {
  _id: string;
  name: string;
  email: string;
  phone: string;
  companyCode: string;
  role: string;
  isEmailVerified: boolean;
  isMobileVerified: boolean;
  bio: string;
  profilePic: string;
  company: {
    id: string;
    name: string;
    code: string;
    subscription: {
      plan: string;
      startDate: string;
      endDate: string;
      status: string;
      features: string[];
    };
  };
}

const DropdownUser = () => {
  const [dropdownOpen, setDropdownOpen] = useState(false);

  const [userData, setUserData] = useState<UserData | null>(null);
  useEffect(() => {
    const userStr = localStorage.getItem("user");
    if (userStr) {
      try {
        const data = JSON.parse(userStr);
        setUserData(data);
      } catch (error) {
        console.error("Error parsing user data:", error);
      }
    }
  }, []);

  return (
    <ClickOutside onClick={() => setDropdownOpen(false)} className="relative">
      <Link
        onClick={() => setDropdownOpen(!dropdownOpen)}
        className="flex items-center gap-3"
        to="#"
      >
        <Avatar
          size={48}
          src={
            userData?.profilePic
              ? userData?.profilePic
              : "https://api.dicebear.com/7.x/miniavs/svg?seed=1"
          }
          style={{ background: "lightblue" }}
        />
        <span className="flex items-center gap-2 font-medium text-dark dark:text-dark-6">
          <span className="hidden lg:block">{userData?.name}</span>

          <svg
            className={`fill-current duration-200 ease-in ${
              dropdownOpen && "rotate-180"
            }`}
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M3.6921 7.09327C3.91674 6.83119 4.3113 6.80084 4.57338 7.02548L9.99997 11.6768L15.4266 7.02548C15.6886 6.80084 16.0832 6.83119 16.3078 7.09327C16.5325 7.35535 16.5021 7.74991 16.24 7.97455L10.4067 12.9745C10.1727 13.1752 9.82728 13.1752 9.59322 12.9745L3.75989 7.97455C3.49781 7.74991 3.46746 7.35535 3.6921 7.09327Z"
              fill=""
            />
          </svg>
        </span>
      </Link>

      {/* <!-- Dropdown Star --> */}
      {dropdownOpen && (
        <div
          className={`absolute right-0 mt-7.5 flex w-[280px] flex-col rounded-lg border-[0.5px] border-stroke bg-white shadow-default dark:border-dark-3 dark:bg-gray-dark`}
        >
          <div className="flex items-center gap-2.5 px-5 pb-5.5 pt-3.5">
            <span className="relative block h-12 w-12 rounded-full">
              <Avatar
                size={48}
                src={
                  userData?.profilePic
                    ? userData?.profilePic
                    : "https://api.dicebear.com/7.x/miniavs/svg?seed=1"
                }
                style={{ background: "lightblue" }}
              />
              <span className="absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-white bg-green dark:border-gray-dark"></span>
            </span>

            <span className="block">
              <span className="block font-medium text-dark dark:text-white">
                {userData?.name || "Shashank"}
              </span>
              <span className="block w-[190px] font-medium text-dark-5 truncate dark:text-dark-6">
                {userData?.email}
              </span>
            </span>
          </div>
          <ul className="flex flex-col gap-1 border-y-[0.5px] border-stroke p-2.5 dark:border-dark-3">
            <li>
              <Link
                to="/profile"
                className="flex w-full items-center gap-2.5 rounded-[7px] p-2.5 text-sm font-medium text-dark-4 duration-300 ease-in-out hover:bg-gray-2 hover:text-dark dark:text-dark-6 dark:hover:bg-dark-3 dark:hover:text-white lg:text-base"
              >
                <svg
                  className="fill-current"
                  width="18"
                  height="18"
                  viewBox="0 0 18 18"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M8.99998 0.9375C7.03246 0.9375 5.43748 2.53249 5.43748 4.5C5.43748 6.46751 7.03246 8.0625 8.99998 8.0625C10.9675 8.0625 12.5625 6.46751 12.5625 4.5C12.5625 2.53249 10.9675 0.9375 8.99998 0.9375ZM6.56248 4.5C6.56248 3.15381 7.65378 2.0625 8.99998 2.0625C10.3462 2.0625 11.4375 3.15381 11.4375 4.5C11.4375 5.84619 10.3462 6.9375 8.99998 6.9375C7.65378 6.9375 6.56248 5.84619 6.56248 4.5Z"
                    fill=""
                  />
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M8.99998 9.1875C7.26482 9.1875 5.66617 9.58191 4.48157 10.2483C3.31459 10.9047 2.43748 11.8995 2.43748 13.125L2.43743 13.2015C2.43658 14.0729 2.43552 15.1665 3.39479 15.9477C3.86689 16.3321 4.52734 16.6055 5.41964 16.7861C6.31442 16.9672 7.48065 17.0625 8.99998 17.0625C10.5193 17.0625 11.6855 16.9672 12.5803 16.7861C13.4726 16.6055 14.1331 16.3321 14.6052 15.9477C15.5644 15.1665 15.5634 14.0729 15.5625 13.2015L15.5625 13.125C15.5625 11.8995 14.6854 10.9047 13.5184 10.2483C12.3338 9.58191 10.7351 9.1875 8.99998 9.1875ZM3.56248 13.125C3.56248 12.4865 4.02851 11.7939 5.03311 11.2288C6.02008 10.6736 7.42143 10.3125 8.99998 10.3125C10.5785 10.3125 11.9799 10.6736 12.9668 11.2288C13.9714 11.7939 14.4375 12.4865 14.4375 13.125C14.4375 14.1059 14.4072 14.658 13.8948 15.0753C13.6169 15.3016 13.1523 15.5225 12.3571 15.6835C11.5644 15.8439 10.4806 15.9375 8.99998 15.9375C7.51931 15.9375 6.43553 15.8439 5.64282 15.6835C4.84762 15.5225 4.38307 15.3016 4.10517 15.0753C3.59271 14.658 3.56248 14.1059 3.56248 13.125Z"
                    fill=""
                  />
                </svg>
                View profile
              </Link>
            </li>

            <li>
              <Link
                to="/profile/settings"
                className="flex w-full items-center gap-2.5 rounded-[7px] p-2.5 text-sm font-medium text-dark-4 duration-300 ease-in-out hover:bg-gray-2 hover:text-dark dark:text-dark-6 dark:hover:bg-dark-3 dark:hover:text-white lg:text-base"
              >
                <svg
                  className="fill-current"
                  width="18"
                  height="18"
                  viewBox="0 0 18 18"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M9 6.1875C7.4467 6.1875 6.1875 7.4467 6.1875 9C6.1875 10.5533 7.4467 11.8125 9 11.8125C10.5533 11.8125 11.8125 10.5533 11.8125 9C11.8125 7.4467 10.5533 6.1875 9 6.1875ZM7.3125 9C7.3125 8.06802 8.06802 7.3125 9 7.3125C9.93198 7.3125 10.6875 8.06802 10.6875 9C10.6875 9.93198 9.93198 10.6875 9 10.6875C8.06802 10.6875 7.3125 9.93198 7.3125 9Z"
                    fill=""
                  />
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M8.98106 0.9375C8.64771 0.937495 8.36943 0.93749 8.14097 0.953078C7.90315 0.969304 7.6785 1.00429 7.46071 1.0945C6.95534 1.30383 6.55382 1.70535 6.34449 2.21072C6.23551 2.47381 6.206 2.75109 6.19473 3.05247C6.18567 3.29474 6.0634 3.49688 5.88296 3.60106C5.70253 3.70523 5.46634 3.71005 5.252 3.59676C4.98535 3.45583 4.73046 3.34275 4.44812 3.30557C3.9058 3.23418 3.35732 3.38114 2.92334 3.71414C2.73632 3.85765 2.5937 4.0347 2.46074 4.23255C2.33301 4.42261 2.19387 4.66361 2.02721 4.9523L2.00826 4.98511C1.84159 5.27379 1.70245 5.51478 1.60172 5.72042C1.49686 5.9345 1.41483 6.14654 1.38406 6.38026C1.31266 6.92259 1.45963 7.47107 1.79262 7.90504C1.96596 8.13094 2.1913 8.29512 2.44663 8.45555C2.65196 8.58457 2.76591 8.79158 2.7659 8.99999C2.76589 9.20837 2.65194 9.41535 2.44663 9.54435C2.19127 9.7048 1.9659 9.86899 1.79255 10.0949C1.45955 10.5289 1.31259 11.0774 1.38399 11.6197C1.41476 11.8534 1.49678 12.0654 1.60164 12.2795C1.70237 12.4852 1.84151 12.7262 2.00818 13.0148L2.02713 13.0476C2.1938 13.3363 2.33294 13.5773 2.46067 13.7674C2.59363 13.9652 2.73625 14.1423 2.92327 14.2858C3.35724 14.6188 3.90572 14.7658 4.44805 14.6944C4.73038 14.6572 4.98525 14.5441 5.25188 14.4032C5.46625 14.2899 5.70247 14.2947 5.88293 14.3989C6.06339 14.5031 6.18567 14.7053 6.19473 14.9476C6.206 15.2489 6.23552 15.5262 6.34449 15.7893C6.55382 16.2947 6.95534 16.6962 7.46071 16.9055C7.6785 16.9957 7.90315 17.0307 8.14097 17.0469C8.36943 17.0625 8.64771 17.0625 8.98105 17.0625H9.01894C9.35228 17.0625 9.63056 17.0625 9.85902 17.0469C10.0968 17.0307 10.3215 16.9957 10.5393 16.9055C11.0446 16.6962 11.4462 16.2947 11.6555 15.7893C11.7645 15.5262 11.794 15.2489 11.8053 14.9475C11.8143 14.7052 11.9366 14.5031 12.117 14.3989C12.2975 14.2947 12.5337 14.2899 12.7481 14.4032C13.0147 14.5441 13.2695 14.6572 13.5519 14.6943C14.0942 14.7657 14.6427 14.6188 15.0766 14.2858C15.2637 14.1423 15.4063 13.9652 15.5392 13.7673C15.667 13.5773 15.8061 13.3363 15.9728 13.0476L15.9917 13.0148C16.1584 12.7262 16.2975 12.4851 16.3983 12.2795C16.5031 12.0654 16.5852 11.8534 16.6159 11.6196C16.6873 11.0773 16.5404 10.5288 16.2074 10.0949C16.034 9.86895 15.8087 9.70476 15.5533 9.54431C15.348 9.41532 15.2341 9.20834 15.2341 8.99996C15.2341 8.79161 15.348 8.58466 15.5533 8.45568C15.8087 8.29522 16.0341 8.13102 16.2074 7.90509C16.5404 7.47112 16.6874 6.92264 16.616 6.38031C16.5852 6.14659 16.5032 5.93455 16.3983 5.72048C16.2976 5.51484 16.1585 5.27387 15.9918 4.98522L15.9729 4.95238C15.8062 4.66369 15.6671 4.42266 15.5393 4.2326C15.4064 4.03475 15.2637 3.8577 15.0767 3.71419C14.6427 3.38119 14.0943 3.23423 13.5519 3.30563C13.2696 3.3428 13.0147 3.45586 12.7481 3.59679C12.5337 3.71009 12.2975 3.70527 12.1171 3.60108C11.9366 3.49689 11.8143 3.29473 11.8053 3.05243C11.794 2.75106 11.7645 2.4738 11.6555 2.21072C11.4462 1.70535 11.0446 1.30383 10.5393 1.0945C10.3215 1.00429 10.0968 0.969304 9.85902 0.953078C9.63056 0.93749 9.35228 0.937495 9.01893 0.9375H8.98106ZM7.89123 2.13386C7.94909 2.10989 8.037 2.08779 8.21755 2.07547C8.40315 2.06281 8.64284 2.0625 8.99999 2.0625C9.35715 2.0625 9.59684 2.06281 9.78244 2.07547C9.96298 2.08779 10.0509 2.10989 10.1088 2.13386C10.3385 2.22901 10.521 2.41152 10.6161 2.64123C10.6461 2.71369 10.671 2.82665 10.681 3.09448C10.7033 3.68876 11.01 4.26097 11.5546 4.57536C12.0991 4.88976 12.748 4.8693 13.2738 4.59141C13.5108 4.46617 13.621 4.43124 13.6988 4.421C13.9453 4.38855 14.1946 4.45535 14.3919 4.60671C14.4415 4.64484 14.5047 4.70992 14.6056 4.86012C14.7094 5.01452 14.8295 5.22195 15.008 5.53125C15.1866 5.84055 15.3062 6.04829 15.388 6.21535C15.4676 6.37787 15.4925 6.46505 15.5006 6.52715C15.5331 6.77366 15.4663 7.02297 15.3149 7.22023C15.2672 7.28246 15.1818 7.3605 14.9548 7.5031C14.4513 7.81947 14.1091 8.37116 14.1091 8.9999C14.1091 9.62871 14.4512 10.1805 14.9548 10.4969C15.1817 10.6395 15.2671 10.7175 15.3148 10.7797C15.4662 10.977 15.533 11.2263 15.5006 11.4728C15.4924 11.5349 15.4676 11.6221 15.388 11.7846C15.3061 11.9517 15.1865 12.1594 15.008 12.4687C14.8294 12.778 14.7093 12.9854 14.6055 13.1398C14.5046 13.29 14.4415 13.3551 14.3918 13.3932C14.1945 13.5446 13.9452 13.6114 13.6987 13.5789C13.6209 13.5687 13.5107 13.5338 13.2738 13.4086C12.748 13.1307 12.099 13.1102 11.5545 13.4247C11.01 13.7391 10.7033 14.3112 10.681 14.9055C10.671 15.1733 10.6461 15.2863 10.6161 15.3588C10.521 15.5885 10.3385 15.771 10.1088 15.8661C10.0509 15.8901 9.96298 15.9122 9.78244 15.9245C9.59684 15.9372 9.35715 15.9375 8.99999 15.9375C8.64284 15.9375 8.40315 15.9372 8.21755 15.9245C8.037 15.9122 7.94909 15.8901 7.89123 15.8661C7.66151 15.771 7.47901 15.5885 7.38386 15.3588C7.35384 15.2863 7.32896 15.1733 7.31895 14.9055C7.29672 14.3112 6.98998 13.739 6.44543 13.4246C5.90088 13.1102 5.25196 13.1307 4.72619 13.4086C4.48924 13.5338 4.37897 13.5688 4.30121 13.579C4.0547 13.6115 3.80539 13.5447 3.60813 13.3933C3.55844 13.3552 3.49534 13.2901 3.39439 13.1399C3.29063 12.9855 3.17052 12.7781 2.99194 12.4688C2.81337 12.1594 2.69378 11.9517 2.61195 11.7847C2.53235 11.6221 2.50754 11.5349 2.49936 11.4728C2.46691 11.2263 2.53371 10.977 2.68507 10.7798C2.73282 10.7175 2.81821 10.6395 3.04515 10.4969C3.54869 10.1805 3.89086 9.62882 3.8909 9.00005C3.89093 8.3712 3.54874 7.8194 3.04516 7.50299C2.81826 7.36042 2.73289 7.2824 2.68515 7.22018C2.53378 7.02292 2.46698 6.77361 2.49943 6.5271C2.50761 6.465 2.53242 6.37782 2.61202 6.2153C2.69386 6.04824 2.81344 5.8405 2.99202 5.5312C3.17059 5.2219 3.2907 5.01447 3.39447 4.86007C3.49541 4.70987 3.55851 4.64479 3.6082 4.60666C3.80546 4.4553 4.05477 4.3885 4.30128 4.42095C4.37905 4.43119 4.48932 4.46613 4.7263 4.59138C5.25205 4.86926 5.90093 4.88972 6.44546 4.57534C6.98999 4.26096 7.29672 3.68878 7.31894 3.09451C7.32896 2.82666 7.35384 2.7137 7.38386 2.64124C7.47901 2.41152 7.66151 2.22901 7.89123 2.13386Z"
                    fill=""
                  />
                </svg>
                Profile settings
              </Link>
            </li>
          </ul>
          <div className="p-2.5">
            <button
              className="flex w-full items-center gap-2.5 rounded-[7px] p-2.5 text-sm font-medium text-dark-4 duration-300 ease-in-out hover:bg-gray-2 hover:text-dark dark:text-dark-6 dark:hover:bg-dark-3 dark:hover:text-white lg:text-base"
              onClick={() => handleLogout()}
            >
              <svg
                className="fill-current"
                width="18"
                height="18"
                viewBox="0 0 18 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g clipPath="url(#clip0_1815_13085)">
                  <path
                    d="M11.209 0.9375C10.1833 0.937485 9.35657 0.937473 8.70635 1.02489C8.03127 1.11566 7.46286 1.30983 7.01142 1.76126C6.61773 2.15496 6.4188 2.63877 6.31437 3.20727C6.2129 3.75969 6.19349 4.43572 6.18897 5.24687C6.18724 5.55753 6.43768 5.81076 6.74833 5.81249C7.05899 5.81422 7.31223 5.56379 7.31396 5.25313C7.31852 4.43301 7.33982 3.8517 7.42086 3.41051C7.49895 2.9854 7.62433 2.73935 7.80692 2.55676C8.01449 2.34919 8.30592 2.21385 8.85625 2.13986C9.42276 2.0637 10.1736 2.0625 11.2502 2.0625H12.0002C13.0767 2.0625 13.8276 2.0637 14.3941 2.13986C14.9444 2.21385 15.2358 2.34919 15.4434 2.55676C15.651 2.76433 15.7863 3.05576 15.8603 3.60609C15.9365 4.1726 15.9377 4.92344 15.9377 6V12C15.9377 13.0766 15.9365 13.8274 15.8603 14.3939C15.7863 14.9442 15.651 15.2357 15.4434 15.4432C15.2358 15.6508 14.9444 15.7862 14.3941 15.8601C13.8276 15.9363 13.0767 15.9375 12.0002 15.9375H11.2502C10.1736 15.9375 9.42276 15.9363 8.85625 15.8601C8.30592 15.7862 8.01449 15.6508 7.80692 15.4432C7.62433 15.2607 7.49895 15.0146 7.42086 14.5895C7.33982 14.1483 7.31852 13.567 7.31396 12.7469C7.31223 12.4362 7.05899 12.1858 6.74833 12.1875C6.43768 12.1892 6.18724 12.4425 6.18897 12.7531C6.19349 13.5643 6.2129 14.2403 6.31437 14.7927C6.4188 15.3612 6.61773 15.845 7.01142 16.2387C7.46286 16.6902 8.03127 16.8843 8.70635 16.9751C9.35657 17.0625 10.1833 17.0625 11.209 17.0625H12.0413C13.067 17.0625 13.8937 17.0625 14.544 16.9751C15.2191 16.8843 15.7875 16.6902 16.2389 16.2387C16.6903 15.7873 16.8845 15.2189 16.9753 14.5438C17.0627 13.8936 17.0627 13.0668 17.0627 12.0412V5.95885C17.0627 4.93316 17.0627 4.10641 16.9753 3.45619C16.8845 2.78111 16.6903 2.2127 16.2389 1.76126C15.7875 1.30983 15.2191 1.11566 14.544 1.02489C13.8938 0.937473 13.067 0.937485 12.0413 0.9375H11.209Z"
                    fill=""
                  />
                  <path
                    d="M11.25 8.4375C11.5607 8.4375 11.8125 8.68934 11.8125 9C11.8125 9.31066 11.5607 9.5625 11.25 9.5625H3.02058L4.49107 10.8229C4.72694 11.0251 4.75426 11.3802 4.55208 11.6161C4.34991 11.8519 3.9948 11.8793 3.75893 11.6771L1.13393 9.42708C1.00925 9.32022 0.9375 9.16421 0.9375 9C0.9375 8.83579 1.00925 8.67978 1.13393 8.57292L3.75893 6.32292C3.9948 6.12074 4.34991 6.14806 4.55208 6.38393C4.75426 6.6198 4.72694 6.97491 4.49107 7.17708L3.02058 8.4375H11.25Z"
                    fill=""
                  />
                </g>
                <defs>
                  <clipPath id="clip0_1815_13085">
                    <rect width="18" height="18" rx="5" fill="white" />
                  </clipPath>
                </defs>
              </svg>
              Logout
            </button>
          </div>
        </div>
      )}
      {/* <!-- Dropdown End --> */}
    </ClickOutside>
  );
};

export default DropdownUser;


================================================
File: src/components/Header/SearchForm.tsx
================================================
import React, { useEffect, useState } from "react";

export default function SearchForm({
  customClasses = "",
  onSearch = () => {},
  placeholder = "Search",
  searchTerm,
}: {
  customClasses?: string;
  onSearch?: any;
  placeholder?: string;
  searchTerm?: string;
}) {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (onSearch) onSearch(e.target.value);
  };

  return (
    <>
      <div className="relative w-full max-w-[300px]">
        <button className="absolute left-5 top-1/2 -translate-y-1/2 text-dark hover:text-primary dark:text-dark-6 dark:hover:text-primary">
          <svg
            className="fill-current"
            width="18"
            height="18"
            viewBox="0 0 18 18"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <g clipPath="url(#clip0_1791_1693)">
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M8.625 2.0625C5.00063 2.0625 2.0625 5.00063 2.0625 8.625C2.0625 12.2494 5.00063 15.1875 8.625 15.1875C12.2494 15.1875 15.1875 12.2494 15.1875 8.625C15.1875 5.00063 12.2494 2.0625 8.625 2.0625ZM0.9375 8.625C0.9375 4.37931 4.37931 0.9375 8.625 0.9375C12.8707 0.9375 16.3125 4.37931 16.3125 8.625C16.3125 10.5454 15.6083 12.3013 14.4441 13.6487L16.8977 16.1023C17.1174 16.3219 17.1174 16.6781 16.8977 16.8977C16.6781 17.1174 16.3219 17.1174 16.1023 16.8977L13.6487 14.4441C12.3013 15.6083 10.5454 16.3125 8.625 16.3125C4.37931 16.3125 0.9375 12.8707 0.9375 8.625Z"
                fill=""
              />
            </g>
            <defs>
              <clipPath id="clip0_1791_1693">
                <rect width="18" height="18" fill="white" />
              </clipPath>
            </defs>
          </svg>
        </button>

        <input
          type="text"
          placeholder={placeholder}
          onChange={handleChange}
          value={searchTerm}
          className={`${customClasses} w-full rounded-full border border-stroke bg-gray-2 py-3 pl-13.5 pr-5 text-dark focus:border-primary focus:outline-none dark:border-dark-4 dark:bg-dark-3 dark:text-white dark:focus:border-primary xl:w-[300px]`}
        />
      </div>
    </>
  );
}


================================================
File: src/components/Header/index.tsx
================================================
import { Link } from "react-router-dom";
import DarkModeSwitcher from "./DarkModeSwitcher";
import DropdownNotification from "./DropdownNotification";
import DropdownUser from "./DropdownUser";
//
const Header = (props: {
  sidebarOpen: string | boolean | undefined;
  setSidebarOpen: (arg0: boolean) => void;
}) => {
  return (
    <header className="sticky top-0 z-999 flex w-full border-b border-stroke bg-white dark:border-stroke-dark dark:bg-gray-dark">
      <div className="flex flex-grow items-center justify-between px-4 sm:py-5 py-2 shadow-2 md:px-5 2xl:px-10">
        <div className="flex items-center gap-2 sm:gap-4 lg:hidden">
          {/* <!-- Hamburger Toggle BTN --> */}
          <button
            aria-controls="sidebar"
            onClick={(e) => {
              e.stopPropagation();
              props.setSidebarOpen(!props.sidebarOpen);
            }}
            className="z-99999 block rounded-sm border border-stroke bg-white p-1.5 shadow-sm dark:border-dark-3 dark:bg-dark-2 lg:hidden"
          >
            <span className="relative block h-5.5 w-5.5 cursor-pointer">
              <span className="du-block absolute right-0 h-full w-full">
                <span
                  className={`relative left-0 top-0 my-1 block h-0.5 w-0 rounded-sm bg-dark delay-[0] duration-200 ease-in-out dark:bg-white ${
                    !props.sidebarOpen && "!w-full delay-300"
                  }`}
                ></span>
                <span
                  className={`relative left-0 top-0 my-1 block h-0.5 w-0 rounded-sm bg-dark delay-150 duration-200 ease-in-out dark:bg-white ${
                    !props.sidebarOpen && "delay-400 !w-full"
                  }`}
                ></span>
                <span
                  className={`relative left-0 top-0 my-1 block h-0.5 w-0 rounded-sm bg-dark delay-200 duration-200 ease-in-out dark:bg-white ${
                    !props.sidebarOpen && "!w-full delay-500"
                  }`}
                ></span>
              </span>
              <span className="absolute right-0 h-full w-full rotate-45">
                <span
                  className={`absolute left-2.5 top-0 block h-full w-0.5 rounded-sm bg-dark delay-300 duration-200 ease-in-out dark:bg-white ${
                    !props.sidebarOpen && "!h-0 !delay-[0]"
                  }`}
                ></span>
                <span
                  className={`delay-400 absolute left-0 top-2.5 block h-0.5 w-full rounded-sm bg-dark duration-200 ease-in-out dark:bg-white ${
                    !props.sidebarOpen && "!h-0 !delay-200"
                  }`}
                ></span>
              </span>
            </span>
          </button>
          {/* <!-- Hamburger Toggle BTN --> */}

          <Link className="block flex-shrink-0 lg:hidden" to="/">
            <img
              width={32}
              height={32}
              // src={"/images/logo/logo-icon.svg"}
              src={"/images/logo/LogoIcon.png"}
              alt="Logo"
              className="bg-white rounded-full p-1 w-10.5"
            />
          </Link>
        </div>

        <div className="hidden xl:block">
          {/* <div>
            <h1 className="mb-0.5 text-heading-5 font-bold text-dark dark:text-white">
              Dashboard
            </h1>
            <p className="font-medium">Next.js Admin Dashboard Solution</p>
          </div> */}
        </div>

        <div className="flex items-center justify-normal gap-2 2xsm:gap-4 lg:w-full lg:justify-between xl:w-auto xl:justify-normal">
          <ul className="flex items-center gap-2 2xsm:gap-4">
            {/* <!-- Search Form --> */}
            <div className="hidden lg:inline">
            {/* <SearchForm /> */}
            </div>
            {/* <!-- Search Form --> */}

            {/* <!-- Dark Mode Toggle --> */}
            <DarkModeSwitcher />
            {/* <!-- Dark Mode Toggle --> */}

            {/* <!-- Notification Menu Area --> */}
            {/* <DropdownNotification /> */}
            {/* <!-- Notification Menu Area --> */}
          </ul>

          {/* <!-- User Area --> */}
          <DropdownUser />
          {/* <!-- User Area --> */}
        </div>
      </div>
    </header>
  );
};

export default Header;


================================================
File: src/components/Maps/MapOne.tsx
================================================
// import jsVectorMap from "jsvectormap";
// import React, { useEffect, useRef } from "react";
import "../../js/us-aea-en";

const MapOne = () => {
  // const mapRef = useRef<any>(null);

  // useEffect(() => {
  //   const mapElement = document.getElementById("mapOne");

  //   if (!mapElement) {
  //     console.error("Map element not found");
  //     return;
  //   }

  //   mapRef.current = new jsVectorMap({
  //     selector: "#mapOne",
  //     map: "us_aea_en",
  //     zoomButtons: true,

  //     regionStyle: {
  //       initial: {
  //         fill: "#C8D0D8",
  //       },
  //       hover: {
  //         fillOpacity: 1,
  //         fill: "#3056D3",
  //       },
  //     },
  //     regionLabelStyle: {
  //       initial: {
  //         fontFamily: "Satoshi",
  //         fontWeight: "semibold",
  //         fill: "#fff",
  //       },
  //       hover: {
  //         cursor: "pointer",
  //       },
  //     },

  //     labels: {
  //       regions: {
  //         render(code: string) {
  //           return code.split("-")[1];
  //         },
  //       },
  //     },
  //   });

  //   return () => {
  //     mapRef?.current?.destroy();
  //   };
  // }, []);

  return (
    <div className="col-span-12 rounded-[10px] bg-white p-7.5 shadow-1 dark:bg-gray-dark dark:shadow-card xl:col-span-8">
      <h4 className="mb-7 text-body-2xlg font-bold text-dark dark:text-white">
        Region labels
      </h4>
      <div className="h-[422px]">
        <div id="mapOne" className="mapOne map-btn"></div>
      </div>
    </div>
  );
};

export default MapOne;

================================================
File: src/components/Modals/ConfirmationModal.tsx
================================================
import { Modal } from "antd";
import ButtonDefault from "../Buttons/ButtonDefault";
import {
  ExclamationCircleOutlined,
  WarningOutlined,
  InfoCircleOutlined,
  QuestionCircleOutlined,
} from "@ant-design/icons";

interface ConfirmationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  type?: "warning" | "delete" | "info" | "confirm";
  title?: string;
  message?: string;
  confirmLabel?: string;
  cancelLabel?: string;
  width?: number;
  count?: number;
  customIcon?: React.ReactNode;
}

const getIconByType = (type: string, customIcon?: React.ReactNode) => {
  if (customIcon) return customIcon;

  switch (type) {
    case "warning":
      return <WarningOutlined className="text-3xl text-yellow-500" />;
    case "delete":
      return <ExclamationCircleOutlined className="text-3xl text-red-500" />;
    case "info":
      return <InfoCircleOutlined className="text-3xl text-blue-500" />;
    case "confirm":
    default:
      return <QuestionCircleOutlined className="text-3xl text-primary" />;
  }
};

const getBackgroundByType = (type: string) => {
  switch (type) {
    case "warning":
      return "bg-yellow-50 dark:bg-yellow-900/20";
    case "delete":
      return "bg-red-50 dark:bg-red-900/20";
    case "info":
      return "bg-blue-50 dark:bg-blue-900/20";
    case "confirm":
    default:
      return "bg-primary/10 dark:bg-primary/20";
  }
};

const getConfirmButtonStyle = (type: string) => {
  switch (type) {
    case "warning":
      return "!bg-yellow-500 hover:!bg-yellow-600";
    case "delete":
      return "!bg-red-500 hover:!bg-red-600";
    case "info":
      return "!bg-blue-500 hover:!bg-blue-600";
    case "confirm":
    default:
      return "";
  }
};

export default function ConfirmationModal({
  isOpen,
  onClose,
  onConfirm,
  type = "confirm",
  title = "Confirm Action",
  message = "Are you sure you want to proceed with this action?",
  confirmLabel = "Confirm",
  cancelLabel = "Cancel",
  width = 400,
  count,
  customIcon,
}: ConfirmationModalProps) {
  return (
    <>
      <Modal
        title={null}
        open={isOpen}
        onCancel={onClose}
        footer={null}
        width={width}
        className="confirmation-modal"
        centered
      >
        <div className="flex flex-col items-center p-4 text-center">
          <div
            className={`mb-4 flex h-16 w-16 items-center justify-center rounded-full ${getBackgroundByType(
              type
            )}`}
          >
            {getIconByType(type, customIcon)}
          </div>

          <h3 className="mb-2 text-xl font-bold text-gray-900 dark:text-white">
            {title}
          </h3>

          <p className="mb-6 text-sm text-gray-600 dark:text-gray-400">
            {count !== undefined ? (
              <>
                {message.replace("{count}", count.toString())}
                {count !== 1 ? "s" : ""}
              </>
            ) : (
              message
            )}
          </p>

          <div className="flex w-full justify-center gap-3">
            <ButtonDefault
              label={cancelLabel}
              variant="outline"
              onClick={onClose}
              customClasses="w-1/2"
            />
            <ButtonDefault
              label={confirmLabel}
              variant="primary"
              onClick={onConfirm}
              customClasses={`w-1/2 ${getConfirmButtonStyle(type)}`}
            />
          </div>
        </div>
      </Modal>

      <style>
        {`
          .confirmation-modal .ant-modal-content {
            border-radius: 12px;
            overflow: hidden;
          }
          
          .dark .confirmation-modal .ant-modal-content {
            background-color: #1f2937;
            border: 1px solid #374151;
          }
          
          .confirmation-modal .ant-modal-close {
            color: #6B7280;
          }
          
          .dark .confirmation-modal .ant-modal-close {
            color: #9CA3AF;
          }
          
          .confirmation-modal .ant-modal-close:hover {
            background-color: #F3F4F6;
          }
          
          .dark .confirmation-modal .ant-modal-close:hover {
            background-color: #374151;
          }
        `}
      </style>
    </>
  );
}

// otherUseCases:

// Basic confirmation
{
  /* <ConfirmationModal
  isOpen={showModal}
  onClose={() => setShowModal(false)}
  onConfirm={handleConfirm}
/>

// Delete confirmation
<ConfirmationModal
  isOpen={showDeleteModal}
  onClose={() => setShowDeleteModal(false)}
  onConfirm={handleDelete}
  type="delete"
  title="Confirm Deletion"
  message={`Are you sure you want to delete ${count} item`}
  count={selectedItems.length}
  confirmLabel="Delete"
/>

// Warning with custom message
<ConfirmationModal
  isOpen={showWarningModal}
  onClose={() => setShowWarningModal(false)}
  onConfirm={handleWarningAction}
  type="warning"
  title="Warning"
  message="This action cannot be undone. Proceed with caution."
  confirmLabel="Proceed"
/>

// Info modal
<ConfirmationModal
  isOpen={showInfoModal}
  onClose={() => setShowInfoModal(false)}
  onConfirm={handleInfoAction}
  type="info"
  title="Complete Action"
  message="Would you like to complete this action now?"
/> */
}


================================================
File: src/components/Modals/QuickEdit.tsx
================================================
// components/QuickEditModal.tsx
import React, { useEffect, useState } from "react";
import { Modal } from "antd";
import LeadAction from "../../Pages/Leads/LeadAction";

interface QuickEditModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit?: (formData: any) => Promise<void>;
  initialData: {
    id: string;
    status: string;
    followUpDate: string;
    leadLostReasonId: string;
    comment: string;
    leadWonAmount: number;
    addCalender: boolean;
    leadName?: string;
  };
  isLoading?: boolean;
}

const QuickEditModal: React.FC<QuickEditModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  initialData,
  isLoading = false,
}) => {
  const [formData, setFormData] = useState({
    status: initialData.status,
    followup: initialData.followUpDate,
    leadWonAmount: initialData.leadWonAmount || 0,
    addCalender: initialData.addCalender || false,
    comment: initialData.comment || "",
    leadLostReasonId: initialData.leadLostReasonId,
  });
  const [firstTimeClick, setFirstTimeClick] = useState(true);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const clearTextArea = (name: string) => {
    if (!firstTimeClick) return;

    setFormData((prev) => ({ ...prev, [name]: "" }));
    setFirstTimeClick(false);
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (_selectedDates: Date[], dateStr: string) => {
    setFormData((prev) => ({ ...prev, followup: dateStr }));
  };

  const handleCheckboxChange = ({
    value,
    isChecked,
  }: {
    value: string;
    isChecked: boolean;
  }) => {
    setFormData((prev) => ({ ...prev, [value]: isChecked }));
  };

  const handleSubmit = async () => {
    // await onSubmit({
    //   leadStatus: formData.status,
    //   followUpDate: formData.followup,
    //   addCalender: formData.addCalender,
    //   comment: formData.comment,
    //   leadLostReasonId: formData.leadLostReasonId,
    //   leadWonAmount: formData.leadWonAmount,
    // });
  };

  useEffect(() => {
    setFormData({
      status: initialData.status,
      followup: initialData.followUpDate,
      leadWonAmount: initialData.leadWonAmount || 0,
      addCalender: initialData.addCalender || false,
      comment: initialData.comment || "",
      leadLostReasonId: initialData.leadLostReasonId,
    });
  }, [initialData]);

  return (
    <Modal
      // title="Quick Edit Lead"
      open={isOpen}
      onCancel={onClose}
      footer={null}
      width={"auto"}
      centered
      className="dark:bg-gray-800"
    >
      {/* <div className="space-y-4 py-4 dark:bg-gray-800 dark:text-white">
        <span className="text-body-sm font-medium text-dark dark:text-white">
          Name:{" "}
        </span>
        <span>{initialData.leadName}</span>
        <LeadStatusUI
          handleInputChange={handleInputChange}
          handleSelectChange={handleSelectChange}
          formData={formData}
          defaultValue={formData.status}
          value={formData.status}
          lostReasonValue={formData.leadLostReasonId}
        />
        <AntDateTimePicker
          label="Followup"
          onChange={handleDateChange}
          defaultValue={formData.followup}
          enableTime
        />
        <div>
          <label className="mb-3 block text-body-sm font-medium text-dark dark:text-white">
            Comment
          </label>
          <textarea
            name="comment"
            value={formData.comment}
            onFocus={() => clearTextArea("comment")}
            onChange={handleInputChange}
            placeholder="Add your comment"
            className="w-full rounded-lg border-[1.5px] border-stroke bg-transparent px-5 py-3 text-dark outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-gray-2 dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
            rows={2}
          />
        </div>
        <div className="flex items-center">
          <CheckboxTwo
            label="Add to Calendar"
            onChange={handleCheckboxChange}
            checked={formData.addCalender}
            idForAPI={"addCalender"}
            id={initialData.id + "Add_to_Calendar_QuickEdit"}
          />
        </div>
        <div className="flex justify-end gap-3 mt-6">
          <ButtonDefault
            label="Cancel"
            onClick={onClose}
            variant="secondary"
            customClasses="bg-gray-200 hover:bg-gray-300 text-gray-800"
          />
          <ButtonDefault
            label={isLoading ? "Updating..." : "Update"}
            onClick={handleSubmit}
            variant="primary"
            disabled={isLoading}
            customClasses="bg-primary hover:bg-primary/90 text-white"
          />
        </div>
      </div> */}
      <LeadAction leadIdProp={initialData.id} isModalView={true} onClose={onClose} />
    </Modal>
  );
};

export default QuickEditModal;


================================================
File: src/components/Notification/NotificationSetup.tsx
================================================
import React, { useEffect, useState } from "react";
import { initializeApp } from "firebase/app";
import {
  getMessaging,
  getToken,
  onMessage,
  isSupported,
} from "firebase/messaging";
import { toast } from "react-toastify";
import ConfirmationModal from "../Modals/ConfirmationModal";
import { API } from "../../api";

const firebaseConfig = {
  apiKey: "AIzaSyCozUySs4wmujXlY_NZl8MKkIu8rZkpgic",
  authDomain: "connectcrm-b29a2.firebaseapp.com",
  projectId: "connectcrm-b29a2",
  storageBucket: "connectcrm-b29a2.firebasestorage.app",
  messagingSenderId: "690967737660",
  appId: "1:690967737660:web:d542a11843a7241c9d5a39",
  measurementId: "G-G3NC1QYNWK",
};

const VAPID_KEY =
  "BN-ecD8jPYjlkB9SssiGilOEiqwdTsBE7vt2MfmJOz9aq2puY20gHpTed_9-DHJA4UECAOcE72Yn63SilnVupvY";

const NotificationSetup: React.FC = () => {
  const [showConfirmation, setShowConfirmation] = useState(false);

  const requestNotificationPermission = async () => {
    try {
      const permission = await Notification.requestPermission();

      if (permission === "granted") {
        await initializeFirebaseMessaging();
      } else {
        toast.error("Notifications are disabled");
      }
    } catch (err) {
      toast.error("Failed to request notification permission");
    }
  };

  const initializeFirebaseMessaging = async () => {
    try {
      if (!(await isSupported())) {
        throw new Error("Firebase Messaging is not supported in this browser.");
      }

      if (!("serviceWorker" in navigator)) {
        throw new Error("Service Worker is not supported in this browser.");
      }

      const app = initializeApp(firebaseConfig);
      const messaging = getMessaging(app);
      const serviceWorkerRegistration = await navigator.serviceWorker.register(
        "/firebase-messaging-sw.js"
      );

      const token = await getToken(messaging, {
        vapidKey: VAPID_KEY,
        serviceWorkerRegistration,
      });

      if (!token) {
        throw new Error("Failed to retrieve FCM Token.");
      }

      if (localStorage.getItem("fcmWebToken") === token) {
        return;
      }
      // Update token in backend
      try {
        const { error, message } = await API.PutAuthAPI(
          { fcmWebToken: token },
          null,
          "update-token",
          true
        );

        if (error) {
          throw new Error(error);
        }

        localStorage.setItem("fcmWebToken", token);
      } catch (error) {
        console.error("Failed to update FCM token:", error);
      }

      onMessage(messaging, (payload) => {
        if (payload.notification) {
          new Notification(
            payload.notification.title || "Connect CRM Notification",
            {
              body: payload.notification.body || "",
              icon: payload.notification.icon || "/images/logo/LogoIcon.png",
              badge: "/images/logo/LogoIcon.png",
            }
          );
        }
      });
    } catch (err) {
      toast.error(err instanceof Error ? err.message : "An error occurred");
    }
  };

  useEffect(() => {
    const checkPermission = async () => {
      const permission = Notification.permission;
      if (permission === "default") {
        setShowConfirmation(true);
      } else if (permission === "granted") {
        await initializeFirebaseMessaging();
      }
    };

    checkPermission();
  }, []);

  return (
    <>
      <ConfirmationModal
        isOpen={showConfirmation}
        onClose={() => setShowConfirmation(false)}
        onConfirm={() => {
          setShowConfirmation(false);
          requestNotificationPermission();
        }}
        type="info"
        title="Enable Notifications"
        message="Would you like to receive notifications to stay updated with the latest updates?"
        confirmLabel="Enable"
        cancelLabel="Not Now"
      />
    </>
  );
};

export default NotificationSetup;


================================================
File: src/components/ProfileBox/index.tsx
================================================
"use client";
import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { FaFacebookF, FaTwitter, FaLinkedinIn, FaGithub } from "react-icons/fa";
import { MdVerified, MdErrorOutline } from "react-icons/md";
import { Avatar } from "antd";
interface UserData {
  _id: string;
  name: string;
  email: string;
  phone: string;
  companyCode: string;
  role: string;
  isEmailVerified: boolean;
  isMobileVerified: boolean;
  bio: string;
  profilePic: string;
  company: {
    id: string;
    name: string;
    code: string;
    subscription: {
      plan: string;
      startDate: string;
      endDate: string;
      status: string;
      features: string[];
    };
  };
}

const ProfileBox = () => {
  const [userData, setUserData] = useState<UserData | null>(null);

  useEffect(() => {
    const userStr = localStorage.getItem("user");
    if (userStr) {
      try {
        const data = JSON.parse(userStr);
        setUserData(data);
      } catch (error) {
        console.error("Error parsing user data:", error);
      }
    }
  }, []);

  if (!userData) return null;

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };
  return (
    <>
      <div className="overflow-hidden rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
        <div className="relative z-20 h-35 md:h-65">
          <img
            src="/images/cover/cover-01.png"
            alt="profile cover"
            className="h-full w-full rounded-tl-[10px] rounded-tr-[10px] object-cover object-center"
            width={970}
            height={260}
            style={{
              width: "auto",
              height: "auto",
            }}
          />
          {/* <div className="absolute bottom-1 right-1 z-10 xsm:bottom-4 xsm:right-4">
            <label
              htmlFor="cover"
              className="flex cursor-pointer items-center justify-center gap-2 rounded-[3px] bg-primary px-[15px] py-[5px] text-body-sm font-medium text-white hover:bg-opacity-90"
            >
              <input
                type="file"
                name="coverPhoto"
                id="coverPhoto"
                className="sr-only"
                accept="image/png, image/jpg, image/jpeg"
              />
              <span>
                <svg
                  className="fill-current"
                  width="18"
                  height="18"
                  viewBox="0 0 18 18"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M5.69882 3.365C5.89894 2.38259 6.77316 1.6875 7.77475 1.6875H10.2252C11.2268 1.6875 12.1011 2.38259 12.3012 3.36499C12.3474 3.59178 12.5528 3.75814 12.7665 3.75814H12.7788L12.7911 3.75868C13.8437 3.80471 14.6521 3.93387 15.3271 4.37668C15.7524 4.65568 16.1182 5.01463 16.4033 5.43348C16.7579 5.9546 16.9143 6.55271 16.9893 7.27609C17.0625 7.98284 17.0625 8.86875 17.0625 9.99079V10.0547C17.0625 11.1767 17.0625 12.0626 16.9893 12.7694C16.9143 13.4927 16.7579 14.0909 16.4033 14.612C16.1182 15.0308 15.7524 15.3898 15.3271 15.6688C14.7995 16.0149 14.1947 16.1675 13.461 16.2408C12.7428 16.3125 11.8418 16.3125 10.6976 16.3125H7.30242C6.15824 16.3125 5.25725 16.3125 4.53897 16.2408C3.80534 16.1675 3.20049 16.0149 2.67289 15.6688C2.24761 15.3898 1.88179 15.0308 1.59674 14.612C1.24209 14.0909 1.08567 13.4927 1.01072 12.7694C0.937488 12.0626 0.937494 11.1767 0.9375 10.0547V9.9908C0.937494 8.86875 0.937488 7.98284 1.01072 7.27609C1.08567 6.55271 1.24209 5.9546 1.59674 5.43348C1.88179 5.01463 2.24761 4.65568 2.67289 4.37668C3.34787 3.93387 4.15635 3.80471 5.20892 3.75868L5.2212 3.75814H5.2335C5.44716 3.75814 5.65262 3.59179 5.69882 3.365ZM7.77475 2.8125C7.29392 2.8125 6.89179 3.14475 6.80118 3.58955C6.65443 4.30994 6.01575 4.8764 5.24725 4.88308C4.23579 4.92802 3.69402 5.05227 3.28998 5.31733C2.98732 5.51589 2.72814 5.77058 2.52679 6.06643C2.31968 6.37076 2.19522 6.75994 2.12973 7.39203C2.06321 8.03405 2.0625 8.8617 2.0625 10.0227C2.0625 11.1838 2.06321 12.0114 2.12973 12.6534C2.19522 13.2855 2.31968 13.6747 2.5268 13.979C2.72814 14.2749 2.98732 14.5296 3.28998 14.7281C3.60313 14.9336 4.00383 15.0567 4.65078 15.1213C5.30662 15.1868 6.15145 15.1875 7.33333 15.1875H10.6667C11.8486 15.1875 12.6934 15.1868 13.3492 15.1213C13.9962 15.0567 14.3969 14.9336 14.71 14.7281C15.0127 14.5296 15.2719 14.2749 15.4732 13.979C15.6803 13.6747 15.8048 13.2855 15.8703 12.6534C15.9368 12.0114 15.9375 11.1838 15.9375 10.0227C15.9375 8.8617 15.9368 8.03405 15.8703 7.39203C15.8048 6.75994 15.6803 6.37076 15.4732 6.06643C15.2719 5.77058 15.0127 5.51589 14.71 5.31733C14.306 5.05227 13.7642 4.92802 12.7528 4.88308C11.9843 4.8764 11.3456 4.30994 11.1988 3.58955C11.1082 3.14475 10.7061 2.8125 10.2252 2.8125H7.77475ZM9 8.0625C8.06802 8.0625 7.3125 8.81802 7.3125 9.75C7.3125 10.682 8.06802 11.4375 9 11.4375C9.93198 11.4375 10.6875 10.682 10.6875 9.75C10.6875 8.81802 9.93198 8.0625 9 8.0625ZM6.1875 9.75C6.1875 8.1967 7.4467 6.9375 9 6.9375C10.5533 6.9375 11.8125 8.1967 11.8125 9.75C11.8125 11.3033 10.5533 12.5625 9 12.5625C7.4467 12.5625 6.1875 11.3033 6.1875 9.75ZM12.9375 7.5C12.9375 7.18934 13.1893 6.9375 13.5 6.9375H14.25C14.5607 6.9375 14.8125 7.18934 14.8125 7.5C14.8125 7.81066 14.5607 8.0625 14.25 8.0625H13.5C13.1893 8.0625 12.9375 7.81066 12.9375 7.5Z"
                    fill=""
                  />
                </svg>
              </span>
              <span>Edit</span>
            </label>
          </div> */}
        </div>
        <div className="px-4 pb-6 text-center lg:pb-8 xl:pb-11.5">
          <div className="relative z-30 mx-auto -mt-22 h-30 w-full max-w-30 rounded-full bg-white/20 p-1 backdrop-blur sm:h-44 sm:max-w-[176px] sm:p-3">
            <div className="relative drop-shadow-2">
              <Avatar
                size={152}
                src={
                  userData?.profilePic
                    ? userData?.profilePic
                    : "https://api.dicebear.com/7.x/miniavs/svg?seed=1"
                }
                style={{ background: "lightblue" }}
              />
            </div>

            {/* <label
              htmlFor="profilePhoto"
              className="absolute bottom-0 right-0 flex h-8.5 w-8.5 cursor-pointer items-center justify-center rounded-full bg-primary text-white hover:bg-opacity-90 sm:bottom-2 sm:right-2"
            >
              <svg
                className="fill-current"
                width="18"
                height="18"
                viewBox="0 0 18 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M5.69882 3.365C5.89894 2.38259 6.77316 1.6875 7.77475 1.6875H10.2252C11.2268 1.6875 12.1011 2.38259 12.3012 3.36499C12.3474 3.59178 12.5528 3.75814 12.7665 3.75814H12.7788L12.7911 3.75868C13.8437 3.80471 14.6521 3.93387 15.3271 4.37668C15.7524 4.65568 16.1182 5.01463 16.4033 5.43348C16.7579 5.9546 16.9143 6.55271 16.9893 7.27609C17.0625 7.98284 17.0625 8.86875 17.0625 9.99079V10.0547C17.0625 11.1767 17.0625 12.0626 16.9893 12.7694C16.9143 13.4927 16.7579 14.0909 16.4033 14.612C16.1182 15.0308 15.7524 15.3898 15.3271 15.6688C14.7995 16.0149 14.1947 16.1675 13.461 16.2408C12.7428 16.3125 11.8418 16.3125 10.6976 16.3125H7.30242C6.15824 16.3125 5.25725 16.3125 4.53897 16.2408C3.80534 16.1675 3.20049 16.0149 2.67289 15.6688C2.24761 15.3898 1.88179 15.0308 1.59674 14.612C1.24209 14.0909 1.08567 13.4927 1.01072 12.7694C0.937488 12.0626 0.937494 11.1767 0.9375 10.0547V9.9908C0.937494 8.86875 0.937488 7.98284 1.01072 7.27609C1.08567 6.55271 1.24209 5.9546 1.59674 5.43348C1.88179 5.01463 2.24761 4.65568 2.67289 4.37668C3.34787 3.93387 4.15635 3.80471 5.20892 3.75868L5.2212 3.75814H5.2335C5.44716 3.75814 5.65262 3.59179 5.69882 3.365ZM7.77475 2.8125C7.29392 2.8125 6.89179 3.14475 6.80118 3.58955C6.65443 4.30994 6.01575 4.8764 5.24725 4.88308C4.23579 4.92802 3.69402 5.05227 3.28998 5.31733C2.98732 5.51589 2.72814 5.77058 2.52679 6.06643C2.31968 6.37076 2.19522 6.75994 2.12973 7.39203C2.06321 8.03405 2.0625 8.8617 2.0625 10.0227C2.0625 11.1838 2.06321 12.0114 2.12973 12.6534C2.19522 13.2855 2.31968 13.6747 2.5268 13.979C2.72814 14.2749 2.98732 14.5296 3.28998 14.7281C3.60313 14.9336 4.00383 15.0567 4.65078 15.1213C5.30662 15.1868 6.15145 15.1875 7.33333 15.1875H10.6667C11.8486 15.1875 12.6934 15.1868 13.3492 15.1213C13.9962 15.0567 14.3969 14.9336 14.71 14.7281C15.0127 14.5296 15.2719 14.2749 15.4732 13.979C15.6803 13.6747 15.8048 13.2855 15.8703 12.6534C15.9368 12.0114 15.9375 11.1838 15.9375 10.0227C15.9375 8.8617 15.9368 8.03405 15.8703 7.39203C15.8048 6.75994 15.6803 6.37076 15.4732 6.06643C15.2719 5.77058 15.0127 5.51589 14.71 5.31733C14.306 5.05227 13.7642 4.92802 12.7528 4.88308C11.9843 4.8764 11.3456 4.30994 11.1988 3.58955C11.1082 3.14475 10.7061 2.8125 10.2252 2.8125H7.77475ZM9 8.0625C8.06802 8.0625 7.3125 8.81802 7.3125 9.75C7.3125 10.682 8.06802 11.4375 9 11.4375C9.93198 11.4375 10.6875 10.682 10.6875 9.75C10.6875 8.81802 9.93198 8.0625 9 8.0625ZM6.1875 9.75C6.1875 8.1967 7.4467 6.9375 9 6.9375C10.5533 6.9375 11.8125 8.1967 11.8125 9.75C11.8125 11.3033 10.5533 12.5625 9 12.5625C7.4467 12.5625 6.1875 11.3033 6.1875 9.75ZM12.9375 7.5C12.9375 7.18934 13.1893 6.9375 13.5 6.9375H14.25C14.5607 6.9375 14.8125 7.18934 14.8125 7.5C14.8125 7.81066 14.5607 8.0625 14.25 8.0625H13.5C13.1893 8.0625 12.9375 7.81066 12.9375 7.5Z"
                  fill=""
                />
              </svg>

              <input
                type="file"
                name="profilePhoto"
                id="profilePhoto"
                className="sr-only"
                accept="image/png, image/jpg, image/jpeg"
              />
            </label> */}
          </div>
          <div className="mt-4">
            <h3 className="mb-1 text-heading-6 font-bold text-dark dark:text-white">
              {userData.name}
            </h3>
            <p className="font-medium">
              {userData.role}{" "}
              <span className=" text-sm">@{userData.company.name}</span>
            </p>
            {/* <div className="mx-auto mb-5.5 mt-5 grid max-w-[370px] grid-cols-3 rounded-[5px] border border-stroke py-[9px] shadow-1 dark:border-dark-3 dark:bg-dark-2 dark:shadow-card">
              <div className="flex flex-col items-center justify-center gap-1 border-r border-stroke px-4 dark:border-dark-3 xsm:flex-row">
                <span className="font-medium text-dark dark:text-white">
                  259
                </span>
                <span className="text-body-sm">Posts</span>
              </div>
              <div className="flex flex-col items-center justify-center gap-1 border-r border-stroke px-4 dark:border-dark-3 xsm:flex-row">
                <span className="font-medium text-dark dark:text-white">
                  129K
                </span>
                <span className="text-body-sm">Followers</span>
              </div>
              <div className="flex flex-col items-center justify-center gap-1 px-4 xsm:flex-row">
                <span className="font-medium text-dark dark:text-white">
                  2K
                </span>
                <span className="text-body-sm-sm">Following</span>
              </div>
            </div> */}

            <div className="mx-auto mt-6 max-w-[720px]">
              <h4 className="font-medium text-dark dark:text-white">
                About Me
              </h4>
              <p className="mt-1">{userData.bio}</p>
            </div>
            <div className="flex justify-center gap-6 mt-6">
              <div>
                <h4 className="mb-1 font-medium text-dark dark:text-white">
                  Contact Information
                </h4>
                <div className="space-y-1 text-gray-600 dark:text-gray-400">
                  <p>{userData.email}</p>
                  <p>{userData.phone}</p>
                </div>
              </div>
              <div>
                <h4 className="mb-1 font-medium text-dark dark:text-white">
                  Company Details
                </h4>
                <div className="space-y-1 text-gray-600 dark:text-gray-400">
                  <p>{userData?.company?.name}</p>
                  <p>{userData.companyCode}</p>
                </div>
              </div>
              <div>
                <h4 className="mb-1 font-medium text-dark dark:text-white">
                  Subscription Details
                </h4>
                <div className="space-y-1 text-gray-600 dark:text-gray-400">
                  <p>Plan Name: {userData.company?.subscription?.plan}</p>
                  <p>
                    Expires:{" "}
                    {formatDate(userData.company?.subscription?.endDate)}
                  </p>
                </div>
              </div>
            </div>

            <div className="mt-4.5">
              {/* Social Links */}
              <div className="mt-6">
                <div className="flex items-center justify-center gap-3.5">
                  <Link
                    to="#"
                    className="flex h-10 w-10 items-center justify-center rounded-full border border-stroke text-gray-600 hover:border-primary hover:text-primary dark:border-dark-3 dark:text-white"
                  >
                    <FaFacebookF />
                  </Link>
                  <Link
                    to="#"
                    className="flex h-10 w-10 items-center justify-center rounded-full border border-stroke text-gray-600 hover:border-primary hover:text-primary dark:border-dark-3 dark:text-white"
                  >
                    <FaTwitter />
                  </Link>
                  <Link
                    to="#"
                    className="flex h-10 w-10 items-center justify-center rounded-full border border-stroke text-gray-600 hover:border-primary hover:text-primary dark:border-dark-3 dark:text-white"
                  >
                    <FaLinkedinIn />
                  </Link>
                  <Link
                    to="#"
                    className="flex h-10 w-10 items-center justify-center rounded-full border border-stroke text-gray-600 hover:border-primary hover:text-primary dark:border-dark-3 dark:text-white"
                  >
                    <FaGithub />
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default ProfileBox;


================================================
File: src/components/SelectOption/DefaultSelectOption.tsx
================================================
import { useState } from "react";
import ClickOutside from "../ClickOutside";

const DefaultSelectOption = ({ options }: any) => {
  const [selectedOption, setSelectedOption] = useState(options[0]);
  const [isOpen, setIsOpen] = useState(false);

  const handleOptionSelect = (option: string) => {
    setSelectedOption(option);
    setIsOpen(false);
  };

  return (
    <ClickOutside onClick={() => setIsOpen(false)}>
      <div className="relative z-20 inline-flex cursor-pointer appearance-none rounded-[5px] border border-stroke bg-white text-sm font-medium outline-none dark:border-dark-3 dark:bg-dark-2">
        <div
          className={`py-[5px] pl-[9px] pr-[35px] text-sm font-medium text-dark dark:text-white ${isOpen ? "open" : ""}`}
          onClick={() => setIsOpen(!isOpen)}
        >
          {selectedOption}
          <span
            className={`absolute right-2.5 top-1/2 z-10 -translate-y-1/2 ${isOpen && "rotate-180"}`}
          >
            <svg
              className="fill-current"
              width="18"
              height="18"
              viewBox="0 0 18 18"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M3.32293 6.38394C3.5251 6.14807 3.88021 6.12075 4.11608 6.32293L9.00001 10.5092L13.8839 6.32293C14.1198 6.12075 14.4749 6.14807 14.6771 6.38394C14.8793 6.61981 14.8519 6.97492 14.6161 7.17709L9.36608 11.6771C9.15543 11.8576 8.84459 11.8576 8.63394 11.6771L3.38394 7.17709C3.14807 6.97492 3.12075 6.61981 3.32293 6.38394Z"
                fill=""
              />
            </svg>
          </span>
        </div>
        {isOpen && (
          <div className="absolute right-0 top-full z-40 mt-2 w-full rounded-[7px] border border-stroke bg-white py-1.5 shadow-2 dark:border-dark-3 dark:bg-dark-2 dark:shadow-card">
            <ul>
              {options.map((option: string, index: number) => (
                <li
                  key={index}
                  onClick={() => handleOptionSelect(option)}
                  className={`flex w-full cursor-pointer items-center gap-2 rounded-lg px-2.5 py-1.5 text-left font-medium hover:text-dark dark:hover:text-white ${selectedOption === option ? "selected" : ""}`}
                >
                  {option}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </ClickOutside>
  );
};

export default DefaultSelectOption;


================================================
File: src/components/SettingBoxes/index.tsx
================================================
"use client";

import { Avatar } from "antd";

const SettingBoxes = () => {
  return (
    <>
      <div className="grid grid-cols-5 gap-8">
        <div className="col-span-5 xl:col-span-3">
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-7 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                Personal Information
              </h3>
            </div>
            <div className="p-7">
              <form>
                <div className="mb-5.5 flex flex-col gap-5.5 sm:flex-row">
                  <div className="w-full sm:w-1/2">
                    <label
                      className="mb-3 block text-body-sm font-medium text-dark dark:text-white"
                      htmlFor="fullName"
                    >
                      Full Name
                    </label>
                    <div className="relative">
                      <span className="absolute left-4.5 top-1/2 -translate-y-1/2">
                        <svg
                          className="fill-current"
                          width="20"
                          height="20"
                          viewBox="0 0 20 20"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            fillRule="evenodd"
                            clipRule="evenodd"
                            d="M10.0008 1.0415C7.81464 1.0415 6.04243 2.81371 6.04243 4.99984C6.04243 7.18596 7.81464 8.95817 10.0008 8.95817C12.1869 8.95817 13.9591 7.18596 13.9591 4.99984C13.9591 2.81371 12.1869 1.0415 10.0008 1.0415ZM7.29243 4.99984C7.29243 3.50407 8.50499 2.2915 10.0008 2.2915C11.4965 2.2915 12.7091 3.50407 12.7091 4.99984C12.7091 6.49561 11.4965 7.70817 10.0008 7.70817C8.50499 7.70817 7.29243 6.49561 7.29243 4.99984Z"
                            fill=""
                          />
                          <path
                            fillRule="evenodd"
                            clipRule="evenodd"
                            d="M10.0008 10.2082C8.0728 10.2082 6.29653 10.6464 4.9803 11.3868C3.68367 12.1161 2.7091 13.2216 2.7091 14.5832L2.70904 14.6681C2.7081 15.6363 2.70692 16.8515 3.77277 17.7195C4.29733 18.1466 5.03116 18.4504 6.0226 18.6511C7.01681 18.8523 8.31262 18.9582 10.0008 18.9582C11.6889 18.9582 12.9847 18.8523 13.9789 18.6511C14.9704 18.4504 15.7042 18.1466 16.2288 17.7195C17.2946 16.8515 17.2934 15.6363 17.2925 14.6681L17.2924 14.5832C17.2924 13.2216 16.3179 12.1161 15.0212 11.3868C13.705 10.6464 11.9287 10.2082 10.0008 10.2082ZM3.9591 14.5832C3.9591 13.8737 4.47691 13.1041 5.59313 12.4763C6.68976 11.8594 8.24682 11.4582 10.0008 11.4582C11.7547 11.4582 13.3118 11.8594 14.4084 12.4763C15.5246 13.1041 16.0424 13.8737 16.0424 14.5832C16.0424 15.673 16.0088 16.2865 15.4394 16.7502C15.1307 17.0016 14.6145 17.2471 13.7309 17.4259C12.8501 17.6042 11.646 17.7082 10.0008 17.7082C8.35558 17.7082 7.15138 17.6042 6.27059 17.4259C5.38703 17.2471 4.87086 17.0016 4.56209 16.7502C3.99269 16.2865 3.9591 15.673 3.9591 14.5832Z"
                            fill=""
                          />
                        </svg>
                      </span>
                      <input
                        className="w-full rounded-[7px] border-[1.5px] border-stroke bg-white py-2.5 pl-12.5 pr-4.5 text-dark focus:border-primary focus-visible:outline-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                        type="text"
                        name="fullName"
                        id="fullName"
                        placeholder="Devid Jhon"
                        defaultValue="Devid Jhon"
                      />
                    </div>
                  </div>

                  <div className="w-full sm:w-1/2">
                    <label
                      className="mb-3 block text-body-sm font-medium text-dark dark:text-white"
                      htmlFor="phoneNumber"
                    >
                      Phone Number
                    </label>
                    <div className="relative">
                      <span className="absolute left-4.5 top-1/2 -translate-y-1/2">
                        <svg
                          className="fill-current"
                          width="20"
                          height="20"
                          viewBox="0 0 20 20"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            fillRule="evenodd"
                            clipRule="evenodd"
                            d="M4.77789 1.70226C5.79233 0.693575 7.46264 0.873121 8.31207 2.00777L9.36289 3.41144C10.0541 4.33468 9.99306 5.62502 9.17264 6.44079L8.97367 6.63863C8.96498 6.66387 8.9439 6.74322 8.96729 6.89401C9.01998 7.23359 9.30354 7.95393 10.494 9.1376C11.684 10.3209 12.4094 10.6041 12.7538 10.657C12.9099 10.6809 12.9915 10.6586 13.0168 10.6498L13.3568 10.3117C14.0862 9.58651 15.2069 9.45095 16.1099 9.94183L17.702 10.8073C19.0653 11.5484 19.4097 13.4015 18.2928 14.5121L17.109 15.6892C16.736 16.06 16.2344 16.3693 15.6223 16.4264C14.1148 16.5669 10.5996 16.3876 6.90615 12.7151C3.45788 9.28642 2.79616 6.29643 2.71244 4.82323L3.33643 4.78777L2.71244 4.82323C2.67011 4.07831 3.02212 3.44806 3.46989 3.00283L4.77789 1.70226ZM7.31141 2.75689C6.88922 2.19294 6.10232 2.1481 5.65925 2.58866L4.35125 3.88923C4.07632 4.1626 3.94404 4.46388 3.96043 4.75231C4.02695 5.92281 4.56136 8.62088 7.78751 11.8287C11.1721 15.194 14.298 15.2944 15.5062 15.1818C15.7531 15.1587 15.9986 15.0305 16.2276 14.8028L17.4114 13.6257C17.8926 13.1472 17.7865 12.276 17.105 11.9055L15.5129 11.0401C15.0733 10.8011 14.5582 10.8799 14.2382 11.1981L13.8586 11.5755L13.418 11.1323C13.8586 11.5755 13.858 11.5761 13.8574 11.5767L13.8562 11.5779L13.8537 11.5804L13.8483 11.5856L13.8361 11.5969C13.8273 11.6049 13.8173 11.6137 13.806 11.6231C13.7833 11.6418 13.7555 11.663 13.7222 11.6853C13.6555 11.73 13.5674 11.7786 13.4567 11.8199C13.231 11.904 12.9333 11.9491 12.5643 11.8925C11.842 11.7817 10.8851 11.2893 9.61261 10.024C8.34054 8.75915 7.84394 7.80671 7.73207 7.08564C7.67487 6.71693 7.72049 6.41918 7.8056 6.1933C7.84731 6.0826 7.89646 5.99458 7.94157 5.928C7.96407 5.8948 7.98548 5.86704 8.00437 5.84449C8.01382 5.83322 8.02265 5.82323 8.03068 5.81451L8.04212 5.80235L8.04737 5.79697L8.04986 5.79445L8.05107 5.79323C8.05167 5.79264 8.05227 5.79204 8.49295 6.23524L8.05227 5.79204L8.29128 5.55439C8.64845 5.19925 8.69847 4.60971 8.36223 4.16056L7.31141 2.75689Z"
                            fill=""
                          />
                        </svg>
                      </span>

                      <input
                        className="w-full rounded-[7px] border-[1.5px] border-stroke bg-white py-2.5 pl-12.5 pr-4.5 text-dark focus:border-primary focus-visible:outline-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                        type="text"
                        name="phoneNumber"
                        id="phoneNumber"
                        placeholder="+990 3343 7865"
                        defaultValue="+990 3343 7865"
                        readOnly
                        disabled
                      />
                    </div>
                  </div>
                </div>

                <div className="mb-5.5">
                  <label
                    className="mb-3 block text-body-sm font-medium text-dark dark:text-white"
                    htmlFor="emailAddress"
                  >
                    Email Address
                  </label>
                  <div className="relative">
                    <span className="absolute left-4.5 top-1/2 -translate-y-1/2">
                      <svg
                        className="fill-current"
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M8.28567 2.7085H11.713C13.2445 2.70848 14.4575 2.70847 15.4069 2.83611C16.3839 2.96747 17.1747 3.24423 17.7983 3.86787C18.4219 4.4915 18.6987 5.28229 18.8301 6.25931C18.9577 7.20866 18.9577 8.42169 18.9577 9.95315V10.0472C18.9577 11.5786 18.9577 12.7917 18.8301 13.741C18.6987 14.718 18.4219 15.5088 17.7983 16.1325C17.1747 16.7561 16.3839 17.0329 15.4069 17.1642C14.4575 17.2919 13.2445 17.2918 11.713 17.2918H8.28567C6.75421 17.2918 5.54118 17.2919 4.59183 17.1642C3.61481 17.0329 2.82402 16.7561 2.20039 16.1325C1.57675 15.5088 1.29999 14.718 1.16863 13.741C1.04099 12.7917 1.041 11.5786 1.04102 10.0472V9.95315C1.041 8.42168 1.04099 7.20866 1.16863 6.25931C1.29999 5.28229 1.57675 4.4915 2.20039 3.86787C2.82402 3.24423 3.61481 2.96747 4.59183 2.83611C5.54118 2.70847 6.7542 2.70848 8.28567 2.7085ZM4.75839 4.07496C3.91998 4.18768 3.43694 4.39907 3.08427 4.75175C2.73159 5.10442 2.5202 5.58746 2.40748 6.42587C2.29234 7.28226 2.29102 8.41115 2.29102 10.0002C2.29102 11.5892 2.29234 12.7181 2.40748 13.5745C2.5202 14.4129 2.73159 14.8959 3.08427 15.2486C3.43694 15.6013 3.91998 15.8126 4.75839 15.9254C5.61478 16.0405 6.74367 16.0418 8.33268 16.0418H11.666C13.255 16.0418 14.3839 16.0405 15.2403 15.9254C16.0787 15.8126 16.5618 15.6013 16.9144 15.2486C17.2671 14.8959 17.4785 14.4129 17.5912 13.5745C17.7064 12.7181 17.7077 11.5892 17.7077 10.0002C17.7077 8.41115 17.7064 7.28226 17.5912 6.42587C17.4785 5.58746 17.2671 5.10442 16.9144 4.75175C16.5618 4.39907 16.0787 4.18768 15.2403 4.07496C14.3839 3.95982 13.255 3.9585 11.666 3.9585H8.33268C6.74367 3.9585 5.61478 3.95982 4.75839 4.07496ZM4.51921 6.26671C4.74019 6.00154 5.13429 5.96571 5.39946 6.18669L7.19854 7.68592C7.97601 8.33381 8.51579 8.78218 8.9715 9.07527C9.41263 9.35899 9.71179 9.45423 9.99935 9.45423C10.2869 9.45423 10.5861 9.35899 11.0272 9.07527C11.4829 8.78218 12.0227 8.33381 12.8002 7.68592L14.5992 6.18669C14.8644 5.96571 15.2585 6.00154 15.4795 6.26671C15.7005 6.53189 15.6646 6.92599 15.3995 7.14697L13.5691 8.67231C12.8304 9.28785 12.2318 9.78676 11.7034 10.1266C11.153 10.4806 10.6169 10.7042 9.99935 10.7042C9.38179 10.7042 8.84574 10.4806 8.29533 10.1266C7.76695 9.78677 7.16828 9.28786 6.42965 8.67232L4.59923 7.14697C4.33406 6.92599 4.29823 6.53189 4.51921 6.26671Z"
                          fill=""
                        />
                      </svg>
                    </span>
                    <input
                      className="w-full rounded-[7px] border-[1.5px] border-stroke bg-white py-2.5 pl-12.5 pr-4.5 text-dark focus:border-primary focus-visible:outline-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                      type="email"
                      name="emailAddress"
                      id="emailAddress"
                      placeholder="devidjond45@gmail.com"
                      defaultValue="devidjond45@gmail.com"
                      readOnly
                      disabled
                    />
                  </div>
                </div>

                {/* <div className="mb-5.5">
                  <label
                    className="mb-3 block text-body-sm font-medium text-dark dark:text-white"
                    htmlFor="Username"
                  >
                    Username
                  </label>
                  <div className="relative">
                    <span className="absolute left-4.5 top-1/2 -translate-y-1/2">
                      <svg
                        className="fill-current"
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M10.0008 1.0415C7.81464 1.0415 6.04243 2.81371 6.04243 4.99984C6.04243 7.18596 7.81464 8.95817 10.0008 8.95817C12.1869 8.95817 13.9591 7.18596 13.9591 4.99984C13.9591 2.81371 12.1869 1.0415 10.0008 1.0415ZM7.29243 4.99984C7.29243 3.50407 8.50499 2.2915 10.0008 2.2915C11.4965 2.2915 12.7091 3.50407 12.7091 4.99984C12.7091 6.49561 11.4965 7.70817 10.0008 7.70817C8.50499 7.70817 7.29243 6.49561 7.29243 4.99984Z"
                          fill=""
                        />
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M10.0008 10.2082C8.0728 10.2082 6.29653 10.6464 4.9803 11.3868C3.68367 12.1161 2.7091 13.2216 2.7091 14.5832L2.70904 14.6681C2.7081 15.6363 2.70692 16.8515 3.77277 17.7195C4.29733 18.1466 5.03116 18.4504 6.0226 18.6511C7.01681 18.8523 8.31262 18.9582 10.0008 18.9582C11.6889 18.9582 12.9847 18.8523 13.9789 18.6511C14.9704 18.4504 15.7042 18.1466 16.2288 17.7195C17.2946 16.8515 17.2934 15.6363 17.2925 14.6681L17.2924 14.5832C17.2924 13.2216 16.3179 12.1161 15.0212 11.3868C13.705 10.6464 11.9287 10.2082 10.0008 10.2082ZM3.9591 14.5832C3.9591 13.8737 4.47691 13.1041 5.59313 12.4763C6.68976 11.8594 8.24682 11.4582 10.0008 11.4582C11.7547 11.4582 13.3118 11.8594 14.4084 12.4763C15.5246 13.1041 16.0424 13.8737 16.0424 14.5832C16.0424 15.673 16.0088 16.2865 15.4394 16.7502C15.1307 17.0016 14.6145 17.2471 13.7309 17.4259C12.8501 17.6042 11.646 17.7082 10.0008 17.7082C8.35558 17.7082 7.15138 17.6042 6.27059 17.4259C5.38703 17.2471 4.87086 17.0016 4.56209 16.7502C3.99269 16.2865 3.9591 15.673 3.9591 14.5832Z"
                          fill=""
                        />
                      </svg>
                    </span>
                    <input
                      className="w-full rounded-[7px] border-[1.5px] border-stroke bg-white py-2.5 pl-12.5 pr-4.5 text-dark focus:border-primary focus-visible:outline-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                      type="text"
                      name="Username"
                      id="Username"
                      placeholder="devidjhon24"
                      defaultValue="devidjhon24"
                    />
                  </div>
                </div> */}

                <div className="mb-5.5">
                  <label
                    className="mb-3 block text-body-sm font-medium text-dark dark:text-white"
                    htmlFor="bio"
                  >
                    BIO
                  </label>
                  <div className="relative">
                    <span className="absolute left-5 top-8">
                      <svg
                        className="fill-current"
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M9.95153 1.0415L11.2493 1.0415C11.5945 1.0415 11.8743 1.32133 11.8743 1.6665C11.8743 2.01168 11.5945 2.2915 11.2493 2.2915H9.99935C8.01749 2.2915 6.59398 2.29283 5.51066 2.43848C4.44533 2.58171 3.80306 2.85412 3.32835 3.32883C2.85363 3.80355 2.58122 4.44582 2.43799 5.51115C2.29234 6.59447 2.29102 8.01798 2.29102 9.99984C2.29102 11.9817 2.29234 13.4052 2.43799 14.4885C2.58122 15.5539 2.85363 16.1961 3.32835 16.6708C3.80306 17.1456 4.44533 17.418 5.51066 17.5612C6.59398 17.7068 8.01749 17.7082 9.99935 17.7082C11.9812 17.7082 13.4047 17.7068 14.488 17.5612C15.5534 17.418 16.1956 17.1456 16.6704 16.6708C17.1451 16.1961 17.4175 15.5539 17.5607 14.4885C17.7064 13.4052 17.7077 11.9817 17.7077 9.99984V8.74984C17.7077 8.40466 17.9875 8.12484 18.3327 8.12484C18.6779 8.12484 18.9577 8.40466 18.9577 8.74984V10.0476C18.9577 11.9713 18.9577 13.4788 18.7996 14.6551C18.6377 15.859 18.2999 16.809 17.5542 17.5547C16.8086 18.3004 15.8585 18.6382 14.6546 18.8C13.4784 18.9582 11.9708 18.9582 10.0472 18.9582H9.95154C8.02788 18.9582 6.52034 18.9582 5.3441 18.8C4.14016 18.6382 3.19014 18.3004 2.44446 17.5547C1.69879 16.809 1.361 15.859 1.19914 14.6551C1.041 13.4788 1.04101 11.9713 1.04102 10.0477V9.95202C1.04101 8.02836 1.041 6.52083 1.19914 5.34459C1.361 4.14065 1.69879 3.19063 2.44446 2.44495C3.19014 1.69928 4.14016 1.36149 5.3441 1.19963C6.52034 1.04148 8.02787 1.04149 9.95153 1.0415ZM13.9748 1.89643C15.1147 0.756528 16.9628 0.756528 18.1028 1.89643C19.2427 3.03634 19.2427 4.88449 18.1028 6.02439L12.5627 11.5645C12.2533 11.8739 12.0595 12.0678 11.8432 12.2365C11.5884 12.4352 11.3128 12.6055 11.0211 12.7445C10.7735 12.8625 10.5135 12.9492 10.0983 13.0875L7.6779 13.8943C7.23103 14.0433 6.73835 13.927 6.40528 13.5939C6.0722 13.2608 5.95589 12.7682 6.10485 12.3213L6.91166 9.90086C7.05001 9.48572 7.13667 9.22566 7.25468 8.97805C7.39367 8.6864 7.56402 8.41077 7.76272 8.15602C7.93142 7.93973 8.12527 7.74591 8.43472 7.4365L13.9748 1.89643ZM17.2189 2.78032C16.5671 2.12857 15.5104 2.12857 14.8587 2.78032L14.5448 3.09417C14.5637 3.17405 14.5902 3.26923 14.627 3.37539C14.7465 3.71961 14.9725 4.17293 15.3994 4.59983C15.8263 5.02673 16.2796 5.25272 16.6238 5.37215C16.73 5.40898 16.8251 5.43544 16.905 5.45436L17.2189 5.14051C17.8706 4.48876 17.8706 3.43207 17.2189 2.78032ZM15.9203 6.43908C15.4903 6.25417 14.9895 5.95772 14.5155 5.48372C14.0415 5.00971 13.745 4.50886 13.5601 4.07888L9.34727 8.29172C9.00018 8.63881 8.86405 8.77647 8.74836 8.92479C8.6055 9.10795 8.48302 9.30613 8.38308 9.51582C8.30215 9.68564 8.23991 9.86895 8.08469 10.3346L7.72477 11.4144L8.58482 12.2744L9.66456 11.9145C10.1302 11.7593 10.3136 11.697 10.4834 11.6161C10.6931 11.5162 10.8912 11.3937 11.0744 11.2508C11.2227 11.1351 11.3604 10.999 11.7075 10.6519L15.9203 6.43908Z"
                          fill=""
                        />
                      </svg>
                    </span>

                    <textarea
                      className="w-full rounded-[7px] border-[1.5px] border-stroke bg-white py-5 pl-13 pr-5 text-dark focus:border-primary focus-visible:outline-none dark:border-dark-3 dark:bg-dark-2 dark:text-white dark:focus:border-primary"
                      name="bio"
                      id="bio"
                      rows={6}
                      placeholder="Write your bio here"
                      defaultValue="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam lacinia turpis tortor, consequat efficitur mi congue a. Curabitur cursus, ipsum ut lobortis sodales, enim arcu pellentesque lectus
 ac suscipit diam sem a felis. Cras sapien ex, blandit eu dui et suscipit gravida nunc. Sed sed est quis dui."
                    ></textarea>
                  </div>
                </div>

                <div className="flex justify-end gap-3">
                  <button className="flex justify-center rounded-[7px] border border-stroke px-6 py-[7px] font-medium text-dark hover:shadow-1 dark:border-dark-3 dark:text-white">
                    Cancel
                  </button>
                  <button
                    className="flex justify-center rounded-[7px] bg-primary px-6 py-[7px] font-medium text-gray-2 hover:bg-opacity-90"
                    type="submit"
                    disabled
                  >
                    Save
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
        <div className="col-span-5 xl:col-span-2">
          <div className="rounded-[10px] border border-stroke bg-white shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card">
            <div className="border-b border-stroke px-7 py-4 dark:border-dark-3">
              <h3 className="font-medium text-dark dark:text-white">
                Your Photo
              </h3>
            </div>
            <div className="p-7">
              <form>
                <div className="mb-4 flex items-center gap-3">
                  <div className="h-14 w-14 rounded-full">
                    <>
                      <Avatar
                        size={60}
                        src={"https://api.dicebear.com/7.x/miniavs/svg?seed=1"}
                        // src={
                        //   userData?.profilePic
                        //     ? userData?.profilePic
                        //     : "https://api.dicebear.com/7.x/miniavs/svg?seed=1"
                        // }
                        style={{ background: "lightblue" }}
                      />
                    </>
                  </div>
                  <div>
                    <span className="mb-1.5 font-medium text-dark dark:text-white">
                      Edit your photo
                    </span>
                    <span className="flex gap-3">
                      <button className="text-body-sm hover:text-red">
                        Delete
                      </button>
                      <button className="text-body-sm hover:text-primary">
                        Update
                      </button>
                    </span>
                  </div>
                </div>

                <div
                  id="FileUpload"
                  className="relative mb-5.5 block w-full cursor-pointer appearance-none rounded-xl border border-dashed border-gray-4 bg-gray-2 px-4 py-4 hover:border-primary dark:border-dark-3 dark:bg-dark-2 dark:hover:border-primary sm:py-7.5"
                >
                  <input
                    type="file"
                    name="profilePhoto"
                    id="profilePhoto"
                    accept="image/png, image/jpg, image/jpeg"
                    className="absolute inset-0 z-50 m-0 h-full w-full cursor-pointer p-0 opacity-0 outline-none"
                  />
                  <div className="flex flex-col items-center justify-center">
                    <span className="flex h-13.5 w-13.5 items-center justify-center rounded-full border border-stroke bg-white dark:border-dark-3 dark:bg-gray-dark">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M10.4613 2.07827C10.3429 1.94876 10.1755 1.875 10 1.875C9.82453 1.875 9.65714 1.94876 9.53873 2.07827L6.2054 5.7241C5.97248 5.97885 5.99019 6.37419 6.24494 6.6071C6.49969 6.84002 6.89502 6.82232 7.12794 6.56756L9.375 4.10984V13.3333C9.375 13.6785 9.65482 13.9583 10 13.9583C10.3452 13.9583 10.625 13.6785 10.625 13.3333V4.10984L12.8721 6.56756C13.105 6.82232 13.5003 6.84002 13.7551 6.6071C14.0098 6.37419 14.0275 5.97885 13.7946 5.7241L10.4613 2.07827Z"
                          fill="#5750F1"
                        />
                        <path
                          d="M3.125 12.5C3.125 12.1548 2.84518 11.875 2.5 11.875C2.15482 11.875 1.875 12.1548 1.875 12.5V12.5457C1.87498 13.6854 1.87497 14.604 1.9721 15.3265C2.07295 16.0765 2.2887 16.7081 2.79029 17.2097C3.29189 17.7113 3.92345 17.9271 4.67354 18.0279C5.39602 18.125 6.31462 18.125 7.45428 18.125H12.5457C13.6854 18.125 14.604 18.125 15.3265 18.0279C16.0766 17.9271 16.7081 17.7113 17.2097 17.2097C17.7113 16.7081 17.9271 16.0765 18.0279 15.3265C18.125 14.604 18.125 13.6854 18.125 12.5457V12.5C18.125 12.1548 17.8452 11.875 17.5 11.875C17.1548 11.875 16.875 12.1548 16.875 12.5C16.875 13.6962 16.8737 14.5304 16.789 15.1599C16.7068 15.7714 16.5565 16.0952 16.3258 16.3258C16.0952 16.5565 15.7714 16.7068 15.1599 16.789C14.5304 16.8737 13.6962 16.875 12.5 16.875H7.5C6.30382 16.875 5.46956 16.8737 4.8401 16.789C4.22862 16.7068 3.90481 16.5565 3.67418 16.3258C3.44354 16.0952 3.29317 15.7714 3.21096 15.1599C3.12633 14.5304 3.125 13.6962 3.125 12.5Z"
                          fill="#5750F1"
                        />
                      </svg>
                    </span>
                    <p className="mt-2.5 text-body-sm font-medium">
                      <span className="text-primary">Click to upload</span> or
                      drag and drop
                    </p>
                    <p className="mt-1 text-body-xs">
                      SVG, PNG, JPG or GIF (max, 800 X 800px)
                    </p>
                  </div>
                </div>

                <div className="flex justify-end gap-3">
                  <button className="flex justify-center rounded-[7px] border border-stroke px-6 py-[7px] font-medium text-dark hover:shadow-1 dark:border-dark-3 dark:text-white">
                    Cancel
                  </button>
                  <button
                    className="flex items-center justify-center rounded-[7px] bg-primary px-6 py-[7px] font-medium text-gray-2 hover:bg-opacity-90"
                    type="submit"
                    disabled
                  >
                    Save
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default SettingBoxes;


================================================
File: src/components/Sidebar/SidebarDropdown.tsx
================================================
import { Link, useLocation } from "react-router-dom";

const SidebarDropdown = ({ item }: any) => {
  const { pathname } = useLocation();

  return (
    <>
      <ul className="my-2 flex flex-col gap-1.5 pl-9">
        {item.map((item: any, index: number) => (
          <li key={index}>
            <Link
              to={item.route}
              className={`relative flex rounded-[7px] px-3.5 py-2 font-medium duration-300 ease-in-out ${
                pathname === item.route
                  ? "bg-primary/[.07] text-primary dark:bg-white/10 dark:text-white"
                  : "text-dark-4 hover:bg-gray-2 hover:text-dark dark:text-gray-5 dark:hover:bg-white/10 dark:hover:text-white"
              }`}
            >
              {item.label}
              {item.pro && (
                <span className="absolute right-3.5 top-1/2 -translate-y-1/2 rounded-md bg-primary px-1.5 py-px text-[10px] font-medium leading-[17px] text-white">
                  Pro
                </span>
              )}
            </Link>
          </li>
        ))}
      </ul>
    </>
  );
};

export default SidebarDropdown;


================================================
File: src/components/Sidebar/SidebarItem.tsx
================================================
import { Link } from "react-router-dom";
import SidebarDropdown from "./SidebarDropdown";

const SidebarItem = ({ item, pageName, setPageName }: any) => {
  const handleClick = () => {
    const updatedPageName =
      pageName !== item.label.toLowerCase() ? item.label.toLowerCase() : "";
    return setPageName(updatedPageName);
  };

  return (
    <>
      <li>
        <Link
          to={item.route}
          onClick={handleClick}
          className={`${
            pageName === item.label.toLowerCase()
              ? "bg-primary/[.07] text-primary dark:bg-white/10 dark:text-white"
              : "text-dark-4 hover:bg-gray-2 hover:text-dark dark:text-gray-5 dark:hover:bg-white/10 dark:hover:text-white"
          } group relative flex items-center gap-3 rounded-[7px] px-3.5 py-3 font-medium duration-300 ease-in-out`}
        >
          {item.icon}
          {item.label}
          {item.message && (
            <span className="absolute right-11.5 top-1/2 -translate-y-1/2 rounded-full bg-red-light-6 px-1.5 py-px text-[10px] font-medium leading-[17px] text-red">
              {item.message}
            </span>
          )}
          {item.pro && (
            <span className="absolute right-3.5 top-1/2 -translate-y-1/2 rounded-md bg-primary px-1.5 py-px text-[10px] font-medium leading-[17px] text-white">
              Pro
            </span>
          )}
          {item.children && (
            <svg
              className={`absolute right-3.5 top-1/2 -translate-y-1/2 fill-current ${
                pageName !== item.label.toLowerCase() && "rotate-180"
              }`}
              width="22"
              height="22"
              viewBox="0 0 22 22"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M10.5525 7.72801C10.81 7.50733 11.1899 7.50733 11.4474 7.72801L17.864 13.228C18.1523 13.4751 18.1857 13.9091 17.9386 14.1974C17.6915 14.4857 17.2575 14.5191 16.9692 14.272L10.9999 9.15549L5.03068 14.272C4.7424 14.5191 4.30838 14.4857 4.06128 14.1974C3.81417 13.9091 3.84756 13.4751 4.13585 13.228L10.5525 7.72801Z"
                fill=""
              />
            </svg>
          )}
        </Link>

        {item.children && (
          <div
            className={`translate transform overflow-hidden ${
              pageName !== item.label.toLowerCase() && "hidden"
            }`}
          >
            <SidebarDropdown item={item.children} />
          </div>
        )}
      </li>
    </>
  );
};

export default SidebarItem;


================================================
File: src/components/Sidebar/index.tsx
================================================
import { FC } from "react";
import { Link } from "react-router-dom";
import useLocalStorage from "../../hooks/useLocalStorage";
import ClickOutside from "../ClickOutside";
import SidebarItem from "./SidebarItem";
import { LuUserPlus } from "react-icons/lu";
import { FaUserDoctor } from "react-icons/fa6";
import { FaWheelchair } from "react-icons/fa";
import { PiPillBold } from "react-icons/pi";
import { FaFileInvoiceDollar } from "react-icons/fa6";
import { MdLogout } from "react-icons/md";
import { LiaPhoneVolumeSolid } from "react-icons/lia";
import { GrDocumentPerformance } from "react-icons/gr";
import { IoSettingsOutline } from "react-icons/io5";
import { LiaSmsSolid } from "react-icons/lia";
import { BsWhatsapp } from "react-icons/bs";
import { GrDocumentUpload } from "react-icons/gr";
import { LuLayoutDashboard } from "react-icons/lu";
import { IoBriefcaseOutline } from "react-icons/io5";
import { PiPlugCharging } from "react-icons/pi";
import useScrollIndicator, {
  ScrollIndicatorButton,
} from "../CommonUI/ScrollIndicator";
import LogoutIcon from "../Assets/Icons/LogoutIcon";

export const menuGroups = [
  {
    name: "MAIN MENU",
    menuItems: [
      // {
      //   icon: <LuLayoutDashboard className="text-2xl" />,
      //   label: "Dashboard",
      //   route: "#",
      //   children: [{ label: "Overview", route: "/" }],
      // },
      {
        icon: <FaUserDoctor className="text-2xl" />,
        label: "Manage Doctors",
        route: "/doctors",
      },
      {
        icon: <FaWheelchair className="text-2xl" />,
        label: "Manage Patients",
        route: "/patients",
      },
      {
        icon: <PiPillBold className="text-2xl" />,
        label: "Manage Pharmacy",
        route: "/pharmacy",
      },
      {
        icon: <FaFileInvoiceDollar className="text-2xl" />,
        label: "Billing",
        route: "/billing",
      },
      {
        icon: <MdLogout className="text-2xl"/>,
        label: "Logout",
        route: "/Logout",
      },
      // {
      //   icon: <LiaPhoneVolumeSolid className="text-2xl" />,
      //   label: "Call Manage",
      //   route: "#",
      //   children: [
      //     { label: "Employees List", route: "/call-manage/employee" },
      //     { label: "Employee report", route: "/call-manage/employees-report" },
      //   ],
      // },
      // {
      //   icon: (
      //     <svg
      //       className="fill-current"
      //       width="24"
      //       height="24"
      //       viewBox="0 0 24 24"
      //       fill="none"
      //       xmlns="http://www.w3.org/2000/svg"
      //     >
      //       <path
      //         d="M17 14C17.5523 14 18 13.5523 18 13C18 12.4477 17.5523 12 17 12C16.4477 12 16 12.4477 16 13C16 13.5523 16.4477 14 17 14Z"
      //         fill=""
      //       />
      //       <path
      //         d="M17 18C17.5523 18 18 17.5523 18 17C18 16.4477 17.5523 16 17 16C16.4477 16 16 16.4477 16 17C16 17.5523 16.4477 18 17 18Z"
      //         fill=""
      //       />
      //       <path
      //         d="M13 13C13 13.5523 12.5523 14 12 14C11.4477 14 11 13.5523 11 13C11 12.4477 11.4477 12 12 12C12.5523 12 13 12.4477 13 13Z"
      //         fill=""
      //       />
      //       <path
      //         d="M13 17C13 17.5523 12.5523 18 12 18C11.4477 18 11 17.5523 11 17C11 16.4477 11.4477 16 12 16C12.5523 16 13 16.4477 13 17Z"
      //         fill=""
      //       />
      //       <path
      //         d="M7 14C7.55229 14 8 13.5523 8 13C8 12.4477 7.55229 12 7 12C6.44772 12 6 12.4477 6 13C6 13.5523 6.44772 14 7 14Z"
      //         fill=""
      //       />
      //       <path
      //         d="M7 18C7.55229 18 8 17.5523 8 17C8 16.4477 7.55229 16 7 16C6.44772 16 6 16.4477 6 17C6 17.5523 6.44772 18 7 18Z"
      //         fill=""
      //       />
      //       <path
      //         fillRule="evenodd"
      //         clipRule="evenodd"
      //         d="M7 1.75C7.41421 1.75 7.75 2.08579 7.75 2.5V3.26272C8.412 3.24999 9.14133 3.24999 9.94346 3.25H14.0564C14.8586 3.24999 15.588 3.24999 16.25 3.26272V2.5C16.25 2.08579 16.5858 1.75 17 1.75C17.4142 1.75 17.75 2.08579 17.75 2.5V3.32709C18.0099 3.34691 18.2561 3.37182 18.489 3.40313C19.6614 3.56076 20.6104 3.89288 21.3588 4.64124C22.1071 5.38961 22.4392 6.33855 22.5969 7.51098C22.75 8.65018 22.75 10.1058 22.75 11.9435V14.0564C22.75 15.8941 22.75 17.3498 22.5969 18.489C22.4392 19.6614 22.1071 20.6104 21.3588 21.3588C20.6104 22.1071 19.6614 22.4392 18.489 22.5969C17.3498 22.75 15.8942 22.75 14.0565 22.75H9.94359C8.10585 22.75 6.65018 22.75 5.51098 22.5969C4.33856 22.4392 3.38961 22.1071 2.64124 21.3588C1.89288 20.6104 1.56076 19.6614 1.40314 18.489C1.24997 17.3498 1.24998 15.8942 1.25 14.0564V11.9436C1.24998 10.1058 1.24997 8.65019 1.40314 7.51098C1.56076 6.33855 1.89288 5.38961 2.64124 4.64124C3.38961 3.89288 4.33856 3.56076 5.51098 3.40313C5.7439 3.37182 5.99006 3.34691 6.25 3.32709V2.5C6.25 2.08579 6.58579 1.75 7 1.75ZM5.71085 4.88976C4.70476 5.02502 4.12511 5.27869 3.7019 5.7019C3.27869 6.12511 3.02502 6.70476 2.88976 7.71085C2.86685 7.88123 2.8477 8.06061 2.83168 8.25H21.1683C21.1523 8.06061 21.1331 7.88124 21.1102 7.71085C20.975 6.70476 20.7213 6.12511 20.2981 5.7019C19.8749 5.27869 19.2952 5.02502 18.2892 4.88976C17.2615 4.75159 15.9068 4.75 14 4.75H10C8.09318 4.75 6.73851 4.75159 5.71085 4.88976ZM2.75 12C2.75 11.146 2.75032 10.4027 2.76309 9.75H21.2369C21.2497 10.4027 21.25 11.146 21.25 12V14C21.25 15.9068 21.2484 17.2615 21.1102 18.2892C20.975 19.2952 20.7213 19.8749 20.2981 20.2981C19.8749 20.7213 19.2952 20.975 18.2892 21.1102C17.2615 21.2484 15.9068 21.25 14 21.25H10C8.09318 21.25 6.73851 21.2484 5.71085 21.1102C4.70476 20.975 4.12511 20.7213 3.7019 20.2981C3.27869 19.8749 3.02502 19.2952 2.88976 18.2892C2.75159 17.2615 2.75 15.9068 2.75 14V12Z"
      //         fill=""
      //       />
      //     </svg>
      //   ),
      //   label: "Calendar",
      //   route: "/calendar",
      // },
      // {
      //   icon: <LiaSmsSolid className="text-2xl" />,
      //   label: "SMS Panel",
      //   route: "#",
      //   children: [
      //     { label: "Compose Message", route: "/sms/compose" },
      //     { label: "SMS Report", route: "/sms/report" },
      //   ],
      // },
      // {
      //   icon: <BsWhatsapp className="text-2xl" />,
      //   label: "WhatsApp Panel",
      //   route: "#",
      //   children: [
      //     { label: "Compose Message", route: "/whatsapp/compose" },
      //     { label: "WhatsApp Report", route: "/whatsapp/report" },
      //   ],
      // },
      // {
      //   icon: <GrDocumentUpload className="text-2xl" />,
      //   label: "Contacts",
      //   route: "/Upload-contacts",
      // },
      // {
      //   icon: <GrDocumentPerformance className="text-2xl" />,
      //   label: "Reports",
      //   route: "#",
      //   children: [
      //     { label: "Manage report", route: "/reports/manage" },
      //     { label: "Call report", route: "/reports/call" },
      //   ],
      // },
    ],
  },
  // {
  //   name: "SETUP",
  //   menuItems: [
  //     {
  //       icon: <PiPlugCharging className="text-2xl" />,
  //       label: "Api",
  //       route: "/api-integeration",
  //     },
  //     {
  //       icon: <IoBriefcaseOutline className="text-2xl" />,
  //       label: "Products & Services",
  //       route: "/products-service",
  //     },
  //     {
  //       icon: <IoSettingsOutline className="text-2xl" />,
  //       label: "Setting",
  //       route: "/settings",
  //     },
  //     // {
  //     //   icon: (
  //     //     <svg
  //     //       className="fill-current"
  //     //       width="24"
  //     //       height="24"
  //     //       viewBox="0 0 24 24"
  //     //       fill="none"
  //     //       xmlns="http://www.w3.org/2000/svg"
  //     //     >
  //     //       <path
  //     //         fillRule="evenodd"
  //     //         clipRule="evenodd"
  //     //         d="M11.9999 1.25C9.37654 1.25 7.24989 3.37665 7.24989 6C7.24989 8.62335 9.37654 10.75 11.9999 10.75C14.6232 10.75 16.7499 8.62335 16.7499 6C16.7499 3.37665 14.6232 1.25 11.9999 1.25ZM8.74989 6C8.74989 4.20507 10.205 2.75 11.9999 2.75C13.7948 2.75 15.2499 4.20507 15.2499 6C15.2499 7.79493 13.7948 9.25 11.9999 9.25C10.205 9.25 8.74989 7.79493 8.74989 6Z"
  //     //         fill=""
  //     //       />
  //     //       <path
  //     //         fillRule="evenodd"
  //     //         clipRule="evenodd"
  //     //         d="M11.9999 12.25C9.68634 12.25 7.55481 12.7759 5.97534 13.6643C4.41937 14.5396 3.24989 15.8661 3.24989 17.5L3.24982 17.602C3.24869 18.7638 3.24728 20.222 4.5263 21.2635C5.15577 21.7761 6.03637 22.1406 7.2261 22.3815C8.41915 22.6229 9.97412 22.75 11.9999 22.75C14.0257 22.75 15.5806 22.6229 16.7737 22.3815C17.9634 22.1406 18.844 21.7761 19.4735 21.2635C20.7525 20.222 20.7511 18.7638 20.75 17.602L20.7499 17.5C20.7499 15.8661 19.5804 14.5396 18.0244 13.6643C16.445 12.7759 14.3134 12.25 11.9999 12.25ZM4.74989 17.5C4.74989 16.6487 5.37127 15.7251 6.71073 14.9717C8.02669 14.2315 9.89516 13.75 11.9999 13.75C14.1046 13.75 15.9731 14.2315 17.289 14.9717C18.6285 15.7251 19.2499 16.6487 19.2499 17.5C19.2499 18.8078 19.2096 19.544 18.5263 20.1004C18.1558 20.4022 17.5364 20.6967 16.4761 20.9113C15.4192 21.1252 13.9741 21.25 11.9999 21.25C10.0257 21.25 8.58063 21.1252 7.52368 20.9113C6.46341 20.6967 5.84401 20.4022 5.47348 20.1004C4.79021 19.544 4.74989 18.8078 4.74989 17.5Z"
  //     //         fill=""
  //     //       />
  //     //     </svg>
  //     //   ),
  //     //   label: "Profile",
  //     //   route: "/profile",
  //     // },
  //   ],
  // },
];
interface SidebarProps {
  sidebarOpen: boolean;
  setSidebarOpen: (open: boolean) => void;
}

const Sidebar: FC<SidebarProps> = ({ sidebarOpen, setSidebarOpen }) => {
  const [pageName, setPageName] = useLocalStorage("selectedMenu", "dashboard");
  const { navRef, isVisible, scrollToBottom } = useScrollIndicator();

  return (
    <ClickOutside onClick={() => setSidebarOpen(false)}>
      <aside
        className={`absolute left-0 top-0 z-9999 flex h-screen w-72.5 flex-col 
          overflow-y-hidden border-r border-stroke bg-white duration-300 ease-linear 
          dark:border-stroke-dark dark:bg-gray-dark lg:static lg:translate-x-0 
          ${sidebarOpen ? "translate-x-0" : "-translate-x-full"}`}
      >
        {/* Sidebar Header */}
        <div className="flex items-center justify-between gap-2 px-6 py-5.5 lg:py-6.5 xl:py-5">
          <Link to="/">
            <img
              src={"/images/logo/crmLogoFull.png"}
              alt="Logo"
              className="dark:hidden"
              style={{ width: "auto", height: "auto", borderRadius: "33px" }}
            />
            <img
              src={"/images/logo/crmLogoFull.png"}
              alt="Logo"
              className="hidden dark:block"
              style={{ width: "auto", height: "auto", borderRadius: "33px" }}
            />
          </Link>

          <button
            onClick={() => setSidebarOpen(!sidebarOpen)}
            className="block lg:hidden"
            aria-label={sidebarOpen ? "Close Sidebar" : "Open Sidebar"}
          >
            <svg
              className="fill-current"
              width="20"
              height="18"
              viewBox="0 0 20 18"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M19 8.175H2.98748L9.36248 1.6875C9.69998 1.35 9.69998 0.825 9.36248 0.4875C9.02498 0.15 8.49998 0.15 8.16248 0.4875L0.399976 8.3625C0.0624756 8.7 0.0624756 9.225 0.399976 9.5625L8.16248 17.4375C8.31248 17.5875 8.53748 17.7 8.76248 17.7C8.98748 17.7 9.17498 17.625 9.36248 17.475C9.69998 17.1375 9.69998 16.6125 9.36248 16.275L3.02498 9.8625H19C19.45 9.8625 19.825 9.4875 19.825 9.0375C19.825 8.55 19.45 8.175 19 8.175Z" />
            </svg>
          </button>
        </div>

        {/* Sidebar Content */}
        <div className="relative flex flex-col overflow-y-hidden">
          <nav
            ref={navRef}
            className="no-scrollbar mt-1 flex-1 overflow-y-auto px-4 lg:px-6"
          >
            {menuGroups.map((group, groupIndex) => (
              <div key={groupIndex}>
                <h3 className="mb-5 text-sm font-medium text-dark-4 dark:text-dark-6">
                  {group.name}
                </h3>

                <ul className="mb-6 flex flex-col gap-2">
                  {group.menuItems.map((menuItem, menuIndex) => (
                    <SidebarItem
                      key={menuIndex}
                      item={menuItem}
                      pageName={pageName}
                      setPageName={setPageName}
                    />
                  ))}
                </ul>
              </div>
            ))}
          </nav>

          {/* Scroll Indicator */}
          {isVisible && (
            <ScrollIndicatorButton onClick={scrollToBottom} className="z-50" />
          )}
        </div>
      </aside>
    </ClickOutside>
  );
};

export default Sidebar;


================================================
File: src/components/StatusStats/StatusStats.tsx
================================================
import { Link } from "react-router-dom";
import { statusStatsType } from "../../types/statusStats";
import { DoubleRightOutlined } from "@ant-design/icons";
import { useNavigate } from "react-router-dom";

interface DataStatsProps {
  dataList: statusStatsType[];
}

const StatusStats: React.FC<DataStatsProps> = ({ dataList }) => {
  const navigate = useNavigate();

  const handleClick = (id: string) => {
    navigate("/leads/all", {
      state: { statusId: id, filterType: "leadStatus" },
    });
  };
  return (
    <>
      <div className="flex w-full gap-4 overflow-auto">
        {dataList.map((item, index) => (
          <div
            key={item.title || "StatusStats" + index}
            onClick={() => handleClick(item.statusId || "")}
          >
            <div className="flex w-full min-w-[268px] items-center gap-4 rounded-[10px] bg-white p-4 shadow-1 dark:bg-gray-dark sm:block sm:gap-0 sm:p-6">
              <div
                className="flex min-h-11 min-w-11 items-center justify-center rounded-full text-2xl text-white sm:max-h-14.5 sm:min-h-14.5 sm:min-w-14.5 sm:max-w-14.5"
                style={{ backgroundColor: item.color }}
              >
                {item.icon}
              </div>

              <div className="mt-0 flex items-end justify-between gap-2 sm:mt-6 sm:gap-0 w-full">
                <div className="w-full">
                  <div className="mb-1.5 flex items-center justify-between text-heading-6 font-bold text-dark dark:text-white">
                    <span className="text-base font-medium">{item.title}</span>
                    <h4 className=" font-medium">
                      {/* <DoubleRightOutlined />{" "} */}:
                    </h4>
                    <h4 className=" font-medium">{item.value}</h4>
                  </div>
                  {/* <span className="text-body-sm  font-medium"> {item.title}</span> */}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </>
  );
};

export default StatusStats;


================================================
File: src/components/TabPanel/TabPanel.tsx
================================================
import { Tabs } from "antd";
const { TabPane } = Tabs;

interface TabComponent {
  tabName: any;
  component: React.ReactNode;
  icon?: React.ReactNode;
}

interface TabsInterface {
  tabsData: TabComponent[];
  type?: "line" | "card" | "editable-card";
  customClassName?: string;
  tabPosition?: "top" | "right" | "bottom" | "left";
  defaultActiveKey?: string;
  onChangeHandler?: any;
  size?: "small" | "middle" | "large";
  centered?: boolean;
}

export default function TabPanel({
  tabsData,
  type = "line",
  defaultActiveKey = "1",
  customClassName = "",
  tabPosition = "top",
  size = "small",
  centered = false,
  onChangeHandler = () => {},
}: TabsInterface) {
  return (
    <>
      <Tabs
        defaultActiveKey={defaultActiveKey}
        className={customClassName}
        size={size}
        type={type}
        tabPosition={tabPosition}
        onChange={onChangeHandler}
        centered={centered}
      >
        {tabsData?.map((item: any, index: number) => (
          <TabPane tab={item.tabName} icon={item.icon} key={index + 1}>
            {item.component}
          </TabPane>
        ))}
      </Tabs>
      <style>{`
        .ant-tabs-tab.ant-tabs-tab-active .ant-tabs-tab-btn {
          color: #5750f1 !important;
        }
        .dark .ant-tabs-tab.ant-tabs-tab-active .ant-tabs-tab-btn {
          color: #3b82f6 !important;
        }
        .ant-tabs .ant-tabs-tab:hover {
          color: #5750f1 !important;
        }
        .dark .ant-tabs .ant-tabs-tab-btn {
          color: #fff;
        }
        .ant-tabs .ant-tabs-tab-btn:focus:not(:focus-visible),
        .ant-tabs .ant-tabs-tab-remove:focus:not(:focus-visible),
        .ant-tabs .ant-tabs-tab-btn:active,
        .ant-tabs .ant-tabs-tab-remove:active {
          color: #5750f1 !important;
        }

        .dark .ant-tabs .ant-tabs-tab-btn:focus:not(:focus-visible),
        .ant-tabs .ant-tabs-tab-remove:focus:not(:focus-visible),
        .ant-tabs .ant-tabs-tab-btn:active,
        .ant-tabs .ant-tabs-tab-remove:active {
          color: #3b82f6 !important;
        }
        .ant-tabs-ink-bar {
          background: #5750f1 !important;
        }
        .dark .ant-tabs-ink-bar {
          background: #3b82f6 !important;
        }
        // .dark .ant-tabs-top > .ant-tabs-nav::before,
        // .ant-tabs-bottom > .ant-tabs-nav::before,
        // .ant-tabs-top > div > .ant-tabs-nav::before,
        // .ant-tabs-bottom > div > .ant-tabs-nav::before {
        //   border-bottom: 1px solid grey;
        // }

        .ant-tabs .ant-tabs-tab-btn{
          display: flex;
          align-items: center;
        }
      `}</style>
    </>
  );
}


================================================
File: src/components/Tables/CustomAntdTable.tsx
================================================
import { Table, Button } from "antd";
import {
  EyeOutlined,
  DeleteOutlined,
  DownloadOutlined,
} from "@ant-design/icons";
import MiniLoader from "../CommonUI/Loader/MiniLoader";

const columnsLocal = [
  {
    title: "Package",
    dataIndex: "package",
    key: "package",
    render: ({ text, record }: any) => (
      <div>
        <div className="text-white dark:text-white">{text}</div>
        <div className="text-gray-400 dark:text-gray-400">${record?.price}</div>
      </div>
    ),
  },
  {
    title: "Invoice date",
    dataIndex: "invoiceDate",
    key: "invoiceDate",
    className: "text-dark dark:text-white",
  },
  {
    title: "Status",
    dataIndex: "status",
    key: "status",
    render: (status: any) => {
      let color = "text-green-500";
      if (status === "Unpaid") color = "text-red-500";
      if (status === "Pending") color = "text-yellow-500";
      return <span className={`${color}`}>{status}</span>;
    },
  },
  {
    title: "Actions",
    key: "actions",
    render: () => (
      <div className="flex space-x-2">
        <Button
          icon={<EyeOutlined />}
          className="text-gray-400 hover:text-white"
        />
        <Button
          icon={<DeleteOutlined />}
          className="text-gray-400 hover:text-white"
        />
        <Button
          icon={<DownloadOutlined />}
          className="text-gray-400 hover:text-white"
        />
      </div>
    ),
  },
];

const dataLocal = [
  {
    key: "1",
    package: "Free package",
    price: 0,
    invoiceDate: "Jan 13,2023",
    status: "Paid",
  },
  {
    key: "2",
    package: "Standard Package",
    price: 59,
    invoiceDate: "Jan 13,2023",
    status: "Paid",
  },
  {
    key: "3",
    package: "Business Package",
    price: 99,
    invoiceDate: "Jan 13,2023",
    status: "Unpaid",
  },
  {
    key: "4",
    package: "Standard Package",
    price: 59,
    invoiceDate: "Jan 13,2023",
    status: "Pending",
  },
];

const CustomAntdTable = ({
  columns,
  dataSource,
  pagination = false,
  isLoading = false,
  rowClassName = () => {},
  onRow,
}: any) => {
  return (
    <div>
      {false ? (
        <MiniLoader />
      ) : (
        <Table
          columns={columns || columnsLocal}
          dataSource={dataSource || dataLocal}
          pagination={pagination}
          loading={isLoading}
          className="w-full bg-white dark:bg-transparent overflow-auto"
          bordered
          rowClassName={rowClassName}
          onRow={onRow}
        />
      )}
      <style>{`
        .dark .ant-table {
          background: transparent !important;
          color: white;
        }
        .dark .ant-table-thead > tr > th {
          background: #374151 !important;
          // background: #1e2837 !important;
          color: white !important;
          border-bottom: 1px solid #2d3748;
        }
        .dark .ant-table-tbody > tr > td {
          border-bottom: 1px solid #2d3748;
        }
        .dark .ant-table-tbody > tr:hover > td {
          background: #2d3748 !important;
        }
        .dark .ant-table {
          background: #0f172a !important;
        }
        .dark .ant-table-thead > tr > th {
          background: #374151 !important;
          // background: #1e2837 !important;
        }
        .dark .ant-table-tbody > tr > td {
          background: #0f172a !important;
        }
        .dark .ant-table-tbody > tr:hover > td {
          background: #1e2837 important;
        }
        .dark
          .ant-table-wrapper
          .ant-table-thead
          > tr
          > th:not(:last-child):not(.ant-table-selection-column):not(
            .ant-table-row-expand-icon-cell
          ):not([colspan])::before,
        .ant-table-wrapper
          .ant-table-thead
          > tr
          > td:not(:last-child):not(.ant-table-selection-column):not(
            .ant-table-row-expand-icon-cell
          ):not([colspan])::before {
          background: transparent;
        }
        .dark .ant-pagination .ant-pagination-total-text {
          color: white;
        }
        .dark
          .ant-pagination
          .ant-pagination-disabled
          .ant-pagination-item-link,
        .ant-pagination
          .ant-pagination-disabled:hover
          .ant-pagination-item-link {
          color: #9ca3af;
        }
        .dark .ant-pagination .ant-pagination-item-active {
          background-color: #374151;
          border-color: grey;
        }
        .dark .ant-pagination .ant-pagination-item-active a {
          color: white;
        }
        .dark
          .ant-select-outlined:not(.ant-select-customize-input)
          .ant-select-selector {
          border: 1px solid grey;
        }


        //NEW ANIMATION DESIGN
         /* Dark mode styles */
        .dark .bg-green-50 {
          background-color: rgba(16, 185, 129, 0.1) !important;
        }
        .dark .bg-red-50 {
          background-color: rgba(239, 68, 68, 0.1) !important;
        }
        .dark .bg-green-50:hover {
          background-color: rgba(16, 185, 129, 0.15) !important;
        }
        .dark .bg-red-50:hover {
          background-color: rgba(239, 68, 68, 0.15) !important;
        }
        
        /* Animation for rows in range */
        @keyframes softPulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.022); }
          100% { transform: scale(1); }
        }
        
        .animate-in-range {
          animation: softPulse 2s ease-in-out infinite;
          transform-origin: center;
        }
        
        /* Animation for new rows */
        @keyframes slideIn {
          from {
            opacity: 0;
            transform: translateY(-10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        /* Ensure text remains visible in dark mode */
        .dark .bg-green-50 td,
        .dark .bg-red-50 td {
          color: inherit !important;
        }
        
        .animate-slide-in {
          animation: slideIn 0.4s ease-out forwards;
        }
        
        /* Optional: Add perspective for better 3D effect */
        .ant-table-tbody {
          perspective: 1000px;
        }
        
        /* Ensure smooth transitions */
        .ant-table-tbody > tr {
          transition: background-color 0.3s ease, transform 0.3s ease;
        }
        
        /* Optional: Add hover lift effect */
        .ant-table-tbody > tr:hover {
          transform: translateY(-1px);
          box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
      `}</style>
    </div>
  );
};

export default CustomAntdTable;


================================================
File: src/components/Tables/DashboardCallReport.tsx
================================================
import { useState, useEffect } from "react";
import { API } from "../../api";

interface CallDetails {
  incoming: number;
  outgoing: number;
  missed: number;
  rejected: number;
  unknown: number;
}

interface EmployeeCallData {
  employeeId: string;
  userId: string;
  user: string;
  email: string;
  phone: string;
  role: string;
  highestCalls: number;
  totalDuration: string;
  averageCallDuration: string;
  callDetails: CallDetails;
}

interface CallReportProps {
  startDate: string;
  endDate: string;
}

const CallReport: React.FC<CallReportProps> = ({ startDate, endDate }) => {
  const [callData, setCallData] = useState<EmployeeCallData[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCallReport = async () => {
      try {
        const response = await API.postAuthAPI(
          {
            startDate,
            endDate,
          },
          "call-report",
          true
        );

        if (response.error) throw new Error(response.error);
        setCallData(response.data.employeeList);
      } catch (error) {
        console.error("Failed to fetch call report:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCallReport();
  }, [startDate, endDate]);

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="rounded-lg bg-white px-4 pb-4 pt-5 shadow-1 dark:bg-gray-dark dark:shadow-card sm:px-7.5 sm:pt-7.5">
      <div className="mb-4 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
        <h4 className="text-xl font-bold text-dark dark:text-white sm:text-body-2xlg">
          Call Report
        </h4>
      </div>

      {/* Mobile View */}
      <div className="block sm:hidden">
        {callData.map((employee, key) => (
          <div
            key={key}
            className={`p-4 ${
              key === callData.length - 1
                ? ""
                : "border-b border-stroke dark:border-dark-3"
            }`}
          >
            <div className="mb-3 flex items-center gap-3">
              <div className="relative flex-shrink-0">
                <div className="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
                  <span className="text-gray-600 text-lg">
                    {employee.user[0]}
                  </span>
                </div>
              </div>
              <div>
                <p className="font-medium text-dark dark:text-white">
                  {employee.user}
                </p>
                <p className="text-sm text-gray-500">{employee.role}</p>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-3">
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">
                  Total Duration
                </span>
                <span className="font-medium text-dark dark:text-white">
                  {employee.totalDuration}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">
                  Average Duration
                </span>
                <span className="font-medium text-dark dark:text-white">
                  {employee.averageCallDuration}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">
                  Incoming
                </span>
                <span className="font-medium text-green">
                  {employee.callDetails.incoming}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">
                  Outgoing
                </span>
                <span className="font-medium text-blue-500">
                  {employee.callDetails.outgoing}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">Missed</span>
                <span className="font-medium text-red">
                  {employee.callDetails.missed}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">
                  Total Calls
                </span>
                <span className="font-medium text-dark dark:text-white">
                  {employee.highestCalls}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Desktop Table View */}
      <div className="hidden sm:block">
        <div className="grid grid-cols-9">
          <div className="col-span-2 px-2 pb-3.5 pl-4">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Employee
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Total Duration
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Avg Duration
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Incoming
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Outgoing
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Missed
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Total Calls
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Role
            </h5>
          </div>
        </div>

        {callData.map((employee, key) => (
          <div
            className={`grid grid-cols-9 ${
              key === callData.length - 1
                ? ""
                : "border-b border-stroke dark:border-dark-3"
            }`}
            key={key}
          >
            <div className="col-span-2 flex items-center gap-3.5 px-2 py-4 pl-4">
              <div className="relative flex-shrink-0">
                <div className="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
                  <span className="text-gray-600 text-lg">
                    {employee.user[0]}
                  </span>
                </div>
              </div>
              <div>
                <p className="font-medium text-dark dark:text-white">
                  {employee.user}
                </p>
                <p className="text-sm text-gray-500 w-[127px] truncate">{employee.email}</p>
              </div>
            </div>

            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-dark dark:text-white">
                {employee.totalDuration}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-dark dark:text-white">
                {employee.averageCallDuration}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-green">
                {employee.callDetails.incoming}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-blue-500">
                {employee.callDetails.outgoing}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-red">
                {employee.callDetails.missed}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-dark dark:text-white">
                {employee.highestCalls}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <div className="rounded-full bg-green/10 px-4 py-1 text-sm font-medium text-green flex">
                <span className="w-max">{employee.role}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default CallReport;


================================================
File: src/components/Tables/EmployeePerformance.tsx
================================================
import { useState } from "react";
import DefaultSelectOption from "../SelectOption/DefaultSelectOption";

interface EmployeeData {
  assignedLeads: number;
  totalRevenue: number;
  agent: string;
  closed: number;
  open: number;
  failed: number;
  conversion: string;
  isOnline: boolean;
  revenue: string;
}

interface EmployeePerformanceProps {
  data: EmployeeData[];
}

const EmployeePerformance: React.FC<EmployeePerformanceProps> = ({ data = [] }) => {
  const getConversionColor = (conversionRate: string): string => {
    const rate = parseFloat(conversionRate);
    if (rate < 30) {
      return "text-red";
    } else if (rate >= 30 && rate < 65) {
      return "text-orange";
    } else {
      return "text-green";
    }
  };  

  return (
    <div className="rounded-lg bg-white px-4 pb-4 pt-5 shadow-1 dark:bg-gray-dark dark:shadow-card sm:px-7.5 sm:pt-7.5">
      {/* Header */}
      <div className="mb-4 flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
        <h4 className="text-xl font-bold text-dark dark:text-white sm:text-body-2xlg">
          Employee Performance
        </h4>
        {/* <div className="flex items-center gap-2.5">
          <p className="text-sm font-medium uppercase text-dark dark:text-dark-6 sm:text-base">
            Short by:
          </p>
          <DefaultSelectOption options={["Monthly", "Yearly"]} />
        </div> */}
      </div>

      {/* Employee Cards - Mobile View */}
      <div className="block sm:hidden">
        {data.map((employee, key) => (
          <div
            key={key}
            className={`p-4 ${
              key === data.length - 1
                ? ""
                : "border-b border-stroke dark:border-dark-3"
            }`}
          >
            {/* Employee Header */}
            <div className="mb-3 flex items-center gap-3">
              <div className="relative flex-shrink-0">
                <div className="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
                  <span className="text-gray-600 text-lg">{employee.agent[0]}</span>
                </div>
                <span
                  className={`absolute bottom-0 right-0 h-3.5 w-3.5 rounded-full border-2 border-white dark:border-dark-2 ${
                    employee.isOnline ? "bg-green" : "bg-red-light"
                  }`}
                ></span>
              </div>
              <p className="font-medium text-dark dark:text-white">
                {employee.agent}
              </p>
            </div>

            {/* Employee Stats Grid */}
            <div className="grid grid-cols-2 gap-3">
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">
                  Assigned leads
                </span>
                <span className="font-medium text-dark dark:text-white">
                  {employee.assignedLeads}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">Closed</span>
                <span className="font-medium text-dark dark:text-white">
                  {employee.closed}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">Open</span>
                <span className="font-medium text-dark dark:text-white">
                  {employee.open}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">Failed</span>
                <span className="font-medium text-dark dark:text-white">
                  {employee.failed}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">Revenue</span>
                <span className="font-medium text-green-light-1">
                  ₹{parseInt(employee.revenue).toLocaleString()}
                </span>
              </div>
              <div className="flex flex-col">
                <span className="text-xs uppercase text-gray-500">
                  Conversion
                </span>
                <span className={`font-medium ${getConversionColor(employee.conversion)}`}>
                  {employee.conversion}
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Desktop Table View */}
      <div className="hidden sm:block">
        <div className="grid grid-cols-8">
          <div className="col-span-2 px-2 pb-3.5 pl-4">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Employee
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Assigned leads
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Closed
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Open
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Failed
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Revenue
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Conversion
            </h5>
          </div>
        </div>

        {data.map((employee, key) => (
          <div
            className={`grid grid-cols-8 ${
              key === data.length - 1
                ? ""
                : "border-b border-stroke dark:border-dark-3"
            }`}
            key={key}
          >
            <div className="col-span-2 flex items-center gap-3.5 px-2 py-4 pl-4">
              <div className="relative flex-shrink-0">
                <div className="h-12 w-12 rounded-full bg-gray-200 flex items-center justify-center">
                  <span className="text-gray-600 text-lg">{employee.agent[0]}</span>
                </div>
                <span
                  className={`absolute bottom-0 right-0 h-3.5 w-3.5 rounded-full border-2 border-white dark:border-dark-2 ${
                    employee.isOnline ? "bg-green" : "bg-red-light"
                  }`}
                ></span>
              </div>
              <p className="font-medium text-dark dark:text-white">
                {employee.agent}
              </p>
            </div>

            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-dark dark:text-white">
                {employee.assignedLeads}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-dark dark:text-white">
                {employee.closed}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-dark dark:text-white">
                {employee.open}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-dark dark:text-white">
                {employee.failed}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-green-light-1">
                ₹{parseInt(employee.revenue).toLocaleString()}
              </p>
            </div>
            <div className="flex items-center justify-center px-2 py-4">
              <p className={`font-medium ${getConversionColor(employee.conversion)}`}>
                {employee.conversion}
              </p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default EmployeePerformance;

================================================
File: src/components/Tables/TableOne.tsx
================================================
import { BRAND } from "../../types/brand";
//
const brandData: BRAND[] = [
  {
    logo: "/images/brand/brand-01.svg",
    name: "Google",
    visitors: 3.5,
    revenues: "5,768",
    sales: 590,
    conversion: 4.8,
  },
  {
    logo: "/images/brand/brand-02.svg",
    name: "X.com",
    visitors: 2.2,
    revenues: "4,635",
    sales: 467,
    conversion: 4.3,
  },
  {
    logo: "/images/brand/brand-03.svg",
    name: "Github",
    visitors: 2.1,
    revenues: "4,290",
    sales: 420,
    conversion: 3.7,
  },
  {
    logo: "/images/brand/brand-04.svg",
    name: "Vimeo",
    visitors: 1.5,
    revenues: "3,580",
    sales: 389,
    conversion: 2.5,
  },
  {
    logo: "/images/brand/brand-05.svg",
    name: "Facebook",
    visitors: 1.2,
    revenues: "2,740",
    sales: 230,
    conversion: 1.9,
  },
];

const TableOne = () => {
  return (
    <div className="rounded-[10px] bg-white px-7.5 pb-4 pt-7.5 shadow-1 dark:bg-gray-dark dark:shadow-card">
      <h4 className="mb-5.5 text-body-2xlg font-bold text-dark dark:text-white">
        Top Channels
      </h4>

      <div className="flex flex-col">
        <div className="grid grid-cols-3 sm:grid-cols-5">
          <div className="px-2 pb-3.5">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Source
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Visitors
            </h5>
          </div>
          <div className="px-2 pb-3.5 text-center">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Revenues
            </h5>
          </div>
          <div className="hidden px-2 pb-3.5 text-center sm:block">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Sales
            </h5>
          </div>
          <div className="hidden px-2 pb-3.5 text-center sm:block">
            <h5 className="text-sm font-medium uppercase xsm:text-base">
              Conversion
            </h5>
          </div>
        </div>

        {brandData.map((brand, key) => (
          <div
            className={`grid grid-cols-3 sm:grid-cols-5 ${
              key === brandData.length - 1
                ? ""
                : "border-b border-stroke dark:border-dark-3"
            }`}
            key={key}
          >
            <div className="flex items-center gap-3.5 px-2 py-4">
              <div className="flex-shrink-0">
                <img src={brand.logo} alt="Brand" width={48} height={48} />
              </div>
              <p className="hidden font-medium text-dark dark:text-white sm:block">
                {brand.name}
              </p>
            </div>

            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-dark dark:text-white">
                {brand.visitors}K
              </p>
            </div>

            <div className="flex items-center justify-center px-2 py-4">
              <p className="font-medium text-green-light-1">
                ${brand.revenues}
              </p>
            </div>

            <div className="hidden items-center justify-center px-2 py-4 sm:flex">
              <p className="font-medium text-dark dark:text-white">
                {brand.sales}
              </p>
            </div>

            <div className="hidden items-center justify-center px-2 py-4 sm:flex">
              <p className="font-medium text-dark dark:text-white">
                {brand.conversion}%
              </p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TableOne;


================================================
File: src/components/Tables/TableThree.tsx
================================================
import { Package } from "../../types/package";

const packageData: Package[] = [
  {
    name: "Free package",
    price: 0.0,
    invoiceDate: `Jan 13,2023`,
    status: "Paid",
  },
  {
    name: "Standard Package",
    price: 59.0,
    invoiceDate: `Jan 13,2023`,
    status: "Paid",
  },
  {
    name: "Business Package",
    price: 99.0,
    invoiceDate: `Jan 13,2023`,
    status: "Unpaid",
  },
  {
    name: "Standard Package",
    price: 59.0,
    invoiceDate: `Jan 13,2023`,
    status: "Pending",
  },
];

const TableThree = () => {
  return (
    <div className="rounded-[10px] border border-stroke bg-white p-4 shadow-1 dark:border-dark-3 dark:bg-gray-dark dark:shadow-card sm:p-7.5">
      <div className="max-w-full overflow-x-auto">
        <table className="w-full table-auto">
          <thead>
            <tr className="bg-[#F7F9FC] text-left dark:bg-dark-2">
              <th className="min-w-[220px] px-4 py-4 font-medium text-dark dark:text-white xl:pl-7.5">
                Package
              </th>
              <th className="min-w-[150px] px-4 py-4 font-medium text-dark dark:text-white">
                Invoice date
              </th>
              <th className="min-w-[120px] px-4 py-4 font-medium text-dark dark:text-white">
                Status
              </th>
              <th className="px-4 py-4 text-right font-medium text-dark dark:text-white xl:pr-7.5">
                Actions
              </th>
            </tr>
          </thead>
          <tbody>
            {packageData.map((packageItem, index) => (
              <tr key={index}>
                <td
                  className={`border-[#eee] px-4 py-4 dark:border-dark-3 xl:pl-7.5 ${index === packageData.length - 1 ? "border-b-0" : "border-b"}`}
                >
                  <h5 className="text-dark dark:text-white">
                    {packageItem.name}
                  </h5>
                  <p className="mt-[3px] text-body-sm font-medium">
                    ${packageItem.price}
                  </p>
                </td>
                <td
                  className={`border-[#eee] px-4 py-4 dark:border-dark-3 ${index === packageData.length - 1 ? "border-b-0" : "border-b"}`}
                >
                  <p className="text-dark dark:text-white">
                    {packageItem.invoiceDate}
                  </p>
                </td>
                <td
                  className={`border-[#eee] px-4 py-4 dark:border-dark-3 ${index === packageData.length - 1 ? "border-b-0" : "border-b"}`}
                >
                  <p
                    className={`inline-flex rounded-full px-3.5 py-1 text-body-sm font-medium ${
                      packageItem.status === "Paid"
                        ? "bg-[#219653]/[0.08] text-[#219653]"
                        : packageItem.status === "Unpaid"
                          ? "bg-[#D34053]/[0.08] text-[#D34053]"
                          : "bg-[#FFA70B]/[0.08] text-[#FFA70B]"
                    }`}
                  >
                    {packageItem.status}
                  </p>
                </td>
                <td
                  className={`border-[#eee] px-4 py-4 dark:border-dark-3 xl:pr-7.5 ${index === packageData.length - 1 ? "border-b-0" : "border-b"}`}
                >
                  <div className="flex items-center justify-end space-x-3.5">
                    <button className="hover:text-primary">
                      <svg
                        className="fill-current"
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M9.99935 6.87492C8.27346 6.87492 6.87435 8.27403 6.87435 9.99992C6.87435 11.7258 8.27346 13.1249 9.99935 13.1249C11.7252 13.1249 13.1243 11.7258 13.1243 9.99992C13.1243 8.27403 11.7252 6.87492 9.99935 6.87492ZM8.12435 9.99992C8.12435 8.96438 8.96382 8.12492 9.99935 8.12492C11.0349 8.12492 11.8743 8.96438 11.8743 9.99992C11.8743 11.0355 11.0349 11.8749 9.99935 11.8749C8.96382 11.8749 8.12435 11.0355 8.12435 9.99992Z"
                          fill=""
                        />
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M9.99935 2.70825C6.23757 2.70825 3.70376 4.96175 2.23315 6.8723L2.20663 6.90675C1.87405 7.3387 1.56773 7.73652 1.35992 8.20692C1.13739 8.71064 1.04102 9.25966 1.04102 9.99992C1.04102 10.7402 1.13739 11.2892 1.35992 11.7929C1.56773 12.2633 1.87405 12.6611 2.20664 13.0931L2.23316 13.1275C3.70376 15.0381 6.23757 17.2916 9.99935 17.2916C13.7611 17.2916 16.2949 15.0381 17.7655 13.1275L17.792 13.0931C18.1246 12.6612 18.431 12.2633 18.6388 11.7929C18.8613 11.2892 18.9577 10.7402 18.9577 9.99992C18.9577 9.25966 18.8613 8.71064 18.6388 8.20692C18.431 7.73651 18.1246 7.33868 17.792 6.90673L17.7655 6.8723C16.2949 4.96175 13.7611 2.70825 9.99935 2.70825ZM3.2237 7.63475C4.58155 5.87068 6.79132 3.95825 9.99935 3.95825C13.2074 3.95825 15.4172 5.87068 16.775 7.63475C17.1405 8.10958 17.3546 8.3933 17.4954 8.71204C17.627 9.00993 17.7077 9.37403 17.7077 9.99992C17.7077 10.6258 17.627 10.9899 17.4954 11.2878C17.3546 11.6065 17.1405 11.8903 16.775 12.3651C15.4172 14.1292 13.2074 16.0416 9.99935 16.0416C6.79132 16.0416 4.58155 14.1292 3.2237 12.3651C2.85821 11.8903 2.64413 11.6065 2.50332 11.2878C2.37171 10.9899 2.29102 10.6258 2.29102 9.99992C2.29102 9.37403 2.37171 9.00993 2.50332 8.71204C2.64413 8.3933 2.85821 8.10958 3.2237 7.63475Z"
                          fill=""
                        />
                      </svg>
                    </button>
                    <button className="hover:text-primary">
                      <svg
                        className="fill-current"
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          clipRule="evenodd"
                          d="M8.59048 1.87502H11.4084C11.5887 1.8749 11.7458 1.8748 11.8941 1.89849C12.4802 1.99208 12.9874 2.35762 13.2615 2.88403C13.3309 3.01727 13.3805 3.16634 13.4374 3.33745L13.5304 3.61654C13.5461 3.66378 13.5506 3.67715 13.5545 3.68768C13.7004 4.09111 14.0787 4.36383 14.5076 4.3747C14.5189 4.37498 14.5327 4.37503 14.5828 4.37503H17.0828C17.4279 4.37503 17.7078 4.65485 17.7078 5.00003C17.7078 5.34521 17.4279 5.62503 17.0828 5.62503H2.91602C2.57084 5.62503 2.29102 5.34521 2.29102 5.00003C2.29102 4.65485 2.57084 4.37503 2.91602 4.37503H5.41609C5.46612 4.37503 5.47993 4.37498 5.49121 4.3747C5.92009 4.36383 6.29844 4.09113 6.44437 3.6877C6.44821 3.67709 6.45262 3.66401 6.46844 3.61654L6.56145 3.33747C6.61836 3.16637 6.66795 3.01728 6.73734 2.88403C7.01146 2.35762 7.51862 1.99208 8.1047 1.89849C8.25305 1.8748 8.41016 1.8749 8.59048 1.87502ZM7.50614 4.37503C7.54907 4.29085 7.5871 4.20337 7.61983 4.1129C7.62977 4.08543 7.63951 4.05619 7.65203 4.01861L7.7352 3.7691C7.81118 3.54118 7.82867 3.49469 7.84602 3.46137C7.9374 3.2859 8.10645 3.16405 8.30181 3.13285C8.33892 3.12693 8.38854 3.12503 8.6288 3.12503H11.37C11.6103 3.12503 11.6599 3.12693 11.697 3.13285C11.8924 3.16405 12.0614 3.2859 12.1528 3.46137C12.1702 3.49469 12.1877 3.54117 12.2636 3.7691L12.3468 4.01846L12.379 4.11292C12.4117 4.20338 12.4498 4.29085 12.4927 4.37503H7.50614Z"
                          fill=""
                        />
                        <path
                          d="M4.92859 7.04179C4.90563 6.69738 4.60781 6.43679 4.2634 6.45975C3.91899 6.48271 3.6584 6.78053 3.68136 7.12494L4.06757 12.9181C4.13881 13.987 4.19636 14.8505 4.33134 15.528C4.47167 16.2324 4.71036 16.8208 5.20335 17.2821C5.69635 17.7433 6.2993 17.9423 7.01151 18.0355C7.69653 18.1251 8.56189 18.125 9.63318 18.125H10.3656C11.4369 18.125 12.3023 18.1251 12.9873 18.0355C13.6995 17.9423 14.3025 17.7433 14.7955 17.2821C15.2885 16.8208 15.5272 16.2324 15.6675 15.528C15.8025 14.8505 15.86 13.987 15.9313 12.9181L16.3175 7.12494C16.3404 6.78053 16.0798 6.48271 15.7354 6.45975C15.391 6.43679 15.0932 6.69738 15.0702 7.04179L14.687 12.7911C14.6121 13.9143 14.5587 14.6958 14.4416 15.2838C14.328 15.8542 14.1693 16.1561 13.9415 16.3692C13.7137 16.5824 13.4019 16.7206 12.8252 16.796C12.2307 16.8738 11.4474 16.875 10.3217 16.875H9.67718C8.55148 16.875 7.76814 16.8738 7.17364 16.796C6.59697 16.7206 6.28518 16.5824 6.05733 16.3692C5.82949 16.1561 5.67088 15.8542 5.55725 15.2838C5.44011 14.6958 5.38675 13.9143 5.31187 12.7911L4.92859 7.04179Z"
                          fill=""
                        />
                        <path
                          d="M7.8539 8.5448C8.19737 8.51045 8.50364 8.76104 8.53799 9.10451L8.95466 13.2712C8.989 13.6146 8.73841 13.9209 8.39495 13.9553C8.05148 13.9896 7.74521 13.739 7.71086 13.3956L7.29419 9.22889C7.25985 8.88542 7.51044 8.57915 7.8539 8.5448Z"
                          fill=""
                        />
                        <path
                          d="M12.1449 8.5448C12.4884 8.57915 12.739 8.88542 12.7047 9.22889L12.288 13.3956C12.2536 13.739 11.9474 13.9896 11.6039 13.9553C11.2604 13.9209 11.0098 13.6146 11.0442 13.2712L11.4609 9.10451C11.4952 8.76104 11.8015 8.51045 12.1449 8.5448Z"
                          fill=""
                        />
                      </svg>
                    </button>
                    <button className="hover:text-primary">
                      <svg
                        className="fill-current"
                        width="20"
                        height="20"
                        viewBox="0 0 20 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M10.4613 13.7551C10.3429 13.8846 10.1755 13.9583 10 13.9583C9.82453 13.9583 9.65714 13.8846 9.53873 13.7551L6.2054 10.1092C5.97248 9.85448 5.99019 9.45915 6.24494 9.22623C6.49969 8.99332 6.89502 9.01102 7.12794 9.26577L9.375 11.7235V2.5C9.375 2.15482 9.65482 1.875 10 1.875C10.3452 1.875 10.625 2.15482 10.625 2.5V11.7235L12.8721 9.26577C13.105 9.01102 13.5003 8.99332 13.7551 9.22623C14.0098 9.45915 14.0275 9.85448 13.7946 10.1092L10.4613 13.7551Z"
                          fill=""
                        />
                        <path
                          d="M3.125 12.5C3.125 12.1548 2.84518 11.875 2.5 11.875C2.15482 11.875 1.875 12.1548 1.875 12.5V12.5457C1.87498 13.6854 1.87497 14.604 1.9721 15.3265C2.07295 16.0765 2.2887 16.7081 2.79029 17.2097C3.29189 17.7113 3.92345 17.927 4.67354 18.0279C5.39602 18.125 6.31462 18.125 7.45428 18.125H12.5457C13.6854 18.125 14.604 18.125 15.3265 18.0279C16.0766 17.927 16.7081 17.7113 17.2097 17.2097C17.7113 16.7081 17.9271 16.0765 18.0279 15.3265C18.125 14.604 18.125 13.6854 18.125 12.5457V12.5C18.125 12.1548 17.8452 11.875 17.5 11.875C17.1548 11.875 16.875 12.1548 16.875 12.5C16.875 13.6962 16.8737 14.5304 16.789 15.1599C16.7068 15.7714 16.5565 16.0952 16.3258 16.3258C16.0952 16.5565 15.7714 16.7068 15.1599 16.789C14.5304 16.8737 13.6962 16.875 12.5 16.875H7.5C6.30382 16.875 5.46956 16.8737 4.8401 16.789C4.22862 16.7068 3.90481 16.5565 3.67418 16.3258C3.44354 16.0952 3.29317 15.7714 3.21096 15.1599C3.12633 14.5304 3.125 13.6962 3.125 12.5Z"
                          fill=""
                        />
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default TableThree;


================================================
File: src/components/Tables/TableTwo.tsx
================================================
import { Product } from "../../types/product";

const productData: Product[] = [
  {
    image: "/images/product/product-01.png",
    name: "Apple Watch Series 7",
    category: "Electronics",
    price: 296,
    sold: 22,
    profit: 45,
  },
  {
    image: "/images/product/product-02.png",
    name: "Macbook Pro M1",
    category: "Electronics",
    price: 546,
    sold: 12,
    profit: 125,
  },
  {
    image: "/images/product/product-03.png",
    name: "Dell Inspiron 15",
    category: "Electronics",
    price: 443,
    sold: 64,
    profit: 247,
  },
  {
    image: "/images/product/product-04.png",
    name: "HP Probook 450",
    category: "Electronics",
    price: 499,
    sold: 72,
    profit: 103,
  },
];

const TableTwo = () => {
  return (
    <div className="rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
      <div className="px-4 py-6 md:px-6 xl:px-9">
        <h4 className="text-body-2xlg font-bold text-dark dark:text-white">
          Top Products
        </h4>
      </div>

      <div className="grid grid-cols-6 border-t border-stroke px-4 py-4.5 dark:border-dark-3 sm:grid-cols-8 md:px-6 2xl:px-7.5">
        <div className="col-span-3 flex items-center">
          <p className="font-medium">Product Name</p>
        </div>
        <div className="col-span-2 hidden items-center sm:flex">
          <p className="font-medium">Category</p>
        </div>
        <div className="col-span-1 flex items-center">
          <p className="font-medium">Price</p>
        </div>
        <div className="col-span-1 flex items-center">
          <p className="font-medium">Sold</p>
        </div>
        <div className="col-span-1 flex items-center">
          <p className="font-medium">Profit</p>
        </div>
      </div>

      {productData.map((product, key) => (
        <div
          className="grid grid-cols-6 border-t border-stroke px-4 py-4.5 dark:border-dark-3 sm:grid-cols-8 md:px-6 2xl:px-7.5"
          key={key}
        >
          <div className="col-span-3 flex items-center">
            <div className="flex flex-col gap-4 sm:flex-row sm:items-center">
              <div className="h-12.5 w-15 rounded-md">
                <img
                  src={product.image}
                  width={60}
                  height={50}
                  alt="Product"
                />
              </div>
              <p className="text-body-sm font-medium text-dark dark:text-dark-6">
                {product.name}
              </p>
            </div>
          </div>
          <div className="col-span-2 hidden items-center sm:flex">
            <p className="text-body-sm font-medium text-dark dark:text-dark-6">
              {product.category}
            </p>
          </div>
          <div className="col-span-1 flex items-center">
            <p className="text-body-sm font-medium text-dark dark:text-dark-6">
              ${product.price}
            </p>
          </div>
          <div className="col-span-1 flex items-center">
            <p className="text-body-sm font-medium text-dark dark:text-dark-6">
              {product.sold}
            </p>
          </div>
          <div className="col-span-1 flex items-center">
            <p className="text-body-sm font-medium text-green">
              ${product.profit}
            </p>
          </div>
        </div>
      ))}
    </div>
  );
};

export default TableTwo;


================================================
File: src/components/TargetStats/TargetStats.tsx
================================================
import { targetStatsType } from "../../types/targetStats";
import { PiCurrencyInrBold } from "react-icons/pi";
import { Progress } from "antd";

interface DataStatsProps {
  dataList: targetStatsType[];
}
const TargetStats: React.FC<DataStatsProps> = ({ dataList }) => {
  return (
    <>
      <div className="flex w-full gap-4 overflow-auto">
        {dataList.map((item, index) => {
          let percentage = 0;
          if (item.salesValue && item.targetSalesValue)
            percentage = (item.salesValue / item.targetSalesValue) * 100;
          percentage = Number(percentage.toFixed(2));

          return (
            <div
              key={index}
              className="flex w-full flex-col gap-1 min-w-[284px] overflow-auto rounded-[10px] bg-white p-4 py-2 sm:p-6 shadow-1 dark:bg-gray-dark"
            >
              <div className="flex w-full items-center gap-2 ">
                <div
                  className="flex h-[20px] w-[22px] items-center justify-center rounded-full text-sm text-white"
                  style={{ backgroundColor: item.color }}
                >
                  {item.icon}
                </div>
                <h4 className="text-heading-6 font-bold font-medium text-dark dark:text-white">
                  {item.title}
                </h4>
              </div>

              <div
                className={`flex items-center ${item.positiveSentiment ? "text-green" : "text-red"}`}
              >
                {/* <PiCurrencyInrBold />{" "} */}
                <span>{`${item.value} ( ${item.salesValue} )`} </span>
              </div>

              {item.positiveSentiment ? (
                <Progress
                  percent={percentage}
                  showInfo={true}
                  status="active"
                  strokeColor={
                    percentage < 45
                      ? {
                          "0%": "#1201bd",
                          "25%": "#ff1f00",
                        }
                      : {
                          "0%": "#108ee9",
                          "100%": "#87d068",
                        }
                  }
                  className="!text-white"
                />
              ) : (
                <Progress
                  percent={percentage}
                  showInfo={true}
                  status="active"
                  strokeColor={
                    percentage > 45
                      ? {
                          "0%": "#1201bd",
                          "100%": "#ff1f00",
                        }
                      : {
                          "0%": "#108ee9",
                          "25%": "#87d068",
                        }
                  }
                  className="!text-white"
                />
              )}
            </div>
          );
        })}
      </div>
      <style>{`
      .dark .ant-progress .ant-progress-text{
      color: white !important;
      }
      `}</style>
    </>
  );
};

export default TargetStats;


================================================
File: src/components/Utils/PrivateRoute.tsx
================================================
import { Navigate, useLocation } from "react-router-dom";
import { isTokenValid } from "../../utils/TokenVerify";

export const PrivateRoute = ({ children }: { children: React.ReactNode }) => {
  //   const { isAuthenticated } = useSelector((state: RootState) => state.auth);
  const token = localStorage.getItem('accessToken');
  const location = useLocation();
  const validtoken = isTokenValid(token);
  
  if (!token || !validtoken) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
};


================================================
File: src/components/Utils/TableColumnSelector.tsx
================================================
import { useState, useEffect } from "react";
import { SettingOutlined } from "@ant-design/icons";
import ButtonDefault from "../Buttons/ButtonDefault";

const ColumnSelector = ({
  allColumns,
  selectedColumns,
  onColumnChange,
  disabled = false,
}: any) => {
  const [isOpen, setIsOpen] = useState(false);

  // List of columns that cannot be disabled
  const requiredColumns = ["checkbox", "action"];

  const handleColumnToggle = (columnKey: any) => {
    if (requiredColumns.includes(columnKey)) return;

    const newSelectedColumns = selectedColumns.includes(columnKey)
      ? selectedColumns.filter((key: any) => key !== columnKey)
      : [...selectedColumns, columnKey];

    onColumnChange(newSelectedColumns);
  };

  return (
    <div className="relative inline-block">
      <ButtonDefault
        icon={<SettingOutlined />}
        disabled={disabled}
        label="Customize Columns"
        variant="outline"
        customClasses="w-max"
        onClick={() => setIsOpen(!isOpen)}
      />
      {isOpen && (
        <div className="absolute right-0 z-50 mt-2 w-64 rounded-md bg-white py-2 shadow-lg ring-1 ring-black ring-opacity-5 dark:bg-gray-800">
          <div className="max-h-96 overflow-y-auto">
            {allColumns.map(
              (column: any) =>
                column.key !== "checkbox" && (
                  <label
                    key={column.key}
                    className={`flex cursor-pointer items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 
                  ${requiredColumns.includes(column.key) ? "opacity-50" : ""}`}
                  >
                    <input
                      type="checkbox"
                      checked={selectedColumns.includes(column.key)}
                      onChange={() => handleColumnToggle(column.key)}
                      disabled={requiredColumns.includes(column.key)}
                      className="mr-3 h-4 w-4 rounded border-gray-300"
                    />
                    <span className="text-sm text-gray-700 dark:text-gray-200">
                      {column.title?.props?.children || column.title}
                    </span>
                  </label>
                )
            )}
          </div>
        </div>
      )}

      {/* Backdrop to close the dropdown when clicking outside */}
      {isOpen && (
        <div
          className="fixed inset-0 z-40 h-full w-full"
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
};

export default ColumnSelector;


================================================
File: src/css/linePattern.css
================================================
/* From Uiverse.io by jeremyssocial */ 
.linePattern_Container {
    /* Basic dimensions and centering */
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  
    /* Dark mode colors and gradient */
    background: #121212; /* Fallback for browsers that don't support gradients */
    background: linear-gradient(
      135deg,
      #121212 25%,
      #1a1a1a 25%,
      #1a1a1a 50%,
      #121212 50%,
      #121212 75%,
      #1a1a1a 75%,
      #1a1a1a
    );
    background-size: 40px 40px;
  
    /* Animation */
    animation: move 1s linear infinite;
  }
  
  @keyframes move {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 40px 40px;
    }
  }
  

================================================
File: src/css/satoshi.css
================================================
/**
 * @license
 *
 * Font Family: Satoshi
 * Designed by: Deni Anggara
 * URL: https://www.fontshare.com/fonts/satoshi
 * © 2023 Indian Type Foundry
 *
 * Font Styles:
 * Satoshi Light
 * Satoshi Light Italic
 * Satoshi Regular
 * Satoshi Italic
 * Satoshi Medium
 * Satoshi Medium Italic
 * Satoshi Bold
 * Satoshi Bold Italic
 * Satoshi Black
 * Satoshi Black Italic
 *
*/

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-Light.woff2") format("woff2"),
    url("../fonts/Satoshi-Light.woff") format("woff"),
    url("../fonts/Satoshi-Light.ttf") format("truetype");
    font-weight: 300;
    font-display: swap;
    font-style: normal;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-LightItalic.woff2") format("woff2"),
    url("../fonts/Satoshi-LightItalic.woff") format("woff"),
    url("../fonts/Satoshi-LightItalic.ttf") format("truetype");
    font-weight: 300;
    font-display: swap;
    font-style: italic;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-Regular.woff2") format("woff2"),
    url("../fonts/Satoshi-Regular.woff") format("woff"),
    url("../fonts/Satoshi-Regular.ttf") format("truetype");
    font-weight: 400;
    font-display: swap;
    font-style: normal;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-Italic.woff2") format("woff2"),
    url("../fonts/Satoshi-Italic.woff") format("woff"),
    url("../fonts/Satoshi-Italic.ttf") format("truetype");
    font-weight: 400;
    font-display: swap;
    font-style: italic;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-Medium.woff2") format("woff2"),
    url("../fonts/Satoshi-Medium.woff") format("woff"),
    url("../fonts/Satoshi-Medium.ttf") format("truetype");
    font-weight: 500;
    font-display: swap;
    font-style: normal;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-MediumItalic.woff2") format("woff2"),
    url("../fonts/Satoshi-MediumItalic.woff") format("woff"),
    url("../fonts/Satoshi-MediumItalic.ttf") format("truetype");
    font-weight: 500;
    font-display: swap;
    font-style: italic;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-Bold.woff2") format("woff2"),
    url("../fonts/Satoshi-Bold.woff") format("woff"),
    url("../fonts/Satoshi-Bold.ttf") format("truetype");
    font-weight: 700;
    font-display: swap;
    font-style: normal;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-BoldItalic.woff2") format("woff2"),
    url("../fonts/Satoshi-BoldItalic.woff") format("woff"),
    url("../fonts/Satoshi-BoldItalic.ttf") format("truetype");
    font-weight: 700;
    font-display: swap;
    font-style: italic;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-Black.woff2") format("woff2"),
    url("../fonts/Satoshi-Black.woff") format("woff"),
    url("../fonts/Satoshi-Black.ttf") format("truetype");
    font-weight: 900;
    font-display: swap;
    font-style: normal;
}

@font-face {
    font-family: "Satoshi";
    src: url("../fonts/Satoshi-BlackItalic.woff2") format("woff2"),
    url("../fonts/Satoshi-BlackItalic.woff") format("woff"),
    url("../fonts/Satoshi-BlackItalic.ttf") format("truetype");
    font-weight: 900;
    font-display: swap;
    font-style: italic;
}


================================================
File: src/css/style.css
================================================
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
    body {
        @apply relative z-1 bg-gray-2 font-satoshi text-base font-normal text-dark-5 dark:bg-[#020D1A] dark:text-dark-6;
    }
}

@layer components {
}

@layer utilities {
    /* Chrome, Safari and Opera */
    .no-scrollbar::-webkit-scrollbar {
        display: none;
    }

    .no-scrollbar {
        -ms-overflow-style: none; /* IE and Edge */
        scrollbar-width: none; /* Firefox */
    }

    .chat-height {
        @apply h-[calc(100vh_-_8.125rem)] lg:h-[calc(100vh_-_5.625rem)];
    }

    .inbox-height {
        @apply h-[calc(100vh_-_8.125rem)] lg:h-[calc(100vh_-_5.625rem)];
    }
}

/* third-party libraries CSS */

.tableCheckbox:checked ~ div span {
    @apply opacity-100;
}

.tableCheckbox:checked ~ div {
    @apply border-primary bg-primary;
}

.apexcharts-legend-text {
    @apply !text-dark-5 dark:!text-dark-6;
}

.apexcharts-text {
    @apply !fill-dark-5 dark:!fill-dark-6;
}

.apexcharts-yaxis-label {
    @apply text-xs;
}

.apexcharts-xaxis-label {
    @apply text-body-sm font-medium;
}

.apexcharts-xcrosshairs {
    @apply !fill-stroke dark:!fill-dark-3;
}

.apexcharts-gridline {
    @apply !stroke-stroke dark:!stroke-dark-3;
}

.apexcharts-series.apexcharts-pie-series path {
    @apply dark:!stroke-transparent;
}

.apexcharts-legend-series {
    @apply !inline-flex gap-1.5;
}

.apexcharts-tooltip.apexcharts-theme-light {
    @apply !rounded-[7px] !text-base !font-medium !text-dark !shadow-card-2 dark:!border-dark-3 dark:!bg-gray-dark dark:!text-white;
}

.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {
    @apply dark:!border-dark-3 dark:!bg-dark-2;
}

.apexcharts-xaxistooltip,
.apexcharts-yaxistooltip {
    @apply dark:!border-dark-2 dark:!bg-dark-2 dark:!text-dark-3;
}

.apexcharts-xaxistooltip-bottom:after {
    @apply !border-b-gray dark:!border-b-dark;
}

.apexcharts-xaxistooltip-bottom:before {
    @apply !border-b-gray dark:!border-b-dark;
}

.apexcharts-xaxistooltip-bottom {
    @apply !rounded !border-none !bg-gray !text-sm !font-medium !text-dark dark:!bg-dark dark:!text-white;
}

.apexcharts-tooltip-series-group {
    @apply !pb-px !pl-2.5 !pr-3.5;
}

.apexcharts-tooltip-series-group .apexcharts-tooltip-text {
    @apply !text-base !font-medium;
}

.apexcharts-datalabels-group .apexcharts-datalabel-label {
    @apply !fill-dark-5 dark:!fill-dark-6;
}

.apexcharts-datalabels-group .apexcharts-datalabel-value {
    @apply !fill-dark dark:!fill-white;
}

.flatpickr-wrapper {
    @apply w-full;
}

.flatpickr-months .flatpickr-prev-month:hover svg,
.flatpickr-months .flatpickr-next-month:hover svg {
    @apply !fill-primary;
}

.flatpickr-calendar.arrowTop:before {
    @apply dark:!border-b-gray-dark;
}

.flatpickr-calendar.arrowTop:after {
    @apply dark:!border-b-gray-dark;
}

.flatpickr-calendar {
    @apply !p-6 !shadow-1 dark:!bg-gray-dark dark:!text-dark-6 dark:!shadow-card 2xsm:!w-auto;
}

.flatpickr-day {
    @apply dark:!text-dark-6 dark:hover:!border-dark-2 dark:hover:!bg-dark-2;
}

.flatpickr-months .flatpickr-prev-month,
.flatpickr-months .flatpickr-next-month {
    @apply !top-7 dark:!fill-white dark:!text-white;
}

.flatpickr-months .flatpickr-prev-month.flatpickr-prev-month,
.flatpickr-months .flatpickr-next-month.flatpickr-prev-month {
    @apply !left-7;
}

.flatpickr-months .flatpickr-prev-month.flatpickr-next-month,
.flatpickr-months .flatpickr-next-month.flatpickr-next-month {
    @apply !right-7;
}

span.flatpickr-weekday,
.flatpickr-months .flatpickr-month {
    @apply dark:!fill-white dark:!text-white;
}

.flatpickr-day.inRange {
    box-shadow: -5px 0 0 #f3f4f6, 5px 0 0 #f3f4f6 !important;
    @apply dark:!shadow-datepicker;
}

.flatpickr-day.inRange,
.flatpickr-day.prevMonthDay.inRange,
.flatpickr-day.nextMonthDay.inRange,
.flatpickr-day.today.inRange,
.flatpickr-day.prevMonthDay.today.inRange,
.flatpickr-day.nextMonthDay.today.inRange,
.flatpickr-day:hover,
.flatpickr-day.prevMonthDay:hover,
.flatpickr-day.nextMonthDay:hover,
.flatpickr-day:focus,
.flatpickr-day.prevMonthDay:focus,
.flatpickr-day.nextMonthDay:focus {
    @apply !border-gray-2 !bg-gray-2 dark:!border-dark-2 dark:!bg-dark-2;
}

.flatpickr-day.selected,
.flatpickr-day.startRange,
.flatpickr-day.selected,
.flatpickr-day.endRange {
    @apply dark:!text-white;
}

.flatpickr-day.today {
    @apply !border-none hover:!bg-gray-2 hover:!text-dark dark:hover:!bg-dark-2 dark:hover:!text-white;
}

.flatpickr-day.selected,
.flatpickr-day.startRange,
.flatpickr-day.endRange,
.flatpickr-day.selected.inRange,
.flatpickr-day.startRange.inRange,
.flatpickr-day.endRange.inRange,
.flatpickr-day.selected:focus,
.flatpickr-day.startRange:focus,
.flatpickr-day.endRange:focus,
.flatpickr-day.selected:hover,
.flatpickr-day.startRange:hover,
.flatpickr-day.endRange:hover,
.flatpickr-day.selected.prevMonthDay,
.flatpickr-day.startRange.prevMonthDay,
.flatpickr-day.endRange.prevMonthDay,
.flatpickr-day.selected.nextMonthDay,
.flatpickr-day.startRange.nextMonthDay,
.flatpickr-day.endRange.nextMonthDay {
    background: #3c50e0;
    @apply !border-primary !bg-primary hover:!border-primary hover:!bg-primary;
}

.flatpickr-day.selected.startRange + .endRange:not(:nth-child(7n + 1)),
.flatpickr-day.startRange.startRange + .endRange:not(:nth-child(7n + 1)),
.flatpickr-day.endRange.startRange + .endRange:not(:nth-child(7n + 1)) {
    box-shadow: -10px 0 0 #3c50e0;
}

.map-btn .jvm-zoom-btn {
    @apply flex h-7.5 w-7.5 items-center justify-center rounded border border-stroke bg-white px-0 pb-0.5 pt-0 text-2xl leading-none text-dark-5 hover:border-primary hover:bg-primary hover:text-white dark:border-dark-3 dark:bg-dark-2 dark:text-dark-6 dark:hover:border-primary dark:hover:bg-primary dark:hover:text-white;
}

.mapOne .jvm-zoom-btn {
    @apply !bottom-0 !left-auto !top-auto;
}

.mapOne .jvm-zoom-btn.jvm-zoomin {
    @apply !right-10;
}

.mapOne .jvm-zoom-btn.jvm-zoomout {
    @apply !right-0;
}

.mapTwo .jvm-zoom-btn {
    @apply !bottom-0 !top-auto;
}

.mapTwo .jvm-zoom-btn.jvm-zoomin {
    @apply !left-0;
}

.mapTwo .jvm-zoom-btn.jvm-zoomout {
    @apply !left-10;
}

.taskCheckbox:checked ~ .box span {
    @apply opacity-100;
}

.taskCheckbox:checked ~ p {
    @apply line-through;
}

.taskCheckbox:checked ~ .box {
    @apply border-primary bg-primary dark:border-primary;
}

.custom-input-date::-webkit-calendar-picker-indicator {
    background: transparent;
}

.data-stats-slider-outer .swiper-button-next:after,
.data-stats-slider-outer .swiper-button-prev:after,
.carouselOne .swiper-button-next:after,
.carouselOne .swiper-button-prev:after,
.carouselThree .swiper-button-next:after,
.carouselThree .swiper-button-prev:after {
    @apply hidden;
}

.data-stats-slider-outer .swiper-button-next svg,
.data-stats-slider-outer .swiper-button-prev svg,
.carouselOne .swiper-button-next svg,
.carouselOne .swiper-button-prev svg,
.carouselThree .swiper-button-next svg,
.carouselThree .swiper-button-prev svg {
    @apply size-auto;
}

.carouselOne .swiper-button-next,
.carouselOne .swiper-button-prev,
.carouselThree .swiper-button-next,
.carouselThree .swiper-button-prev {
    @apply w-10 h-10 sm:h-12.5 sm:w-12.5 rounded-full bg-white !text-dark-5 shadow-card-2 dark:bg-dark-2 dark:!text-dark-6;
}

.carouselOne .swiper-button-prev,
.carouselThree .swiper-button-prev {
    @apply sm:!left-10;
}

.carouselOne .swiper-button-next,
.carouselThree .swiper-button-next {
    @apply sm:!right-10;
}

.carouselTwo .swiper-pagination-bullet,
.carouselThree .swiper-pagination-bullet {
    @apply h-[5px] w-7.5 rounded-none bg-white/50;
}

.carouselTwo .swiper-pagination-bullet-active,
.carouselThree .swiper-pagination-bullet-active {
    @apply bg-white;
}

.carouselTwo .swiper-pagination,
.carouselThree .swiper-pagination {
    @apply xl:!bottom-8;
}

.data-stats-slider-outer .swiper-button-next,
.data-stats-slider-outer .swiper-button-prev {
    @apply top-1/2 h-11.5 w-11.5 rounded-full border border-stroke bg-white !text-dark drop-shadow-card dark:border-dark-3 dark:bg-dark-2 dark:!text-white;
}

.data-stats-slider-outer .swiper-button-next.swiper-button-disabled,
.data-stats-slider-outer .swiper-button-prev.swiper-button-disabled {
    @apply hidden;
}

.data-stats-slider-outer .swiper-button-prev {
    @apply -left-[23px];
}

.data-stats-slider-outer .swiper-button-next {
    @apply -right-[23px];
}

.data-table-common .datatable-search {
    @apply relative !ml-0 w-100 overflow-hidden rounded;
}

.data-table-one .datatable-search input {
    @apply h-[46px] w-full rounded border border-stroke bg-transparent px-5 outline-none focus:border-primary dark:border-dark-3 dark:bg-dark-2 dark:focus:border-primary;
}

.data-table-common .datatable-selector {
    @apply relative z-20 inline-flex bg-transparent p-0 font-medium text-dark-5 outline-none dark:text-dark-6;
}

.data-table-common .datatable-top {
    @apply flex flex-col gap-4 border-b border-stroke px-7.5 py-4.5 after:hidden dark:border-dark-6 sm:flex-row-reverse sm:items-center sm:justify-between sm:gap-x-4 sm:gap-y-0;
}

.data-table-common .datatable-dropdown label {
    @apply inline-flex items-center gap-2.5 font-medium capitalize text-dark dark:text-white;
}

.datatable-table .datatable-sorter {
    @apply before:hidden after:hidden;
}

.datatable-table > thead > tr:first-child > th {
    @apply border-transparent px-2.5 pb-2.5 pt-9 font-medium;
}

.data-table-common .datatable-table > tbody > tr > td:first-child,
.data-table-common .datatable-table > thead > tr > th:first-child {
    @apply pl-8;
}

.data-table-common .datatable-table > tbody > tr > td:last-child,
.data-table-common .datatable-table > thead > tr > th:last-child {
    @apply pr-8;
}

.data-table-common .datatable-table > thead > tr:last-child > th {
    @apply !border-b border-stroke pb-6 dark:border-dark-3;
}

.data-table-common .datatable-table > thead > tr:last-child > th input {
    @apply h-[34px] w-full rounded border border-stroke bg-transparent px-3 text-sm outline-none focus:border-primary dark:border-dark-3 dark:bg-dark-2 dark:focus:border-primary;
}

.data-table-common .datatable-table > tbody > tr {
    @apply hover:bg-primary hover:bg-opacity-5;
}

.data-table-one .datatable-table > tbody > tr > td:first-child {
    @apply text-primary dark:text-white;
}

.data-table-common .datatable-table > tbody > tr > td {
    @apply border-b border-stroke py-5 font-medium dark:border-dark-3;
}

.data-table-one .datatable-bottom {
    @apply flex flex-col gap-4 px-8 py-7 after:hidden sm:flex-row-reverse sm:items-center sm:justify-between sm:gap-0 sm:space-x-4;
}

.data-table-common .datatable-wrapper.no-footer .datatable-container {
    @apply border-none;
}

.data-table-common .datatable-info {
    @apply !m-0 font-medium;
}

.data-table-common .datatable-pagination {
    @apply !m-0;
}

.data-table-common .datatable-pagination a {
    @apply flex h-8 w-8 cursor-pointer items-center justify-center rounded p-0 font-medium text-dark-5 hover:bg-primary hover:text-white dark:text-dark-6;
}

.data-table-common .datatable-pagination .datatable-active a {
    @apply bg-primary text-white;
}

.data-table-common .datatable-pagination li.datatable-hidden {
    @apply !visible;
}

.data-table-two .datatable-bottom {
    @apply flex flex-col gap-4 px-8 py-7 after:hidden sm:flex-row sm:items-center sm:justify-between sm:gap-0 sm:space-x-4;
}

.data-table-two .datatable-search input {
    @apply h-11.5 w-full rounded border border-stroke bg-gray-2 px-5 outline-none focus:border-primary dark:border-dark-3 dark:bg-dark-2 dark:focus:border-primary;
}

.rangeSliderCommon .noUi-target {
    @apply border-none bg-transparent shadow-none;
}

.rangeSliderCommon .noUi-connects {
    @apply h-1.5 rounded-full bg-stroke dark:bg-dark-3;
}

.rangeSliderCommon .noUi-connect {
    @apply h-1.5 rounded-full bg-primary;
}

.rangeSliderOne .noUi-horizontal .noUi-handle {
    @apply -top-2 h-5.5 w-5.5 rounded-full border-none bg-primary shadow-none;
}

.rangeSliderTwo .noUi-horizontal .noUi-handle {
    @apply -top-2 h-6 w-6 rounded-full border-[6px] border-primary bg-white shadow-none dark:bg-dark;
}

.noUi-horizontal .noUi-handle:after,
.noUi-horizontal .noUi-handle:before {
    @apply hidden;
}

input[type="search"]::-webkit-search-cancel-button {
    @apply appearance-none;
}

.custom-input-date::-webkit-calendar-picker-indicator {
    background-position: center;
    background-repeat: no-repeat;
    background-size: 20px;
}

.custom-gradient-1 {
    background-image: linear-gradient(145deg, #EEF 0%, #FFF8FC 100%);;
}


================================================
File: src/hooks/useColorMode.tsx
================================================
import { useEffect } from "react";
import useLocalStorage from "./useLocalStorage";

const useColorMode = () => {
  const [colorMode, setColorMode] = useLocalStorage("color-theme", "light");

  useEffect(() => {
    const className = "dark";
    const bodyClass = window.document.documentElement.classList;

    colorMode === "dark"
      ? bodyClass.add(className)
      : bodyClass.remove(className);
  }, [colorMode]);

  return [colorMode, setColorMode];
};

export default useColorMode;


================================================
File: src/hooks/useGetLocation.ts
================================================
import { useEffect, useState } from "react";
interface Location {
  latitude: number;
  longitude: number;
}

// interface GeolocationError {
//   message: string;
// }

const useGetLocation = ({
  getLocationToggle,
  setGetLocationToggle,
}: {
  getLocationToggle: boolean;
  setGetLocationToggle: any;
}) => {
  const [location, setLocation] = useState<Location | null>(null);
  const [error, setError] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);

  const getLocation = () => {
    setLoading(true);
    setError("");

    // Check if geolocation is supported by the browser
    if (!navigator.geolocation) {
      setError("Geolocation is not supported by your browser");
      setLoading(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      // Success callback
      (position) => {
        setLocation({
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
        });
        setLoading(false);
      },
      // Error callback
      (error: GeolocationPositionError) => {
        setError(error.message);
        setLoading(false);
      },
      // Options
      {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0,
      },
    );
    setGetLocationToggle(false);
  };

  useEffect(() => {
    if (!getLocationToggle) {
      setLocation(null);
      setError("");
      return;
    }
    getLocation();
  }, [getLocationToggle]);

  return { error, location, loading };
};

export default useGetLocation;


================================================
File: src/hooks/useLocalStorage.tsx
================================================
"use client";
import { useEffect, useState } from "react";

type SetValue<T> = T | ((val: T) => T);

function useLocalStorage<T>(
  key: string,
  initialValue: T,
): [T, (value: SetValue<T>) => void] {
  // State to store our value
  // Pass  initial state function to useState so logic is only executed once
  const [storedValue, setStoredValue] = useState(() => {
    try {
      // Get from local storage by key
      if (typeof window !== "undefined") {
        // browser code
        const item = window.localStorage.getItem(key);
        // Parse stored json or if none return initialValue
        return item ? JSON.parse(item) : initialValue;
      }
    } catch (error) {
      // If error also return initialValue
      console.log(error);
      return initialValue;
    }
  });

  // useEffect to update local storage when the state changes
  useEffect(() => {
    try {
      // Allow value to be a function so we have same API as useState
      const valueToStore =
        typeof storedValue === "function"
          ? storedValue(storedValue)
          : storedValue;
      // Save state
      if (typeof window !== "undefined") {
        // browser code
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      // A more advanced implementation would handle the error case
      console.log(error);
    }
  }, [key, storedValue]);

  return [storedValue, setStoredValue];
}

export default useLocalStorage;


================================================
File: src/hooks/useScreenHook.tsx
================================================
import { DeviceType } from "../types/deviceType";
import { useState, useEffect } from "react";

// Define the breakpoints for mobile and tablet
const MOBILE_BREAKPOINT = 545; // Common breakpoint for mobile screens
const TABLET_BREAKPOINT = 1024; // Common breakpoint for tablet screens

const useScreenHook = () => {
  // State to hold the screen width
  const [screenWidth, setScreenWidth] = useState<number>(window.innerWidth);
  // State to hold the device type
  const [deviceType, setDeviceType] = useState<DeviceType>("desktop");

  useEffect(() => {
    // Function to update the screen width and device type
    const updateScreenSize = () => {
      setScreenWidth(window.innerWidth);
      if (window.innerWidth < MOBILE_BREAKPOINT) {
        setDeviceType("mobile");
      } else if (window.innerWidth < TABLET_BREAKPOINT) {
        setDeviceType("tablet");
      } else {
        setDeviceType("desktop");
      }
    };

    // Initial update
    updateScreenSize();

    // Update on window resize
    window.addEventListener("resize", updateScreenSize);

    // Cleanup event listener on component unmount
    return () => window.removeEventListener("resize", updateScreenSize);
  }, []); // Empty dependency array means this effect runs once on mount and cleanup on unmount

  return { screenWidth, deviceType };
};

export default useScreenHook;


================================================
File: src/js/us-aea-en.js
================================================
jsVectorMap.addMap('us_aea_en', { "insets": [{ "width": 220, "top": 440, "height": 146.9158157558812, "bbox": [{ "y": -8441281.712315228, "x": -5263934.893342895 }, { "y": -6227992.545028123, "x": -1949631.2950683108 }], "left": 0 }, { "width": 80, "top": 460, "height": 129.05725678001465, "bbox": [{ "y": -4207380.690946597, "x": -5958501.652314129 }, { "y": -3658201.4570359783, "x": -5618076.48127754 }], "left": 245 }, { "width": 900.0, "top": 0, "height": 550.2150229714246, "bbox": [{ "y": -5490839.2352678, "x": -2029243.6460439637 }, { "y": -2690044.485299302, "x": 2552083.9617675776 }], "left": 0 }], "paths": { "US-VA": { "path": "M682.42,290.04l1.61,-0.93l1.65,-0.48l1.12,-0.95l3.57,-1.69l0.74,-2.33l0.82,-0.19l2.32,-1.54l0.05,-1.81l2.04,-1.86l-0.13,-1.58l0.26,-0.42l5.0,-4.09l4.76,-6.0l0.09,0.63l0.96,0.54l0.33,1.37l1.32,0.74l0.71,0.81l1.46,0.09l0.79,0.65l1.3,0.48l1.41,-0.09l0.79,-0.41l0.76,-1.22l1.17,-0.57l0.53,-1.38l2.72,1.49l1.42,-1.1l2.25,-0.99l0.76,0.06l1.08,-0.97l0.33,-0.82l-0.48,-0.96l0.23,-0.42l1.9,0.58l3.26,-2.62l0.3,-0.1l0.51,0.73l0.66,-0.07l2.38,-2.34l0.17,-0.85l-0.49,-0.51l0.99,-1.12l0.1,-0.6l-0.28,-0.51l-1.0,-0.46l0.71,-3.03l2.6,-4.8l0.55,-2.15l-0.01,-1.91l1.61,-2.55l-0.22,-0.94l0.24,-0.84l0.5,-0.48l0.39,-1.7l-0.0,-3.18l1.23,0.19l1.18,1.73l3.8,0.43l0.59,-0.28l1.05,-2.52l0.2,-2.36l0.71,-1.05l-0.04,-1.61l0.76,-2.31l1.78,0.75l0.65,-0.17l1.3,-3.3l0.57,0.05l0.59,-0.39l0.52,-1.2l0.81,-0.68l0.44,-1.8l1.38,-2.43l-0.35,-2.57l0.54,-1.76l-0.3,-2.01l9.18,4.58l0.59,-0.29l0.63,-4.0l2.6,-0.07l0.63,0.57l1.05,0.23l-0.5,1.74l0.6,0.88l1.61,0.85l2.52,-0.04l1.03,1.18l1.64,0.12l1.94,1.52l0.57,2.53l-0.94,0.78l-0.45,0.02l-0.3,0.43l0.13,0.71l-0.61,-0.05l-0.49,0.59l-0.37,2.5l0.07,2.29l-0.43,0.25l0.01,0.6l1.05,0.77l-0.36,0.14l-0.17,0.6l0.44,0.3l1.64,-0.08l1.38,-0.61l1.77,-1.61l0.39,0.58l-0.58,0.35l0.02,0.58l1.9,1.07l0.64,1.08l1.69,0.35l1.37,-0.11l0.95,0.49l0.82,-0.65l1.05,-0.08l0.33,0.56l1.26,0.63l-0.1,0.55l0.36,0.55l0.94,-0.23l0.41,0.56l3.96,0.88l0.25,1.12l-0.85,-0.41l-0.57,0.44l0.89,1.74l-0.35,0.57l0.62,0.78l-0.44,0.89l0.24,0.59l-1.36,-0.36l-0.59,-0.72l-0.67,0.18l-0.1,0.43l-2.44,-2.3l-0.56,0.05l-0.38,-0.56l-0.52,0.32l-1.36,-1.51l-1.23,-0.43l-2.86,-2.72l-1.34,-0.12l-1.11,-0.81l-1.17,0.05l-0.39,0.52l0.47,0.71l1.1,-0.01l0.63,0.68l1.33,0.07l0.6,0.43l0.62,1.4l1.46,1.11l1.13,0.34l1.53,1.8l2.55,0.94l1.4,1.89l2.14,-0.02l0.56,0.41l0.72,0.06l-0.61,0.7l0.3,0.49l2.03,0.34l0.26,0.72l0.55,0.1l0.13,1.67l-1.0,-0.75l-0.39,0.21l-1.13,-1.0l-0.58,0.29l0.1,0.82l-0.31,0.68l0.7,0.7l-0.18,0.6l1.12,0.32l-0.86,0.44l-2.12,-0.73l-1.39,-1.38l-0.83,-0.32l-2.23,-1.87l-0.58,0.11l-0.22,0.53l0.26,0.81l0.64,0.21l3.81,3.15l2.69,1.12l1.28,-0.33l0.45,1.07l1.27,0.26l-0.44,0.67l0.3,0.56l0.93,-0.19l0.0,1.24l-0.92,0.41l-0.57,0.73l-0.71,-0.93l-3.2,-1.58l-0.29,-1.16l-0.59,-0.59l-0.87,-0.11l-1.2,0.67l-1.71,-0.44l-0.36,-1.15l-0.71,-0.05l-0.05,1.32l-0.33,0.41l-1.43,-1.32l-0.51,0.09l-0.48,0.57l-0.65,-0.4l-0.99,0.45l-2.23,-0.1l-0.37,0.94l0.34,0.46l1.9,0.22l1.4,-0.31l0.85,0.24l0.56,-0.69l0.63,0.88l1.34,0.43l1.95,-0.31l1.5,0.71l0.67,-0.63l0.94,2.47l3.16,1.23l0.37,0.91l-0.57,1.03l0.56,0.44l1.72,-1.32l0.88,-0.02l0.83,0.65l0.8,-0.26l-0.61,-0.9l-0.2,-1.17l3.78,0.08l1.13,-0.44l1.89,3.23l-0.46,0.71l0.65,3.09l-1.19,-0.58l-0.02,0.88l-30.95,7.83l-37.19,8.41l-19.52,3.35l-7.08,0.85l-0.46,-0.26l-4.24,0.64l-0.82,0.62l-28.2,5.01ZM781.15,223.32l0.14,0.09l-0.06,0.07l-0.01,-0.03l-0.07,-0.12ZM808.05,244.59l0.53,-1.14l-0.26,-0.54l-0.36,-0.08l0.58,-0.98l-0.39,-0.71l-0.03,-0.49l0.44,-0.35l-0.17,-0.73l0.62,-0.3l0.23,-0.6l0.14,-2.33l1.01,-0.39l-0.12,-0.9l0.48,-0.14l-0.26,-1.53l-0.79,-0.4l0.87,-0.57l0.1,-1.03l2.69,-1.11l0.36,2.48l-1.08,4.2l-0.22,2.38l0.33,1.09l-0.34,0.97l-0.6,-0.79l-0.81,0.15l-0.39,0.95l0.27,0.37l-0.65,0.46l-0.3,0.85l0.17,1.05l-0.31,1.46l0.38,2.47l-0.6,0.6l0.07,1.33l-1.37,-1.9l0.23,-0.94l-0.33,-1.57l0.28,-0.97l-0.38,-0.3Z", "name": "Virginia" }, "US-PA": { "path": "M716.46,159.99l0.63,-0.19l4.3,-3.73l1.13,5.2l0.48,0.31l34.84,-7.93l34.28,-8.64l1.42,0.58l0.71,1.39l0.64,0.13l0.77,-0.33l1.24,0.59l0.14,0.85l0.81,0.41l-0.16,0.58l0.89,2.69l1.9,2.07l2.12,0.75l2.21,-0.2l0.72,0.79l-0.89,0.87l-0.73,1.49l-0.17,2.25l-1.41,3.35l-1.37,1.58l0.04,0.79l1.79,1.72l-0.31,1.65l-0.84,0.43l-0.22,0.66l0.14,1.48l1.04,2.87l0.52,0.25l1.2,-0.18l1.18,2.39l0.95,0.58l0.66,-0.26l0.6,0.9l4.23,2.75l0.12,0.41l-1.29,0.93l-3.71,4.22l-0.23,0.76l0.17,0.9l-1.36,1.13l-0.84,0.15l-1.33,1.08l-0.33,0.66l-1.72,-0.12l-2.03,0.84l-1.15,1.37l-0.41,1.39l-37.23,9.21l-39.1,8.66l-10.03,-48.21l1.92,-1.22l3.08,-3.04Z", "name": "Pennsylvania" }, "US-TN": { "path": "M571.72,341.09l0.86,-0.84l0.29,-1.37l1.0,0.04l0.65,-0.79l-0.99,-4.89l1.41,-1.93l0.06,-1.32l1.18,-0.46l0.36,-0.48l-0.63,-1.31l0.53,-0.65l0.05,-0.56l-0.89,-1.33l2.55,-1.57l1.09,-1.13l-0.14,-0.84l-0.85,-0.53l0.14,-0.19l0.34,-0.16l0.85,0.37l0.46,-0.33l-0.27,-1.31l-0.85,-0.9l0.06,-0.71l0.51,-1.43l1.0,-1.11l-1.35,-2.06l1.37,-0.21l0.61,-0.55l-0.13,-0.64l-1.17,-0.82l0.82,-0.15l0.58,-0.54l0.13,-0.69l-0.59,-1.38l0.02,-0.36l0.37,0.53l0.47,0.08l0.58,-0.29l0.6,-0.86l23.67,-2.81l0.35,-0.41l-0.1,-1.35l-0.84,-2.39l2.98,-0.08l0.82,0.58l22.79,-3.55l7.64,-0.46l7.5,-0.86l8.82,-1.42l24.01,-3.1l1.11,-0.6l29.3,-5.2l0.73,-0.6l3.56,-0.54l-0.4,1.44l0.43,0.85l-0.4,2.0l0.36,0.82l-1.15,-0.03l-1.71,1.79l-1.21,3.89l-0.55,0.7l-0.56,0.08l-0.63,-0.74l-1.44,-0.02l-2.66,1.73l-1.42,2.73l-0.96,0.89l-0.34,-0.34l-0.13,-1.05l-0.73,-0.54l-0.53,0.15l-2.3,1.81l-0.29,1.32l-0.93,-0.24l-0.9,0.48l-0.16,0.77l0.32,0.73l-0.85,2.18l-1.29,0.06l-1.75,1.14l-1.28,1.24l-0.61,1.06l-0.78,0.27l-2.28,2.46l-4.04,0.78l-2.58,1.7l-0.49,1.09l-0.88,0.55l-0.55,0.81l-0.18,2.88l-0.35,0.6l-1.65,0.52l-0.89,-0.16l-1.06,1.14l0.21,5.24l-20.21,3.32l-21.62,3.04l-25.56,2.95l-0.34,0.31l-7.39,0.9l-28.73,3.17Z", "name": "Tennessee" }, "US-ID": { "path": "M132.38,121.39l-0.34,-0.44l0.08,-1.99l0.53,-1.74l1.42,-1.22l2.11,-3.59l1.68,-0.92l1.39,-1.53l1.08,-2.15l0.05,-1.22l2.21,-2.41l1.43,-2.7l0.37,-1.37l2.04,-2.26l1.89,-2.81l0.03,-1.01l-0.79,-2.95l-2.13,-1.94l-0.87,-0.36l-0.85,-1.61l-0.41,-3.02l-0.59,-1.19l0.94,-1.19l-0.12,-2.35l-1.04,-2.69l0.46,-0.98l9.67,-54.45l13.39,2.35l-3.54,20.72l1.29,2.89l1.0,1.27l0.27,1.55l1.17,1.76l-0.12,0.83l0.39,1.14l-0.99,0.95l0.83,1.76l-0.83,0.11l-0.28,0.71l1.93,1.68l1.03,2.04l2.24,1.22l0.54,1.58l1.09,1.33l1.49,2.79l0.08,0.68l1.64,1.81l0.01,1.88l1.79,1.71l-0.07,1.35l0.74,0.19l0.9,-0.58l0.36,0.46l-0.36,0.55l0.07,0.54l1.11,0.96l1.61,0.15l1.81,-0.36l-0.63,2.61l-0.99,0.54l0.25,1.14l-1.83,3.73l0.06,1.72l-0.81,0.07l-0.37,0.54l0.6,1.33l-0.62,0.9l-0.03,1.16l0.97,0.93l-0.37,0.81l0.28,1.01l-1.57,0.43l-1.21,1.41l0.1,1.11l0.46,0.77l-0.13,0.74l-0.83,0.77l-0.2,1.52l1.48,0.63l1.38,1.79l0.78,0.27l1.08,-0.35l0.56,-0.8l1.85,-0.41l1.21,-1.28l0.81,-0.29l0.15,-0.76l0.78,0.81l0.23,0.71l1.06,0.64l-0.42,1.23l0.73,0.95l-0.34,1.38l0.57,1.34l-0.21,1.61l1.54,2.64l0.31,1.73l0.82,0.37l0.67,2.08l-0.18,0.98l-0.76,0.64l0.51,1.9l1.24,1.16l0.3,0.79l0.81,0.08l0.86,-0.37l1.04,0.93l1.06,2.79l-0.5,0.81l0.89,1.83l-0.28,0.6l0.11,0.98l2.29,2.41l0.97,-0.14l-0.01,-1.14l1.07,-0.89l0.93,-0.22l4.53,1.62l0.69,-0.32l0.67,-1.35l1.19,-0.39l2.25,0.93l3.3,-0.1l0.96,0.88l2.29,-0.58l3.23,0.78l0.45,-0.49l-0.67,-0.76l0.26,-1.06l0.74,-0.48l-0.07,-0.96l1.23,-0.51l0.48,0.37l1.07,2.11l0.12,1.11l1.36,1.95l0.73,0.45l-6.27,53.86l-47.48,-6.32l-46.97,-7.73l6.88,-39.17l1.12,-1.18l1.07,-2.67l-0.21,-1.75l0.74,-0.15l0.77,-1.62l-0.9,-1.27l-0.18,-1.2l-1.24,-0.08l-0.64,-0.81l-0.88,0.29Z", "name": "Idaho" }, "US-NV": { "path": "M139.36,329.2l-12.7,-16.93l-36.59,-51.1l-25.35,-34.52l13.7,-64.19l46.89,9.24l46.99,7.74l-18.72,125.83l-0.9,1.16l-0.99,2.19l-0.44,0.17l-1.34,-0.22l-0.98,-2.24l-0.7,-0.63l-1.41,0.22l-1.95,-1.02l-1.6,0.23l-1.78,0.96l-0.76,2.48l0.88,2.59l-0.6,0.97l-0.24,1.31l0.38,3.12l-0.76,2.54l0.77,3.71l-0.13,3.07l-0.3,1.07l-1.04,0.31l-0.12,0.51l0.32,0.8l-0.52,0.62Z", "name": "Nevada" }, "US-TX": { "path": "M276.16,412.59l33.07,1.99l32.79,1.35l0.41,-0.39l3.6,-98.71l25.86,0.61l26.29,0.22l0.05,42.09l0.44,0.4l1.02,-0.13l0.78,0.28l3.74,3.82l1.66,0.21l0.88,-0.58l2.49,0.64l0.6,-0.68l0.11,-1.05l0.6,0.76l0.92,0.22l0.38,0.93l0.77,0.78l-0.01,1.64l0.52,0.83l2.85,0.42l1.25,-0.2l1.38,0.89l2.78,0.69l1.82,-0.56l0.63,0.1l1.89,1.8l1.4,-0.11l1.25,-1.43l2.43,0.26l1.67,-0.46l0.1,2.28l0.91,0.67l1.62,0.4l-0.04,2.09l1.56,0.79l1.82,-0.66l1.57,-1.68l1.02,-0.65l0.41,0.19l0.45,1.64l2.01,0.2l0.24,1.05l0.72,0.48l1.47,-0.21l0.88,-0.93l0.39,0.33l0.59,-0.08l0.61,-0.99l0.26,0.41l-0.45,1.23l0.14,0.76l0.67,1.14l0.78,0.42l0.57,-0.04l0.6,-0.5l0.68,-2.36l0.91,-0.65l0.35,-1.54l0.57,-0.14l0.4,0.14l0.29,0.99l0.57,0.64l1.21,0.02l0.83,0.5l1.26,-0.2l0.68,-1.34l0.48,0.15l-0.13,0.7l0.49,0.69l1.21,0.45l0.49,0.72l1.52,-0.05l1.49,1.74l0.52,0.02l0.63,-0.62l0.08,-0.71l1.49,-0.1l0.93,-1.43l1.88,-0.41l1.66,-1.13l1.52,0.83l1.51,-0.22l0.29,-0.83l2.29,-0.73l0.53,-0.55l0.5,0.32l0.38,0.88l1.82,0.42l1.69,-0.06l1.86,-1.14l0.41,-1.05l1.06,0.31l2.24,1.56l1.16,0.17l1.79,2.08l2.14,0.41l1.04,0.92l0.76,-0.11l2.48,0.85l1.04,0.04l0.37,0.79l1.38,0.97l1.45,-0.12l0.39,-0.72l0.8,0.36l0.88,-0.4l0.92,0.35l0.76,-0.15l0.64,0.36l2.23,34.03l1.51,1.67l1.3,0.82l1.25,1.87l0.57,1.63l-0.1,2.64l1.0,1.21l0.85,0.4l-0.12,0.85l0.75,0.54l0.28,0.87l0.65,0.7l-0.19,1.17l1.0,1.02l0.59,1.63l0.5,0.34l0.55,-0.1l-0.16,1.71l0.81,1.22l-0.64,0.25l-0.35,0.68l0.77,1.27l-0.55,0.89l0.19,1.39l-0.75,2.69l-0.74,0.85l-0.36,1.54l-0.79,1.13l0.64,2.0l-0.83,2.28l0.17,1.07l0.83,1.2l-0.19,1.01l0.49,1.6l-0.24,1.41l-1.13,1.67l-1.02,0.2l-1.76,3.37l-0.04,1.06l1.79,2.37l-3.43,0.08l-7.37,3.78l-0.02,-0.43l-2.19,-0.46l-3.24,1.07l1.09,-3.51l-0.3,-1.21l-0.8,-0.76l-0.62,-0.07l-1.52,0.85l-0.99,2.0l-1.56,-0.96l-1.64,0.12l-0.07,0.63l0.89,0.62l0.0,1.06l0.56,0.39l-0.47,0.69l0.07,1.02l1.63,0.64l-0.62,0.71l0.49,0.97l0.91,0.23l0.28,0.37l-0.4,1.25l-0.45,-0.12l-0.97,0.81l-1.72,2.25l-1.18,-0.4l-0.49,0.12l0.32,1.0l0.08,2.55l-1.85,1.49l-1.91,2.11l-0.96,0.37l-4.1,2.9l-3.3,0.45l-2.54,1.06l-0.2,1.12l-0.75,-0.34l-2.04,0.89l-0.33,-0.34l-1.11,0.18l0.43,-0.87l-0.52,-0.6l-1.43,0.22l-1.22,1.08l-0.6,-0.62l-0.11,-1.2l-1.38,-0.81l-0.5,0.44l0.65,1.44l0.01,1.12l-0.71,0.09l-0.54,-0.44l-0.75,-0.0l-0.55,-1.34l-1.46,-0.37l-0.58,0.39l0.04,0.54l0.94,1.7l0.03,1.24l0.58,0.37l0.36,-0.16l1.13,0.78l-0.75,0.37l-0.27,0.54l0.15,0.36l0.7,0.23l1.08,-0.54l0.96,0.6l-4.27,2.42l-0.57,-0.13l-0.37,-1.44l-0.5,-0.18l-1.13,-1.46l-0.49,-0.03l-0.48,0.51l0.1,0.63l-0.62,0.34l-0.05,0.51l1.18,1.61l-0.31,1.04l0.33,0.85l-1.66,1.79l-0.37,0.2l0.37,-0.64l-0.18,-0.72l0.25,-0.73l-0.46,-0.67l-0.52,0.17l-0.71,1.1l0.26,0.72l-0.39,0.95l-0.07,-1.13l-0.52,-0.55l-1.95,1.29l-0.78,-0.33l-0.7,0.52l0.07,0.75l-0.81,0.99l0.02,0.49l1.25,0.64l0.03,0.56l0.78,0.28l0.7,-1.41l0.86,-0.41l0.01,0.62l-2.82,4.36l-1.23,-1.0l-1.36,0.38l-0.32,-0.34l-2.4,0.39l-0.46,-0.31l-0.65,0.16l-0.18,0.58l0.41,0.61l0.55,0.38l1.53,0.03l-0.01,0.91l0.55,0.64l2.07,1.03l-2.7,7.63l-0.2,0.1l-0.38,-0.54l-0.34,0.1l0.18,-0.76l-0.57,-0.43l-2.35,1.95l-1.72,-2.36l-1.19,-0.91l-0.61,0.4l0.09,0.52l1.44,2.0l-0.11,0.82l-0.93,-0.09l-0.33,0.63l0.51,0.56l1.88,0.07l2.14,0.72l2.08,-0.72l-0.43,1.75l0.24,0.77l-0.98,0.7l0.37,1.59l-1.12,0.14l-0.43,0.41l0.4,2.11l-0.33,1.6l0.45,0.64l0.84,0.24l0.87,2.86l0.71,2.81l-0.91,0.82l0.62,0.49l-0.08,1.28l0.72,0.3l0.18,0.61l0.58,0.29l0.4,1.79l0.68,0.31l0.45,3.22l1.46,0.62l-0.52,1.1l0.31,1.07l-0.63,0.77l-0.84,-0.05l-0.53,0.44l0.08,1.31l-0.49,-0.33l-0.49,0.25l-0.39,-0.67l-1.49,-0.45l-2.92,-2.53l-2.2,-0.18l-0.81,-0.51l-4.2,0.09l-0.9,0.42l-0.78,-0.63l-1.06,0.25l-1.25,-0.2l-1.45,-0.7l-0.72,-0.97l-0.6,-0.14l-0.21,-0.72l-1.17,-0.49l-0.99,-0.02l-1.98,-0.87l-1.45,0.39l-0.83,-1.09l-0.6,-0.21l-1.43,-1.38l-1.96,0.01l-1.47,-0.64l-0.86,0.12l-1.62,-0.41l0.28,-1.26l-0.54,-1.01l-0.96,-0.35l-1.65,-6.03l-2.77,-3.02l-0.29,-1.12l-1.08,-0.75l0.35,-0.77l-0.24,-0.76l0.34,-2.18l-0.45,-0.96l-1.04,-1.01l0.65,-1.99l0.05,-1.19l-0.18,-0.7l-0.54,-0.33l-0.15,-1.81l-1.85,-1.44l-0.85,0.21l-0.29,-0.41l-0.81,-0.11l-0.74,-1.31l-2.22,-1.71l0.01,-0.69l-0.51,-0.58l0.12,-0.86l-0.97,-0.92l-0.08,-0.75l-1.12,-0.61l-1.3,-2.88l-2.66,-1.48l-0.38,-0.91l-1.13,-0.59l-0.06,-1.16l-0.82,-1.19l-0.59,-1.95l0.41,-0.22l-0.04,-0.73l-1.03,-0.49l-0.26,-1.29l-0.81,-0.57l-0.94,-1.74l-0.61,-2.38l-1.85,-2.36l-0.87,-4.24l-1.81,-1.34l0.05,-0.7l-0.75,-1.21l-3.96,-2.67l-0.71,-1.86l-1.82,-0.62l-1.44,-0.99l-0.01,-1.63l-0.6,-0.39l-0.88,0.24l-0.12,-0.77l-0.98,-0.33l-0.8,-2.08l-0.57,-0.47l-0.46,0.12l-0.46,-0.44l-0.86,0.27l-0.14,-0.6l-0.44,-0.31l-0.47,0.15l-0.25,0.61l-1.05,0.16l-2.89,-0.47l-0.39,-0.38l-1.48,-0.03l-0.79,0.29l-0.77,-0.44l-2.67,0.27l-3.92,-2.08l-1.35,0.86l-0.64,1.61l-1.98,-0.17l-0.52,0.44l-0.49,-0.17l-1.05,0.49l-1.33,0.14l-3.22,6.4l-0.18,1.77l-0.76,0.67l-0.38,1.8l0.35,0.59l-1.99,1.01l-0.72,1.3l-1.11,0.65l-1.12,2.0l-2.67,-0.46l-1.04,-0.87l-0.55,0.3l-1.69,-1.21l-1.31,-1.63l-2.9,-0.85l-1.15,-0.95l-0.02,-0.67l-0.42,-0.41l-2.75,-0.51l-2.28,-1.03l-1.89,-1.75l-0.91,-1.53l-0.96,-0.91l-1.53,-0.29l-1.77,-1.26l-0.22,-0.56l-1.31,-1.18l-0.65,-2.68l-0.86,-1.01l-0.24,-1.1l-0.76,-1.28l-0.26,-2.34l0.52,-3.05l-3.01,-5.07l-0.06,-1.94l-1.26,-2.51l-0.99,-0.44l-0.43,-1.24l-1.43,-0.81l-2.15,-2.18l-1.02,-0.1l-2.01,-1.25l-3.18,-3.35l-0.59,-1.55l-3.13,-2.55l-1.59,-2.45l-1.19,-0.95l-0.61,-1.05l-4.42,-2.6l-1.19,-2.19l-1.21,-3.23l-1.37,-1.08l-1.12,-0.08l-1.75,-1.67l-0.79,-3.05ZM502.09,468.18l-0.33,0.17l0.18,-0.16l0.15,-0.02ZM498.69,470.85l-0.09,0.12l-0.04,0.02l0.13,-0.14ZM497.79,472.33l0.15,0.05l-0.2,0.18l0.04,-0.11l0.01,-0.12ZM497.02,473.23l-0.13,0.12l0.03,-0.09l0.09,-0.03ZM467.54,489.19l0.03,0.02l-0.02,0.01l-0.0,-0.03ZM453.94,547.19l0.75,-0.5l0.25,-0.68l0.11,1.08l-1.1,0.1ZM460.89,499.8l-0.14,-0.59l1.22,-0.36l-0.28,0.33l-0.79,0.63ZM463.51,497.84l0.1,-0.23l1.27,-0.88l-0.92,0.85l-0.45,0.26ZM465.8,496.12l0.28,-0.24l0.47,-0.04l-0.25,0.13l-0.5,0.15ZM457.96,502.92l0.71,-1.64l0.64,-0.71l-0.02,0.75l-1.33,1.6ZM451.06,515.13l0.06,-0.22l0.07,-0.15l-0.13,0.37ZM451.5,513.91l0.16,-0.35l0.02,-0.02l-0.18,0.37ZM452.44,511.95l-0.01,-0.04l0.05,-0.04l-0.04,0.08Z", "name": "Texas" }, "US-NH": { "path": "M829.94,105.42l0.2,-1.33l-1.43,-5.38l0.53,-1.45l-0.28,-2.22l1.0,-1.86l-0.13,-2.3l0.64,-2.28l-0.44,-0.62l0.29,-2.31l-0.93,-3.8l0.08,-0.7l0.3,-0.45l1.83,-0.8l0.7,-1.39l1.43,-1.62l0.74,-1.8l-0.25,-1.13l0.52,-0.62l-2.34,-3.49l0.87,-3.26l-0.11,-0.78l-0.81,-1.29l0.27,-0.59l-0.23,-0.7l0.48,-3.2l-0.36,-0.82l0.91,-1.49l2.44,0.33l0.65,-0.88l13.0,34.89l0.84,3.65l2.6,2.21l0.88,0.34l0.36,1.6l1.72,1.31l0.0,0.35l0.77,0.23l-0.06,0.58l-0.46,3.09l-1.57,0.24l-1.32,1.19l-0.51,0.94l-0.96,0.37l-0.5,1.68l-1.1,1.44l-17.61,4.74l-1.7,-1.43l-0.41,-0.89l-0.1,-2.0l0.54,-0.59l0.03,-0.52l-1.02,-5.18Z", "name": "New Hampshire" }, "US-NY": { "path": "M821.38,166.44l0.69,-2.05l0.62,-0.02l0.55,-0.75l0.76,0.15l0.54,-0.41l-0.04,-0.31l0.57,-0.03l0.28,-0.66l0.66,-0.02l0.2,-0.55l-0.42,-0.83l0.22,-0.53l0.61,-0.37l1.34,0.22l0.54,-0.59l1.45,-0.18l0.21,-0.8l1.85,0.02l1.08,-0.91l0.11,-0.78l0.62,0.24l0.43,-0.61l4.83,-1.29l2.26,-1.3l1.99,-2.91l-0.2,1.16l-0.98,0.86l-1.22,2.31l0.55,0.46l1.6,-0.35l0.28,0.63l-0.43,0.49l-1.37,0.87l-0.51,-0.07l-2.26,0.92l-0.08,0.93l-0.87,-0.0l-2.73,1.72l-1.01,0.15l-0.17,0.8l-1.24,0.09l-2.24,1.91l-4.44,2.17l-0.2,0.71l-0.29,0.08l-0.45,-0.83l-1.41,-0.06l-0.73,0.42l-0.42,0.8l0.23,0.32l-0.92,0.69l-0.76,-0.84l0.32,-1.05ZM828.05,159.06l-0.02,-0.01l0.02,-0.06l-0.01,0.08ZM845.16,149.05l0.06,-0.06l0.18,-0.06l-0.11,0.19l-0.13,-0.07ZM844.3,154.94l0.1,-0.89l0.74,-1.16l1.65,-1.52l1.01,0.31l0.05,-0.82l0.79,0.67l-3.36,3.21l-0.67,0.45l-0.31,-0.25ZM850.39,150.14l0.02,-0.03l0.07,-0.07l-0.09,0.1ZM722.09,155.56l3.76,-3.85l1.27,-2.19l1.76,-1.86l1.16,-0.78l1.28,-3.35l1.56,-1.3l0.53,-0.83l-0.21,-1.83l-1.61,-2.42l0.43,-1.13l-0.17,-0.78l-0.83,-0.53l-2.11,-0.0l0.04,-0.99l-0.57,-2.22l4.99,-2.94l4.49,-1.8l2.38,-0.19l1.84,-0.74l5.64,-0.24l3.13,1.25l3.16,-1.68l5.49,-1.06l0.58,0.45l0.68,-0.2l0.12,-0.98l1.45,-0.72l1.03,-0.93l0.75,-0.2l0.69,-2.05l1.87,-1.76l0.79,-1.26l1.12,0.03l1.13,-0.52l1.07,-1.63l-0.46,-0.7l0.36,-1.2l-0.25,-0.51l-0.64,0.02l-0.17,-1.17l-0.94,-1.59l-1.01,-0.62l0.12,-0.18l0.59,0.39l0.53,-0.27l0.75,-1.44l-0.01,-0.91l0.81,-0.65l-0.01,-0.97l-0.93,-0.19l-0.6,0.7l-0.28,0.12l0.56,-1.3l-0.81,-0.62l-1.26,0.05l-0.87,0.77l-0.92,-0.41l-0.06,-0.29l2.05,-2.5l1.78,-1.47l1.67,-2.64l0.7,-0.56l0.11,-0.59l0.78,-0.95l0.07,-0.56l-0.5,-0.95l0.78,-1.89l4.82,-7.61l4.77,-4.5l2.84,-0.51l19.67,-5.66l0.41,0.88l-0.08,2.01l1.02,1.22l0.43,3.8l2.29,3.25l-0.09,1.89l0.85,2.42l-0.59,1.07l-0.0,3.41l0.71,0.9l1.32,2.76l0.19,1.09l0.62,0.84l0.12,3.92l0.55,0.85l0.54,0.07l0.53,-0.61l0.06,-0.87l0.33,-0.07l1.05,1.12l3.97,15.58l0.74,1.2l0.22,15.32l0.6,0.62l3.57,16.23l1.26,1.34l-2.82,3.18l0.03,0.54l1.52,1.31l0.19,0.6l-0.78,0.88l-0.64,1.8l-0.41,0.39l0.15,0.69l-1.25,0.64l0.04,-4.02l-0.57,-2.28l-0.74,-1.62l-1.46,-1.1l-0.17,-1.13l-0.7,-0.1l-0.42,1.33l0.68,1.27l1.05,0.83l0.97,2.85l-13.75,-4.06l-1.28,-1.47l-2.39,0.24l-0.63,-0.43l-1.06,-0.15l-1.74,-1.91l-0.75,-2.33l0.12,-0.72l-0.36,-0.63l-0.56,-0.21l0.09,-0.46l-0.35,-0.42l-1.64,-0.68l-1.08,0.32l-0.53,-1.22l-1.92,-0.93l-34.6,8.73l-34.44,7.84l-1.11,-5.15ZM818.84,168.69l1.08,-0.48l0.14,0.63l-1.17,1.53l-0.05,-1.68ZM730.07,136.63l0.03,-0.69l0.78,-0.07l-0.38,1.09l-0.43,-0.33Z", "name": "New York" }, "US-HI": { "path": "M295.5,583.17l0.06,-1.75l4.12,-4.97l1.03,-3.4l-0.33,-0.64l0.94,-2.43l-0.05,-3.52l0.39,-0.78l2.47,-0.7l1.55,0.23l4.45,-1.4l0.51,-0.7l-0.17,-2.69l0.4,-1.66l1.78,-1.16l1.74,2.15l-0.15,0.94l1.88,3.6l0.94,0.35l5.13,7.65l0.86,3.93l-1.52,3.14l0.22,0.58l1.47,0.95l-0.68,2.07l0.35,1.51l1.6,3.0l-1.39,0.86l-2.28,-0.2l-3.27,0.51l-4.56,-1.32l-2.15,-1.34l-6.66,-0.15l-1.59,0.26l-1.56,1.19l-1.63,0.58l-1.14,0.02l-0.7,-2.54l-2.09,-2.18ZM306.33,530.7l1.6,0.08l0.51,2.07l-0.3,2.25l0.37,0.59l2.33,0.88l1.38,0.1l1.55,1.39l0.27,1.55l0.93,0.97l-0.13,1.05l1.83,2.52l-0.13,0.66l-0.61,0.48l-1.82,0.38l-1.84,-0.18l-1.47,-1.19l-2.21,-0.24l-2.69,-1.48l0.01,-1.23l1.15,-1.86l0.41,-2.07l-1.76,-1.28l-1.08,-1.75l-0.1,-2.61l1.79,-1.08ZM297.2,518.01l0.71,0.31l0.38,1.05l2.64,2.0l0.9,1.11l0.92,0.08l0.8,1.67l1.56,1.05l0.72,0.06l1.07,1.11l-1.31,0.41l-2.75,-0.66l-3.23,-3.93l-3.16,-2.01l-1.39,-0.44l-0.05,-0.7l1.58,-0.43l0.62,-0.67ZM301.59,541.55l-2.09,-0.98l-0.28,-0.51l2.92,0.34l-0.56,1.15ZM298.23,532.36l-0.92,-0.29l-0.72,-0.89l0.92,-2.06l-0.49,-1.73l2.6,1.38l0.61,2.08l0.14,1.06l-2.15,0.45ZM281.13,503.64l0.57,-1.85l-0.38,-0.9l-0.16,-2.84l0.75,-0.92l-0.12,-1.22l2.74,1.9l2.9,-0.62l1.56,0.15l0.38,1.01l-0.33,2.17l0.29,1.5l-0.69,0.6l-0.19,1.55l0.38,1.54l0.86,0.51l0.29,1.07l-0.52,1.14l0.53,1.28l-1.18,-0.0l-0.2,-0.48l-2.04,-0.86l-0.77,-2.83l-1.27,-0.38l0.8,-0.11l0.32,-0.46l-0.08,-0.66l-0.63,-0.68l-1.75,-0.32l0.23,1.82l-2.28,-1.1ZM259.66,469.47l-0.24,-2.03l-0.91,-0.69l-0.68,-1.23l0.08,-1.2l0.08,-0.34l2.39,-0.81l4.6,0.53l0.67,1.04l2.51,1.09l0.69,1.25l-0.15,1.9l-2.3,1.32l-0.74,1.3l-0.79,0.34l-2.78,0.09l-0.92,-1.53l-1.52,-1.0ZM245.78,462.61l-0.23,-0.74l1.03,-0.75l4.32,-0.72l0.43,0.3l-0.92,0.4l-0.68,0.94l-1.66,-0.5l-1.36,0.34l-0.94,0.72Z", "name": "Hawaii" }, "US-VT": { "path": "M805.56,72.69l26.03,-7.97l0.89,1.85l-0.74,2.37l-0.03,1.54l2.22,2.75l-0.51,0.58l0.26,1.13l-0.67,1.6l-1.35,1.49l-0.64,1.32l-1.72,0.7l-0.62,0.92l-0.1,0.98l0.93,3.74l-0.29,2.44l0.4,0.54l-0.6,2.11l0.15,2.19l-1.0,1.87l0.27,2.36l-0.53,1.54l1.43,5.44l-0.22,1.22l1.05,5.3l-0.58,0.85l0.11,2.31l0.6,1.26l1.51,1.1l-11.44,2.89l-0.57,-0.85l-4.02,-15.75l-1.72,-1.59l-0.91,0.25l-0.3,1.19l-0.12,-0.26l-0.11,-3.91l-0.68,-1.0l-0.14,-0.98l-1.37,-2.85l-0.63,-0.68l0.01,-3.15l0.6,-1.15l-0.86,-2.57l0.08,-1.93l-0.39,-0.91l-1.55,-1.63l-0.38,-0.81l-0.41,-3.71l-1.03,-1.27l0.11,-1.87l-0.43,-1.01Z", "name": "Vermont" }, "US-NM": { "path": "M230.86,422.88l11.82,-123.66l25.67,2.24l26.1,1.86l26.12,1.45l25.74,1.02l-0.31,10.24l-0.74,0.39l-3.59,98.69l-32.38,-1.34l-33.53,-2.02l-0.44,0.76l0.54,2.31l0.44,1.26l0.99,0.76l-30.55,-2.46l-0.43,0.36l-0.82,9.46l-14.63,-1.33Z", "name": "New Mexico" }, "US-NC": { "path": "M826.87,289.49l0.07,-0.05l-0.02,0.03l-0.04,0.02ZM819.58,272.4l0.2,0.23l-0.05,0.01l-0.16,-0.24ZM821.84,276.68l0.19,0.15l-0.02,0.18l-0.05,-0.08l-0.12,-0.25ZM676.72,321.77l0.92,0.17l1.52,-0.39l0.42,-0.39l0.52,-0.97l0.13,-2.7l1.34,-1.19l0.47,-1.05l2.24,-1.47l2.12,-0.52l0.76,0.18l1.32,-0.52l2.36,-2.52l0.78,-0.25l1.84,-2.29l1.48,-1.0l1.55,-0.19l1.15,-2.65l-0.28,-1.22l1.66,0.06l0.51,-1.65l0.93,-0.77l1.08,-0.77l0.51,1.52l1.07,0.33l1.34,-1.17l1.35,-2.64l2.49,-1.59l0.79,0.08l0.82,0.8l1.06,-0.21l0.84,-1.07l1.47,-4.18l1.08,-1.1l1.47,0.09l0.44,-0.31l-0.69,-1.26l0.4,-2.0l-0.42,-0.9l0.38,-1.25l7.42,-0.86l19.54,-3.36l37.22,-8.42l31.12,-7.87l0.4,1.21l3.54,3.24l1.0,1.53l-1.21,-1.0l-0.16,-0.63l-0.92,-0.4l-0.52,0.05l-0.24,0.65l0.66,0.54l0.59,1.56l-0.53,0.01l-0.91,-0.75l-2.31,-0.8l-0.4,-0.48l-0.55,0.13l-0.31,0.69l0.14,0.64l1.37,0.44l1.69,1.38l-1.11,0.66l-2.48,-1.2l-0.36,0.51l0.14,0.42l1.6,1.18l-1.84,-0.33l-2.23,-0.87l-0.46,0.14l0.01,0.48l0.6,0.7l1.71,0.83l-0.97,0.58l0.0,0.6l-0.43,0.53l-1.48,0.74l-0.89,-0.77l-0.61,0.22l-0.1,0.35l-0.2,-0.13l-1.32,-2.32l0.21,-2.63l-0.42,-0.48l-0.89,-0.22l-0.37,0.64l0.62,0.71l-0.43,0.99l-0.02,1.04l0.49,1.73l1.6,2.2l-0.31,1.28l0.48,0.29l2.97,-0.59l2.1,-1.49l0.27,0.01l0.37,0.79l0.76,-0.34l1.56,0.05l0.16,-0.71l-0.57,-0.32l1.29,-0.76l2.04,-0.46l-0.1,1.19l0.64,0.29l-0.6,0.88l0.89,1.19l-0.84,0.1l-0.19,0.66l1.38,0.46l0.26,0.94l-1.21,0.05l-0.19,0.66l0.66,0.59l1.25,-0.16l0.52,0.26l0.4,-0.38l0.18,-1.95l-0.75,-3.33l0.41,-0.48l0.56,0.43l0.94,0.06l0.28,-0.57l-0.29,-0.44l0.48,-0.57l1.71,1.84l-0.0,1.41l0.62,0.9l-0.53,0.18l-0.25,0.47l0.9,1.14l-0.08,0.37l-0.42,0.55l-0.78,0.09l-0.91,-0.86l-0.32,0.33l0.13,1.26l-1.08,1.61l0.2,0.57l-0.32,0.22l-0.15,0.98l-0.74,0.55l0.1,0.91l-0.9,0.96l-1.06,0.21l-0.59,-0.37l-0.52,0.52l-0.93,-0.81l-0.86,0.1l-0.4,-0.82l-0.59,-0.21l-0.52,0.38l0.08,0.94l-0.52,0.22l-1.42,-1.25l1.31,-0.4l0.23,-0.88l-0.57,-0.42l-2.02,0.31l-1.14,1.01l0.29,0.67l0.44,0.16l0.09,0.82l0.35,0.25l-0.03,0.12l-0.57,-0.34l-1.69,0.83l-1.12,-0.43l-1.45,0.06l-3.32,-0.7l0.42,1.08l0.97,0.45l0.36,0.64l0.63,0.11l0.87,-0.32l1.68,0.63l2.35,0.39l3.51,0.11l0.47,0.42l-0.06,0.52l-0.99,0.05l-0.38,0.5l0.13,0.23l-1.62,1.44l0.32,0.58l1.85,0.01l-2.55,3.5l-1.67,0.04l-1.59,-0.98l-0.9,-0.19l-1.21,-1.02l-1.12,0.07l0.07,0.47l1.04,1.14l2.32,2.09l2.68,0.26l1.31,0.49l1.71,-2.16l0.51,0.47l1.17,0.33l0.4,-0.57l-0.55,-0.9l0.87,0.16l0.19,0.57l0.66,0.24l1.63,-1.2l-0.18,0.61l0.29,0.57l-0.29,0.38l-0.43,-0.2l-0.41,0.37l0.03,0.9l-0.97,1.72l0.01,0.78l-0.71,-0.07l-0.06,-0.74l-1.12,-0.61l-0.42,0.47l0.27,1.45l-0.52,-1.1l-0.65,-0.16l-1.22,1.08l-0.21,0.52l0.25,0.27l-2.03,0.32l-2.75,1.84l-0.67,-1.04l-0.75,-0.29l-0.37,0.49l0.43,1.26l-0.57,-0.01l-0.09,0.82l-0.94,1.73l-0.91,0.85l-0.59,-0.26l0.49,-0.69l-0.02,-0.77l-1.06,-0.93l-0.08,-0.52l-1.69,-0.41l-0.16,0.47l0.43,1.16l0.2,0.33l0.58,0.07l0.3,0.61l-0.88,0.37l-0.08,0.71l0.65,0.64l0.77,0.18l-0.01,0.37l-2.12,1.67l-1.92,2.65l-2.0,4.31l-0.34,2.13l0.12,1.34l-0.15,-1.03l-1.01,-1.59l-0.55,-0.17l-0.3,0.48l1.17,3.95l-0.63,2.27l-3.9,0.19l-1.43,0.65l-0.35,-0.52l-0.58,-0.18l-0.54,1.07l-1.9,1.14l-0.61,-0.02l-23.25,-15.36l-1.05,-0.02l-18.68,3.49l-0.65,-2.77l-3.25,-2.84l-0.47,0.08l-1.23,1.31l-0.01,-1.29l-0.82,-0.54l-22.82,3.35l-0.64,-0.27l-0.62,0.46l-0.25,0.65l-3.98,1.93l-0.89,1.23l-1.01,0.08l-4.78,2.66l-20.95,3.93l-0.34,-4.55l0.7,-0.95ZM817.0,271.48l0.19,0.35l0.24,0.39l-0.45,-0.41l0.02,-0.32ZM807.53,290.29l0.2,0.32l-0.16,-0.09l-0.03,-0.23ZM815.31,299.15l0.16,-0.36l0.16,0.07l-0.13,0.29l-0.19,0.01ZM812.76,299.11l-0.06,-0.28l-0.03,-0.11l0.3,0.26l-0.21,0.13ZM812.97,264.02l0.37,-0.24l0.15,0.42l-0.42,0.07l-0.1,-0.25ZM791.92,329.4l0.04,-0.08l0.22,0.03l-0.0,0.09l-0.26,-0.05Z", "name": "North Carolina" }, "US-ND": { "path": "M438.54,42.78l2.06,6.9l-0.73,2.53l0.57,2.36l-0.27,1.17l0.47,1.99l0.01,3.26l1.42,3.95l0.45,0.54l-0.08,0.97l0.39,1.52l0.62,0.74l1.48,3.74l-0.06,3.9l0.42,0.7l0.5,8.35l0.51,1.54l0.51,0.25l-0.47,2.64l0.36,1.63l-0.14,1.75l0.69,1.1l0.2,2.16l0.49,1.13l1.8,2.56l0.15,2.2l0.51,1.08l0.17,1.39l-0.24,1.36l0.28,1.74l-27.89,0.73l-28.38,0.19l-28.38,-0.37l-28.49,-0.93l2.75,-65.47l23.08,0.78l25.57,0.42l25.57,-0.06l24.11,-0.49Z", "name": "North Dakota" }, "US-NE": { "path": "M422.58,174.02l3.92,2.71l3.93,1.9l1.34,-0.22l0.51,-0.47l0.36,-1.08l0.48,-0.2l2.49,0.34l1.32,-0.47l1.58,0.25l3.45,-0.65l2.37,1.98l1.4,0.14l1.55,0.77l1.45,0.08l0.88,1.1l1.49,0.17l-0.06,0.98l1.68,2.08l3.32,0.6l0.19,0.68l-0.22,1.87l1.13,1.94l0.01,2.29l1.15,1.08l0.34,1.72l1.73,1.46l0.07,1.88l1.5,2.11l-0.49,2.33l0.44,3.09l0.52,0.54l0.94,-0.2l-0.04,1.25l1.21,0.5l-0.41,2.36l0.21,0.44l1.12,0.4l-0.6,0.77l-0.09,1.01l0.13,0.59l0.82,0.5l0.16,1.45l-0.26,0.92l0.26,1.27l0.55,0.61l0.3,1.93l-0.22,1.33l0.23,0.72l-0.57,0.92l0.02,0.79l0.45,0.88l1.23,0.63l0.25,2.5l1.1,0.51l0.03,0.79l1.18,2.75l-0.23,0.96l1.16,0.21l0.8,0.99l1.1,0.24l-0.15,0.96l1.31,1.68l-0.21,1.12l0.51,0.91l-26.15,1.05l-27.83,0.63l-27.84,0.14l-27.89,-0.35l0.46,-21.66l-0.39,-0.41l-32.36,-1.04l1.85,-43.24l43.36,1.22l44.67,-0.04Z", "name": "Nebraska" }, "US-LA": { "path": "M508.97,412.97l-1.33,-21.76l51.44,-4.07l0.34,0.83l1.48,0.66l-0.92,1.35l-0.25,2.13l0.49,0.72l1.18,0.31l-1.21,0.47l-0.45,0.78l0.45,1.36l1.05,0.84l0.08,2.15l0.46,0.54l1.51,0.74l0.45,1.05l1.42,0.44l-0.87,1.22l-0.85,2.34l-0.75,0.04l-0.52,0.51l-0.02,0.73l0.63,0.72l-0.22,1.16l-1.35,0.96l-1.08,1.89l-1.37,0.67l-0.68,0.83l-0.79,2.42l-0.25,3.52l-1.55,1.74l0.13,1.21l0.62,0.96l-0.35,2.38l-1.61,0.29l-0.6,0.57l0.28,0.97l0.64,0.59l-0.26,1.41l0.98,1.51l-1.18,1.18l-0.08,0.45l0.4,0.23l6.18,-0.55l29.23,-2.92l-0.68,3.47l-0.52,1.02l-0.2,2.24l0.69,0.98l-0.09,0.66l0.6,1.0l1.31,0.7l1.22,1.42l0.14,0.88l0.89,1.39l0.14,1.05l1.11,1.84l-1.85,0.39l-0.38,-0.08l-0.01,-0.56l-0.53,-0.57l-1.28,0.28l-1.18,-0.59l-1.51,0.17l-0.61,-0.98l-1.24,-0.86l-2.84,-0.47l-1.24,0.63l-1.39,2.3l-1.3,1.42l-0.42,0.91l0.07,1.2l0.55,0.89l0.82,0.57l4.25,0.82l3.35,-1.0l1.32,-1.19l0.68,-1.19l0.34,0.59l1.08,0.43l0.59,-0.4l0.81,0.03l0.51,-0.46l-0.76,1.21l-1.12,-0.12l-0.57,0.32l-0.38,0.62l0.0,0.83l0.77,1.22l1.48,-0.02l0.65,0.89l1.1,0.48l0.94,-0.21l0.51,-0.45l0.46,-1.11l-0.02,-1.37l0.93,-0.58l0.42,-0.99l0.23,0.05l0.1,1.16l-0.24,0.25l0.18,0.57l0.43,0.15l-0.07,0.75l1.34,1.08l0.34,-0.16l-0.48,0.59l0.18,0.63l-0.35,0.13l-0.52,-0.57l-0.92,-0.19l-1.0,1.89l-0.85,0.14l-0.46,0.53l0.16,1.19l-1.6,-0.61l-0.43,0.19l0.04,0.46l1.14,1.06l-1.17,-0.14l-0.92,0.61l0.68,0.43l1.26,2.04l2.74,0.97l-0.08,1.2l0.34,0.41l2.07,-0.32l0.77,0.17l0.17,0.53l0.73,0.32l1.35,-0.34l0.53,0.78l1.08,-0.46l1.13,0.74l0.14,0.3l-0.4,0.62l1.54,0.86l-0.39,0.65l0.39,0.58l-0.18,0.62l-0.95,1.49l-1.3,-1.56l-0.68,0.34l0.1,0.66l-0.38,0.12l0.41,-1.88l-1.33,-0.76l-0.5,0.5l0.2,1.18l-0.54,0.45l-0.27,-1.02l-0.57,-0.25l-0.89,-1.27l0.03,-0.77l-0.96,-0.14l-0.47,0.5l-1.41,-0.17l-0.41,-0.61l0.14,-0.63l-0.39,-0.46l-0.45,-0.02l-0.81,0.73l-1.18,0.02l0.12,-1.23l-0.46,-0.88l-0.91,0.04l0.09,-0.96l-0.37,-0.36l-0.91,-0.03l-0.22,0.58l-0.85,-0.38l-0.48,0.27l-2.61,-1.26l-1.24,-0.03l-0.67,-0.64l-0.61,0.19l-0.3,0.56l-0.05,1.25l1.72,0.94l1.67,0.35l-0.16,0.92l0.28,0.39l-0.34,0.35l0.23,0.68l-0.76,0.95l-0.02,0.66l0.81,0.97l-0.95,1.43l-1.33,0.94l-0.76,-1.15l0.22,-1.5l-0.35,-0.92l-0.49,-0.18l-0.4,0.36l-1.15,-1.08l-0.59,0.42l-0.76,-1.05l-0.62,-0.2l-0.64,1.33l-0.85,0.26l-0.88,-0.53l-0.86,0.53l-0.1,0.62l0.48,0.41l-0.68,0.56l-0.13,1.44l-0.46,0.13l-0.39,0.83l-0.92,0.08l-0.11,-0.68l-1.6,-0.4l-0.77,0.97l-1.92,-0.93l-0.3,-0.54l-0.99,0.01l-0.35,0.6l-1.16,-0.51l0.42,-0.4l0.01,-1.46l-0.38,-0.57l-1.9,-1.19l-0.08,-0.54l-0.83,-0.72l-0.09,-0.91l0.73,-1.15l-0.34,-1.14l-0.87,-0.19l-0.34,0.57l0.16,0.43l-0.59,0.81l0.04,0.91l-1.8,-0.4l0.07,-0.39l-0.47,-0.54l-1.97,0.76l-0.7,-2.22l-1.32,0.23l-0.18,-2.12l-1.31,-0.35l-1.89,0.3l-1.09,0.65l-0.21,-0.71l0.84,-0.26l-0.05,-0.8l-0.6,-0.58l-1.03,-0.1l-0.85,0.42l-0.95,-0.15l-0.4,0.8l-2.0,1.11l-0.63,-0.31l-1.29,0.71l0.54,1.37l0.8,0.31l0.97,1.51l-1.39,0.19l-1.83,1.03l-3.69,-0.4l-1.24,0.21l-3.09,-0.45l-1.99,-0.68l-1.81,-1.07l-3.7,-1.1l-3.19,-0.48l-2.53,0.58l-5.62,0.45l-1.0,0.26l-1.82,1.25l-0.59,-0.63l-0.26,-1.08l1.59,-0.47l0.7,-1.76l-0.02,-1.55l-0.39,-0.56l1.11,-1.54l0.23,-1.59l-0.5,-1.83l0.07,-1.46l-0.66,-0.7l-0.21,-1.04l0.83,-2.22l-0.64,-1.95l0.76,-0.84l0.3,-1.49l0.78,-0.94l0.79,-2.83l-0.18,-1.42l0.58,-0.97l-0.75,-1.33l0.84,-0.39l0.2,-0.44l-0.89,-1.36l0.03,-2.13l-1.07,-0.23l-0.57,-1.57l-0.92,-0.84l0.28,-1.27l-0.81,-0.76l-0.33,-0.95l-0.64,-0.34l0.22,-0.98l-1.16,-0.58l-0.81,-0.93l0.16,-2.46l-0.68,-1.93l-1.33,-1.98l-2.63,-2.21ZM607.49,467.45l-0.03,-0.03l-0.07,-0.04l0.13,-0.01l-0.03,0.08ZM607.51,465.85l-0.02,-0.01l0.03,-0.01l-0.02,0.02ZM567.04,468.98l-2.0,-0.42l-0.66,-0.5l0.73,-0.43l0.35,-0.76l0.39,0.49l0.83,0.21l-0.15,0.61l0.5,0.81ZM550.39,463.0l1.73,-1.05l3.34,1.07l-0.69,0.56l-0.17,0.81l-0.68,0.17l-3.53,-1.57Z", "name": "Louisiana" }, "US-SD": { "path": "M336.37,128.84l0.3,-0.53l0.75,-19.93l28.5,0.93l28.4,0.37l28.4,-0.19l27.78,-0.73l-0.18,1.71l-0.73,1.71l-2.9,2.46l-0.42,1.27l1.59,2.13l1.06,2.06l0.55,0.36l1.74,0.24l1.01,0.84l0.57,1.02l1.45,38.83l-1.84,0.09l-0.42,0.56l0.24,1.44l0.88,1.14l0.01,1.45l-0.65,0.36l0.17,1.48l0.48,0.43l1.09,0.04l0.34,1.68l-0.16,0.91l-0.62,0.83l0.02,1.73l-0.68,2.45l-0.49,0.44l-0.67,1.88l0.5,1.1l1.33,1.08l-0.16,0.62l0.64,0.66l0.35,1.15l-1.65,-0.28l-0.34,-0.94l-0.85,-0.73l0.19,-0.61l-0.28,-0.59l-1.58,-0.23l-1.03,-1.18l-1.57,-0.11l-1.51,-0.75l-1.34,-0.12l-2.38,-1.99l-3.78,0.6l-1.65,-0.25l-1.19,0.46l-2.62,-0.33l-0.98,0.48l-0.76,1.45l-0.72,0.05l-3.67,-1.82l-4.13,-2.8l-44.83,0.05l-43.33,-1.22l1.79,-43.2Z", "name": "South Dakota" }, "US-DC": { "path": "M781.25,216.97l0.45,-0.77l2.04,1.26l-0.66,1.14l-0.55,-1.05l-1.28,-0.58Z", "name": "District of Columbia" }, "US-DE": { "path": "M798.52,195.11l0.42,-1.51l0.92,-1.11l1.72,-0.71l1.12,0.06l-0.33,0.56l-0.08,1.38l-1.13,1.92l0.1,1.09l1.11,1.1l-0.07,1.52l2.29,2.48l1.25,0.6l0.93,1.52l0.99,3.35l1.72,1.57l0.57,1.32l3.06,1.99l1.44,-0.09l0.45,1.25l-1.06,0.56l0.16,1.32l0.36,0.19l-0.83,0.57l-0.08,1.21l0.66,0.21l0.85,-0.73l0.71,0.34l0.3,-0.21l0.75,1.55l-10.19,2.82l-8.12,-26.12Z", "name": "Delaware" }, "US-FL": { "path": "M630.28,423.69l47.19,-6.86l1.53,1.91l0.87,2.72l1.47,1.0l48.79,-5.11l1.03,1.38l0.03,1.09l0.55,1.05l1.04,0.48l1.64,-0.28l0.85,-0.75l-0.14,-4.57l-0.98,-1.49l-0.22,-1.77l0.28,-0.74l0.62,-0.3l0.12,-0.7l5.6,0.96l4.03,-0.16l0.14,1.24l-0.75,-0.12l-0.33,0.43l0.25,1.54l2.11,1.81l0.22,1.01l0.42,0.38l0.29,1.92l1.87,3.29l1.7,4.87l0.73,0.84l0.51,1.5l1.64,2.46l0.64,1.57l2.79,3.71l1.93,3.18l2.29,2.77l0.16,0.6l0.63,0.36l6.82,7.53l-0.48,-0.03l-0.27,0.61l-1.35,-0.02l-0.34,-0.65l0.38,-1.38l-0.16,-0.56l-2.3,-0.92l-0.46,0.53l1.0,2.8l0.78,0.97l2.14,4.77l9.92,13.71l1.37,3.11l3.66,5.34l-1.38,-0.35l-0.43,0.74l0.8,0.65l0.85,0.24l0.56,-0.22l1.46,0.94l2.05,3.05l-0.5,0.34l-0.12,0.53l1.16,0.53l0.89,1.83l-0.08,1.06l0.59,0.95l0.61,2.64l-0.27,0.75l0.93,8.98l-0.31,1.07l0.46,0.67l0.5,3.1l-0.81,1.46l0.07,2.23l-0.84,0.74l-0.22,1.8l-0.48,0.85l0.21,1.47l-0.3,1.75l0.54,1.74l0.45,0.23l-1.15,1.8l-0.39,1.28l-0.94,0.24l-0.53,-0.22l-1.37,0.45l-0.35,1.06l-0.89,0.3l-0.18,0.58l-0.85,0.67l-1.44,0.14l-0.27,-0.32l-1.23,-0.1l-0.9,1.05l-3.17,1.13l-1.06,-0.59l-0.7,-1.04l0.06,-1.79l1.0,0.84l1.64,0.47l0.26,0.63l0.52,0.07l1.35,-0.72l0.2,-0.69l-0.26,-0.64l-1.58,-1.11l-2.4,-0.26l-0.91,-0.46l-0.85,-1.67l-0.89,-0.72l0.22,-0.98l-0.48,-0.28l-0.53,0.15l-1.38,-2.51l-0.44,-0.3l-0.64,0.07l-0.44,-0.61l0.22,-0.89l-0.7,-0.65l-1.21,-0.6l-1.06,-0.08l-0.75,-0.54l-0.57,0.18l-2.8,-0.59l-0.5,0.64l0.25,-0.91l-0.46,-0.42l-0.87,0.12l-0.26,-0.72l-0.88,-0.65l-0.61,-1.41l-0.55,-0.11l-0.72,-2.94l-0.77,-1.0l-0.16,-1.52l-0.44,-0.83l-0.71,-0.89l-0.49,-0.15l-0.12,0.93l-1.29,-0.26l1.06,-1.3l0.3,-0.75l-0.12,-0.63l0.86,-1.46l0.65,-0.34l0.28,-0.83l-0.61,-0.38l-1.42,0.93l-0.89,1.29l-0.42,2.17l-1.37,0.35l-0.21,-1.33l-0.79,-1.33l-0.27,-4.04l-0.86,-0.6l1.63,-1.33l0.22,-0.97l-0.58,-0.42l-3.06,1.92l-0.75,-0.66l-0.4,0.26l-1.27,-0.89l-0.37,0.74l1.13,1.09l0.52,0.1l1.26,2.0l-1.04,0.23l-1.42,-0.38l-0.84,-1.6l-1.13,-0.6l-1.94,-2.55l-1.04,-2.28l-1.28,-0.87l0.1,-0.87l-0.97,-1.8l-1.77,-0.98l0.09,-0.67l0.99,-0.41l-0.35,-0.49l0.44,-0.73l-0.39,-0.35l0.4,-1.21l2.47,-4.47l-1.05,-2.41l-0.68,-0.46l-0.92,0.42l-0.28,0.93l0.29,1.2l-0.24,0.03l-0.73,-2.44l-0.99,-0.28l-1.19,-0.87l-1.52,-0.31l0.29,1.95l-0.48,0.61l0.27,0.59l2.21,0.56l0.25,0.97l-0.37,2.46l-0.31,-0.58l-0.8,-0.22l-2.13,-1.53l-0.41,0.2l-0.29,-0.63l0.59,-2.11l0.07,-2.97l-0.66,-1.97l0.42,-0.51l0.48,-1.91l-0.24,-0.54l0.66,-3.04l-0.35,-5.26l-0.71,-1.7l0.35,-0.47l-0.47,-2.18l-2.1,-1.33l-0.05,-0.52l-0.55,-0.43l-0.1,-1.01l-0.92,-0.73l-0.55,-1.51l-0.64,-0.25l-1.44,0.32l-1.03,-0.2l-1.57,0.54l-1.14,-1.74l-1.51,-0.48l-0.19,-0.6l-1.35,-1.51l-0.87,-0.59l-0.62,0.07l-1.52,-1.16l-0.8,-0.21l-0.51,-2.75l-3.06,-1.13l-0.65,-0.59l-0.52,-1.23l-2.15,-1.93l-2.19,-1.09l-1.45,-0.12l-3.44,-1.68l-2.85,0.98l-1.0,-0.4l-1.05,0.42l-0.35,0.68l-1.33,0.68l-0.5,0.7l0.03,0.64l-0.73,-0.22l-0.59,0.6l0.67,0.94l1.51,0.08l0.41,0.21l-3.03,0.23l-1.58,1.51l-0.91,0.45l-1.3,1.56l-1.56,1.03l-0.32,0.13l0.2,-0.48l-0.26,-0.54l-0.66,-0.04l-0.96,0.75l-1.12,1.5l-2.2,0.23l-2.11,1.06l-0.78,0.03l-0.27,-2.03l-1.71,-2.23l-2.21,-1.0l-0.18,-0.41l-2.51,-1.5l2.79,1.33l1.21,-0.74l0.0,-0.74l-1.32,-0.34l-0.36,0.55l-0.21,-1.01l-0.34,-0.1l0.13,-0.52l-0.49,-0.33l-1.39,0.61l-2.3,-0.76l0.65,-1.08l0.83,-0.1l1.03,-1.45l-0.91,-0.95l-0.46,0.12l-0.49,1.02l-0.44,-0.04l-0.81,0.56l-0.72,-0.9l-0.7,0.09l-0.17,0.38l-1.34,0.73l-0.14,0.68l0.29,0.46l-3.95,-1.35l-5.05,-0.71l0.12,-0.24l1.27,0.29l0.61,-0.53l2.1,0.39l0.23,-0.78l-0.94,-1.02l0.09,-0.7l-0.63,-0.28l-0.5,0.32l-0.28,-0.47l-1.9,0.19l-2.25,1.1l0.3,-0.63l-0.41,-0.58l-0.96,0.35l-0.58,-0.25l-0.23,0.44l0.2,0.71l-1.45,0.8l-0.4,0.63l-5.18,0.97l0.32,-0.52l-0.4,-0.52l-1.35,-0.28l-0.72,-0.53l0.69,-0.53l0.01,-0.78l-0.68,-0.13l-0.81,-0.66l-0.46,0.11l0.14,0.76l-0.42,1.77l-1.05,-1.39l-0.69,-0.45l-0.55,0.07l-0.3,0.71l0.82,1.77l-0.25,0.79l-1.39,0.99l-0.05,1.04l-0.6,0.22l-0.17,0.57l-1.48,0.56l0.28,-0.65l-0.21,-0.46l1.14,-1.03l0.07,-0.74l-0.4,-0.58l-1.19,-0.24l-0.41,-0.84l0.3,-1.7l-0.18,-1.61l-2.17,-1.12l-2.39,-2.46l0.32,-1.44l-0.15,-1.04ZM767.29,490.44l0.48,1.07l0.9,0.39l0.78,-0.15l1.41,1.67l0.91,0.58l1.86,0.69l1.61,0.07l0.55,-0.44l-0.08,-0.87l0.55,-0.65l-0.16,-1.21l0.76,-1.36l0.09,-1.81l-0.64,-1.62l-1.46,-2.01l-1.74,-1.32l-1.19,-0.13l-1.12,0.83l-1.83,3.16l-2.12,1.94l-0.13,0.77l0.57,0.41ZM644.36,434.13l-0.94,0.26l0.41,-0.44l0.53,0.18ZM665.13,435.7l0.98,-0.28l0.35,0.32l0.09,0.72l-1.42,-0.75ZM770.56,455.01l0.42,0.56l-0.43,0.75l0.0,-1.31ZM788.88,525.23l0.01,-0.07l0.01,0.03l-0.03,0.04ZM789.47,522.87l-0.22,-0.23l0.49,-0.32l-0.27,0.55ZM768.83,453.61l0.21,0.76l-0.31,2.33l0.28,1.79l-1.38,-3.23l1.19,-1.65ZM679.81,445.61l0.22,-0.2l0.36,0.02l-0.11,0.42l-0.47,-0.25Z", "name": "Florida" }, "US-WA": { "path": "M38.52,55.26l0.46,-1.32l0.18,0.45l0.65,0.3l1.04,-0.74l0.43,0.59l0.7,-0.03l0.17,-0.77l-0.92,-1.56l0.79,-0.74l-0.09,-1.36l0.49,-0.39l-0.1,-1.03l0.81,-0.27l0.05,0.5l0.48,0.41l0.95,-0.31l-0.09,-0.68l-1.35,-1.65l-0.9,0.15l-1.88,-0.56l0.17,-1.98l0.66,0.53l0.52,-0.07l0.29,-0.56l-0.16,-0.67l3.3,-0.52l0.26,-0.69l-1.7,-0.96l-0.86,-0.14l-0.37,-1.51l-0.7,-0.42l-0.81,-0.02l0.32,-4.73l-0.49,-1.28l0.1,-0.69l-0.4,-0.34l0.76,-5.74l-0.13,-2.46l-0.45,-0.62l-0.16,-1.36l-0.65,-1.33l-0.73,-0.57l-0.32,-2.45l0.35,-2.27l-0.15,-1.11l1.74,-3.3l-0.52,-1.23l4.59,3.9l1.19,0.38l0.92,0.75l0.81,1.3l1.86,1.08l3.24,0.91l0.84,0.77l1.42,0.11l1.73,1.02l2.33,0.73l1.46,-0.47l0.52,0.29l0.55,0.69l-0.03,1.09l0.55,0.74l0.31,0.11l0.49,-0.35l0.07,-0.75l0.45,0.03l0.63,1.39l-0.4,0.58l0.34,0.49l0.56,-0.04l0.72,-0.84l-0.38,-1.7l1.03,-0.24l-0.44,0.23l-0.21,0.69l1.27,4.41l-0.46,0.1l-1.67,1.73l0.22,-1.29l-0.22,-0.41l-1.31,0.31l-0.38,0.81l0.09,0.95l-1.37,1.7l-1.98,1.38l-1.06,1.41l-0.96,0.69l-1.1,1.67l-0.06,0.71l0.62,0.6l0.96,0.12l2.77,-0.48l1.22,-0.58l-0.03,-0.7l-0.64,-0.23l-2.94,0.79l-0.35,-0.3l3.23,-3.42l3.06,-0.88l0.89,-1.51l1.73,-1.54l0.53,0.57l0.54,-0.19l0.22,-1.81l-0.06,2.25l0.26,0.91l-0.99,-0.21l-0.64,0.77l-0.41,-0.73l-0.52,-0.19l-0.39,0.64l0.3,0.71l0.02,1.63l-0.21,-1.07l-0.67,-0.21l-0.47,0.69l-0.07,0.75l0.46,0.66l-0.63,0.58l-0.0,0.45l0.42,0.17l1.68,-0.57l0.25,1.09l-1.08,1.79l-0.08,1.05l-0.83,0.7l0.13,1.0l-0.85,-0.68l1.12,-1.44l-0.23,-0.96l-1.96,1.08l-0.38,0.64l-0.05,-2.11l-0.52,0.02l-1.03,1.59l-1.26,0.53l-1.14,1.87l-1.51,0.3l-0.46,0.43l-0.21,1.18l1.11,-0.03l-0.25,0.36l0.27,0.37l0.93,0.02l0.06,0.68l0.53,0.47l0.52,-0.27l0.35,-1.76l0.14,0.42l0.83,-0.15l1.11,1.48l1.31,-0.61l1.65,-1.48l0.98,-1.56l0.63,0.78l0.73,0.14l0.44,-0.23l-0.06,-0.86l1.56,-0.55l0.35,-0.94l-0.33,-1.27l0.22,-1.19l-0.18,-1.36l0.83,0.2l0.3,-0.92l-0.19,-0.75l-0.72,-0.63l0.89,-1.13l0.07,-1.75l1.24,-1.24l0.61,-1.37l1.61,-0.49l0.78,-1.16l-0.45,-0.66l-0.51,-0.02l-0.86,-1.3l0.16,-2.09l-0.26,-0.87l0.49,-0.79l0.06,-0.84l-1.15,-1.73l-0.63,-0.4l-0.17,-0.64l0.18,-0.5l0.59,0.23l0.53,-0.33l0.24,-1.8l0.79,-0.24l0.3,-1.0l-0.61,-2.32l0.44,-0.53l-0.03,-0.86l-0.96,-0.88l-0.95,0.3l-1.09,-2.66l0.93,-1.83l41.31,9.4l38.96,7.65l-9.66,54.39l-0.47,1.02l1.04,3.0l0.13,2.0l-1.0,1.3l0.73,1.88l-31.18,-5.92l-1.67,0.79l-7.24,-1.02l-1.68,0.92l-4.19,-0.12l-3.18,0.45l-1.64,0.75l-0.88,-0.26l-1.2,0.3l-1.51,-0.23l-2.43,-0.94l-0.91,0.46l-3.45,0.51l-2.11,-0.71l-1.65,0.3l-0.31,-1.36l-1.09,-0.88l-4.34,-1.46l-2.32,-0.11l-1.15,-0.51l-1.27,0.21l-1.89,0.86l-4.5,0.58l-1.11,-0.71l-1.15,-0.3l-1.61,-1.15l-1.84,-0.51l-0.63,-0.81l0.64,-6.82l-0.47,-0.95l-0.22,-1.9l-0.98,-1.35l-1.96,-1.67l-2.82,-0.11l-1.03,-1.31l-0.15,-1.05l-0.56,-0.63l-2.36,-0.31l-0.56,-0.3l-0.24,-0.79l-0.5,-0.18l-0.97,0.35l-0.84,-0.26l-1.1,0.4l-0.97,-1.47l-0.89,-0.22ZM61.85,39.78l0.16,0.74l-0.42,0.49l0.0,-0.91l0.26,-0.31ZM71.27,20.38l-0.61,0.87l-0.15,0.52l0.11,-1.01l0.65,-0.38ZM71.14,15.62l-0.09,-0.05l0.05,-0.04l0.04,0.1ZM70.37,15.48l-0.77,0.39l0.37,-0.68l-0.07,-0.6l0.22,-0.07l0.25,0.97ZM57.56,42.45l0.05,-0.02l-0.01,0.01l-0.04,0.02ZM67.75,19.23l1.73,-2.1l0.47,-0.02l0.53,1.71l-0.35,-0.55l-0.51,-0.12l-0.55,0.44l-0.35,-0.09l-0.35,0.73l-0.63,-0.01ZM67.87,20.4l0.44,0.0l0.61,0.5l0.08,0.35l-0.79,-0.2l-0.33,-0.65ZM68.84,23.16l-0.1,0.51l-0.0,0.0l-0.02,-0.24l0.12,-0.28ZM69.15,25.42l0.08,0.04l0.12,-0.04l-0.16,0.11l-0.05,-0.1ZM69.52,25.33l0.48,-0.93l1.02,1.21l0.11,1.12l-0.34,0.36l-0.34,-0.09l-0.27,-1.55l-0.67,-0.12ZM66.34,9.97l0.48,-0.34l0.18,1.51l-0.22,-0.05l-0.44,-1.12ZM68.04,9.66l0.83,0.8l-0.65,0.31l-0.18,-1.11ZM66.69,38.03l0.34,-1.07l0.21,-0.25l-0.03,1.07l-0.52,0.26ZM66.99,33.31l0.1,-1.04l0.35,-0.34l-0.23,1.56l-0.22,-0.18ZM66.51,14.27l-0.41,-0.4l0.6,-0.75l-0.18,0.61l-0.01,0.55ZM66.68,14.62l0.4,0.2l-0.08,0.12l-0.29,-0.12l-0.03,-0.2ZM66.74,12.96l-0.01,-0.1l0.05,-0.12l-0.04,0.23ZM64.36,13.12l-1.06,-0.82l0.19,-1.81l1.33,1.92l-0.35,0.18l-0.11,0.54ZM62.18,42.55l0.23,-0.25l0.02,0.01l-0.13,0.31l-0.12,-0.07ZM60.04,40.3l-0.09,-0.19l0.04,-0.07l0.0,0.13l0.05,0.14Z", "name": "Washington" }, "US-KS": { "path": "M477.9,239.67l0.44,0.63l0.76,0.18l1.04,0.8l2.19,-1.08l-0.0,0.75l1.08,0.79l0.23,1.44l-0.95,-0.15l-0.6,0.31l-0.17,0.97l-1.14,1.37l-0.06,1.14l-0.79,0.5l0.04,0.64l1.56,2.1l2.0,1.49l0.2,1.13l0.42,0.86l0.74,0.56l0.32,1.11l1.89,0.91l1.54,0.26l2.67,46.82l-31.55,1.48l-31.97,0.88l-31.98,0.26l-32.05,-0.37l1.21,-65.47l27.9,0.35l27.86,-0.14l27.85,-0.64l27.68,-1.12l1.65,1.23Z", "name": "Kansas" }, "US-WI": { "path": "M598.7,107.43l0.83,-0.15l-0.13,0.81l-0.56,0.01l-0.14,-0.68ZM594.22,116.05l0.47,-0.41l0.26,-2.36l0.95,-0.25l0.64,-0.69l0.22,-1.4l0.41,-0.63l0.63,-0.03l0.06,0.38l-0.76,0.06l-0.18,0.51l0.17,1.27l-0.38,0.17l-0.11,0.58l0.56,0.57l-0.24,0.65l-0.5,0.33l-0.69,1.91l0.07,1.23l-1.05,2.28l-0.41,0.15l-0.86,-0.97l-0.19,-0.72l0.31,-1.57l0.62,-1.05ZM510.06,124.08l0.41,-0.27l0.28,-0.9l-0.45,-1.48l0.04,-1.91l0.7,-1.16l0.53,-2.25l-1.61,-2.91l-0.83,-0.36l-1.28,-0.01l-0.21,-2.31l1.67,-2.26l-0.05,-0.77l0.77,-1.55l1.95,-1.09l0.48,-0.75l0.97,-0.25l0.45,-0.75l1.16,-0.14l1.04,-1.56l-0.97,-12.11l1.03,-0.35l0.22,-1.1l0.73,-0.97l0.78,0.69l1.68,0.64l2.61,-0.56l3.28,-1.57l2.65,-0.82l2.21,-2.12l0.31,0.29l1.39,-0.11l1.25,-1.48l0.79,-0.58l1.04,-0.1l0.4,-0.52l1.07,0.99l-0.48,1.68l-0.67,1.01l0.23,1.61l-1.21,2.21l0.64,0.66l2.5,-1.09l0.72,-0.86l2.16,1.22l2.34,0.47l0.44,0.54l0.86,-0.13l1.6,0.7l2.23,3.54l15.48,2.52l4.65,1.96l1.68,-0.17l1.63,0.42l1.33,-0.59l3.17,0.71l2.18,0.09l0.85,0.41l0.56,0.89l-0.42,1.09l0.41,0.77l3.4,0.63l1.41,1.13l-0.16,0.71l0.59,1.11l-0.36,0.81l0.43,1.25l-0.78,1.25l-0.03,1.76l0.91,0.63l1.38,-0.26l1.02,-0.72l0.2,0.26l-0.79,2.44l0.04,1.31l1.32,1.46l0.84,0.35l-0.24,2.02l-2.42,1.2l-0.51,0.79l0.04,1.26l-1.61,3.49l-0.4,3.5l1.11,0.82l0.92,-0.04l0.5,-0.36l0.49,-1.37l1.82,-1.47l0.66,-2.53l1.06,-1.7l0.14,0.25l0.45,-0.07l0.57,-0.7l0.88,-0.4l1.12,1.12l0.59,0.19l-0.29,2.21l-1.18,2.82l-0.56,5.58l0.23,1.11l0.8,0.93l0.07,0.52l-0.51,0.98l-1.3,1.34l-0.86,3.89l0.15,2.57l0.72,1.2l0.06,1.24l-1.07,3.22l0.12,2.12l-0.73,2.11l-0.28,2.47l0.59,2.02l-0.04,1.32l0.49,0.54l-0.21,1.7l0.92,0.78l0.54,2.43l1.2,1.54l0.08,1.69l-0.33,1.45l0.47,2.95l-44.2,4.6l-0.19,-0.79l-1.56,-2.19l-4.94,-0.84l-1.06,-1.35l-0.36,-1.69l-0.9,-1.21l-0.86,-4.9l1.04,-2.62l-0.09,-0.99l-0.71,-0.79l-1.44,-0.48l-0.71,-1.76l-0.47,-6.02l-0.7,-1.4l-0.52,-2.56l-1.15,-0.6l-1.1,-1.56l-0.93,-0.11l-1.17,-0.75l-1.71,0.09l-2.67,-1.79l-2.3,-3.5l-2.64,-2.1l-2.94,-0.53l-0.73,-1.24l-1.12,-1.0l-3.12,-0.45l-3.53,-2.74l0.45,-1.24l-0.12,-1.61l0.25,-0.81l-0.88,-3.11ZM541.58,78.25l0.05,-0.28l0.03,0.16l-0.08,0.12ZM537.91,83.72l0.28,-0.21l0.05,0.08l-0.33,0.12Z", "name": "Wisconsin" }, "US-OR": { "path": "M10.69,140.12l0.01,-1.77l0.5,-0.84l0.32,-1.95l1.12,-1.91l0.24,-1.9l-0.72,-2.57l-0.33,-0.15l-0.12,-1.81l3.04,-3.82l2.5,-5.98l0.01,0.77l0.52,0.52l0.49,-0.28l0.6,-1.6l0.47,-0.48l0.31,0.98l1.12,0.41l0.33,-0.54l-0.45,-1.76l0.27,-0.87l-0.45,-0.14l-0.79,0.32l1.74,-3.16l1.13,-0.96l0.89,0.3l0.49,-0.29l-0.47,-1.08l-0.81,-0.4l1.77,-4.63l0.47,-0.57l0.02,-0.99l1.08,-2.67l0.62,-2.6l1.04,-1.92l0.33,0.28l0.66,-0.33l-0.04,-0.6l-0.76,-0.62l1.06,-2.6l0.32,0.22l0.59,-0.19l0.13,-0.35l-0.04,-0.51l-0.57,-0.32l0.85,-3.84l1.23,-1.8l0.83,-3.04l1.14,-1.76l0.83,-2.45l0.26,-1.21l-0.18,-0.5l1.19,-1.08l-0.32,-1.64l0.96,0.57l0.78,-0.63l-0.39,-0.75l0.2,-0.65l-0.77,-0.77l0.51,-1.07l1.3,-0.86l0.06,-0.46l-0.93,-0.34l-0.33,-1.25l0.97,-2.14l-0.04,-1.48l0.86,-0.53l0.58,-1.33l0.18,-1.96l-0.21,-1.45l0.83,1.17l0.6,0.18l-0.11,0.89l0.55,0.53l0.83,-0.96l-0.27,-0.99l0.21,-0.07l0.24,0.56l0.69,0.32l1.51,0.04l0.37,-0.36l1.37,-0.19l0.99,2.08l2.43,0.92l1.25,-0.64l0.78,0.04l1.72,1.51l0.77,1.04l0.21,1.9l0.43,0.78l-0.03,2.05l-0.39,1.24l0.19,0.93l-0.43,1.74l0.26,1.45l0.79,0.85l1.94,0.56l1.44,1.05l1.36,0.41l1.04,0.69l4.98,-0.53l2.9,-1.06l1.14,0.51l2.23,0.09l4.24,1.43l0.69,0.54l0.19,1.15l0.57,0.58l1.86,-0.27l2.11,0.71l3.79,-0.55l0.69,-0.42l2.19,0.93l1.64,0.24l1.2,-0.3l0.88,0.26l1.89,-0.78l3.07,-0.43l4.16,0.13l1.61,-0.91l7.17,1.02l0.96,-0.19l0.79,-0.58l31.27,5.93l0.23,1.81l0.93,1.82l1.16,0.63l1.96,1.86l0.57,2.45l-0.16,1.0l-3.69,4.55l-0.4,1.41l-1.39,2.63l-2.21,2.42l-0.65,2.68l-1.49,1.84l-2.23,1.5l-1.92,3.35l-1.49,1.27l-0.62,2.02l-0.12,1.87l0.28,0.92l0.56,0.61l0.54,0.04l0.39,-0.35l0.63,0.76l0.89,-0.05l0.07,0.88l0.81,0.95l-0.46,1.0l-0.65,0.06l-0.33,0.4l0.21,1.8l-1.03,2.56l-1.22,1.41l-6.86,39.16l-26.21,-4.99l-28.9,-6.05l-28.8,-6.61l-28.95,-7.24l-1.48,-2.59l0.2,-2.36l-0.23,-0.89Z", "name": "Oregon" }, "US-KY": { "path": "M583.02,306.59l0.35,-2.18l1.13,0.96l0.72,0.2l0.75,-0.36l0.46,-0.88l0.87,-3.55l-0.54,-1.75l0.38,-0.86l-0.1,-1.88l-1.27,-2.04l1.79,-3.21l1.24,-0.51l0.73,0.06l7.03,2.56l0.81,-0.2l0.65,-0.72l0.24,-1.93l-1.49,-2.14l-0.24,-1.44l0.2,-0.87l0.4,-0.52l1.1,-0.18l1.24,-0.83l3.0,-0.95l0.64,-0.51l0.15,-1.13l-1.53,-2.05l-0.08,-0.68l1.33,-1.97l0.14,-1.16l1.25,0.42l1.12,-1.33l-0.68,-2.0l1.92,0.9l1.72,-0.84l0.03,1.18l1.0,0.46l0.99,-0.94l0.02,-1.36l0.51,0.16l1.9,-0.96l4.41,1.52l0.64,0.94l0.86,0.18l0.59,-0.59l0.73,-2.53l1.38,-0.55l1.39,-1.34l0.86,1.29l0.77,0.42l1.16,-0.13l0.11,0.75l0.95,0.19l0.67,-0.62l0.03,-1.01l0.84,-0.38l0.26,-0.48l-0.25,-2.09l0.84,-0.4l0.34,-0.56l-0.06,-0.69l1.25,-0.56l0.34,-0.72l0.38,1.47l0.61,0.6l1.46,0.64l1.25,-0.0l1.11,0.81l0.53,-0.11l0.26,-0.55l1.1,-0.46l0.53,-0.69l0.04,-3.48l0.85,-2.18l1.02,0.18l1.55,-1.19l0.75,-3.46l1.04,-0.37l1.65,-2.23l0.0,-0.81l-1.18,-2.88l2.78,-0.59l1.54,0.81l3.85,-2.82l2.23,-0.46l-0.18,-1.07l0.36,-1.47l-0.32,-0.36l-1.22,-0.04l0.58,-1.39l-1.09,-1.54l1.65,-1.83l1.81,1.18l0.92,-0.11l1.93,-1.01l0.78,0.88l1.76,0.54l0.57,1.28l0.94,0.92l0.79,1.84l2.6,0.67l1.87,-0.57l1.63,0.27l2.18,1.85l0.96,0.43l1.28,-0.18l0.61,-1.31l0.99,-0.54l1.35,0.5l1.34,0.04l1.33,1.09l1.26,-0.69l1.41,-0.15l1.81,-2.55l1.72,-1.03l0.92,2.35l0.7,0.83l2.45,0.81l1.35,0.97l0.75,1.05l0.93,3.35l-0.37,0.45l0.09,0.72l-0.44,0.61l0.02,0.53l2.24,2.62l1.35,0.92l-0.08,0.89l1.34,0.97l0.58,1.36l1.55,1.2l0.98,1.62l2.14,0.84l1.09,1.12l2.14,0.25l-4.86,6.13l-5.06,4.16l-0.42,0.86l0.22,1.25l-2.07,1.93l0.04,1.64l-3.06,1.63l-0.8,2.38l-1.71,0.6l-2.7,1.83l-1.66,0.48l-3.39,2.42l-23.95,3.09l-8.8,1.42l-7.47,0.86l-7.68,0.46l-22.71,3.52l-0.64,-0.56l-3.63,0.09l-0.41,0.6l1.03,3.57l-23.0,2.73ZM580.9,306.78l-0.59,0.08l-0.06,-0.55l0.47,-0.01l0.18,0.49Z", "name": "Kentucky" }, "US-CO": { "path": "M364.18,239.57l-1.22,65.87l-29.29,-0.9l-29.38,-1.43l-29.35,-1.95l-32.17,-2.75l8.33,-87.15l27.79,2.4l28.23,1.92l29.58,1.46l27.95,0.87l-0.46,21.66Z", "name": "Colorado" }, "US-OH": { "path": "M664.99,178.81l1.67,0.47l1.04,-0.3l1.74,1.07l2.07,0.26l1.47,1.18l1.71,0.23l-2.19,1.18l-0.12,0.47l0.42,0.24l2.46,0.19l1.39,-1.1l1.77,-0.25l3.39,0.96l0.92,-0.08l1.48,-1.29l1.74,-0.6l1.15,-0.96l1.91,-0.97l2.62,-0.03l1.09,-0.62l1.24,-0.06l1.07,-0.8l4.24,-5.46l4.53,-3.47l6.92,-4.36l5.83,28.05l-0.51,0.54l-1.28,0.43l-0.41,0.95l1.65,2.24l0.02,2.11l0.41,0.26l0.31,0.94l-0.04,0.76l-0.54,0.83l-0.5,4.08l0.18,3.21l-0.58,0.41l0.34,1.11l-0.35,1.74l-0.39,0.54l0.76,1.23l-0.25,1.87l-2.41,2.65l-0.82,1.86l-1.37,1.5l-1.24,0.67l-0.6,0.7l-0.87,-0.92l-1.18,0.14l-1.32,1.74l-0.09,1.32l-1.78,0.85l-0.78,2.25l0.28,1.58l-0.94,0.85l0.3,0.67l0.63,0.41l0.27,1.3l-0.8,0.17l-0.5,1.6l0.06,-0.93l-0.91,-1.26l-1.53,-0.55l-1.07,0.71l-0.82,1.98l-0.34,2.69l-0.53,0.82l1.22,3.58l-1.27,0.39l-0.28,0.42l-0.25,3.12l-2.66,1.2l-1.0,0.05l-0.76,-1.06l-1.51,-1.1l-2.34,-0.73l-1.17,-1.92l-0.31,-1.14l-0.42,-0.33l-0.73,0.13l-1.84,1.17l-1.1,1.29l-0.4,1.05l-1.43,0.15l-0.87,0.61l-1.11,-1.0l-3.14,-0.59l-1.37,0.72l-0.53,1.25l-0.71,0.05l-3.04,-2.26l-1.93,-0.29l-1.77,0.56l-2.14,-0.52l-0.55,-1.54l-0.96,-0.97l-0.63,-1.38l-2.03,-0.76l-1.14,-1.01l-0.97,0.26l-1.31,0.89l-0.46,0.03l-1.79,-1.23l-0.61,0.2l-0.6,0.71l-8.53,-55.69l20.43,-4.26ZM675.61,181.34l0.53,-0.79l0.67,0.41l-0.48,0.35l-0.72,0.03ZM677.31,180.77l0.01,-0.0l0.01,-0.0l-0.02,0.0Z", "name": "Ohio" }, "US-OK": { "path": "M399.06,359.31l-0.05,-42.03l-0.39,-0.4l-26.69,-0.22l-25.13,-0.6l0.31,-10.23l36.7,0.74l36.0,-0.07l35.99,-0.86l35.56,-1.62l0.6,10.68l4.55,24.34l1.41,37.88l-1.2,-0.22l-0.29,-0.36l-2.13,-0.21l-0.82,-0.79l-2.11,-0.39l-1.77,-2.05l-1.23,-0.22l-2.25,-1.57l-1.5,-0.4l-0.8,0.46l-0.23,0.88l-0.82,0.24l-0.46,0.62l-2.47,-0.14l-0.47,-0.19l-0.27,-0.68l-1.05,-0.61l-2.3,1.29l-1.17,0.2l-0.19,0.56l-0.63,0.28l-2.12,-0.77l-1.7,1.18l-1.17,0.08l-0.89,0.42l-0.83,1.37l-1.48,0.06l-0.57,1.25l-1.26,-1.55l-1.7,-0.1l-0.32,-0.58l-1.21,-0.46l-0.02,-0.96l-0.44,-0.5l-1.24,-0.18l-0.73,1.38l-0.66,0.11l-0.84,-0.5l-0.97,0.07l-0.71,-1.51l-1.09,-0.35l-1.17,0.57l-0.45,1.7l-0.7,-0.08l-0.49,0.43l0.29,0.73l-0.51,1.68l-0.43,0.19l-0.55,-0.55l-0.3,-0.91l0.39,-1.65l-0.75,-0.86l-0.8,0.18l-0.49,0.76l-0.84,-0.18l-0.92,0.98l-1.07,0.13l-0.53,-1.36l-1.99,-0.19l-0.3,-1.48l-1.19,-0.53l-0.82,0.33l-2.12,2.15l-1.21,0.51l-0.97,-0.38l0.19,-1.25l-0.28,-1.13l-2.33,-0.68l-0.07,-2.18l-0.43,-0.55l-2.11,0.39l-2.52,-0.25l-0.64,0.26l-0.81,1.21l-0.95,0.06l-1.77,-1.77l-0.97,-0.12l-1.5,0.56l-2.68,-0.63l-1.86,-1.0l-1.05,0.25l-2.46,-0.3l-0.17,-2.12l-0.85,-0.87l-0.44,-1.02l-1.16,-0.41l-0.7,-0.83l-0.83,0.08l-0.44,1.64l-2.22,-0.68l-1.07,0.6l-0.96,-0.09l-3.79,-3.78l-1.12,-0.43l-0.8,0.08Z", "name": "Oklahoma" }, "US-WV": { "path": "M693.03,248.42l3.95,-1.54l0.35,-0.71l0.12,-2.77l1.15,-0.22l0.4,-0.61l-0.57,-2.49l-0.61,-1.24l0.49,-0.64l0.36,-2.77l0.68,-1.66l0.45,-0.39l1.24,0.55l0.41,0.71l-0.14,1.13l0.71,0.46l0.78,-0.44l0.48,-1.42l0.49,0.21l0.57,-0.2l0.2,-0.44l-0.63,-2.09l-0.75,-0.55l0.81,-0.79l-0.26,-1.71l0.74,-2.0l1.65,-0.51l0.17,-1.6l1.02,-1.42l0.43,-0.08l0.65,0.79l0.67,0.19l2.28,-1.59l1.5,-1.64l0.79,-1.83l2.45,-2.67l0.37,-2.41l-0.73,-1.0l0.71,-2.33l-0.25,-0.76l0.59,-0.58l-0.27,-3.43l0.47,-3.93l0.53,-0.8l0.08,-1.11l-0.38,-1.21l-0.39,-0.33l-0.04,-2.01l-1.57,-1.91l0.44,-0.54l0.85,-0.1l0.3,-0.33l4.03,19.34l0.47,0.31l16.6,-3.55l2.17,10.68l0.5,0.37l2.06,-2.5l0.97,-0.56l0.34,-1.03l1.63,-1.99l0.25,-1.05l0.52,-0.4l1.19,0.45l0.74,-0.32l1.32,-2.6l0.6,-0.46l-0.04,-0.85l0.42,0.59l1.81,0.52l3.2,-0.57l0.78,-0.86l0.07,-1.46l2.0,-0.74l1.02,-1.69l0.67,-0.1l3.16,1.5l1.81,-0.71l-0.45,1.02l0.56,0.92l1.27,0.42l0.09,0.96l1.13,0.43l0.09,1.2l0.33,0.42l-0.58,3.64l-9.0,-4.48l-0.64,0.24l-0.31,1.14l0.38,1.61l-0.52,1.62l0.41,2.28l-1.36,2.4l-0.42,1.76l-0.72,0.53l-0.42,1.11l-0.27,0.21l-0.61,-0.23l-0.37,0.33l-1.25,3.28l-1.84,-0.78l-0.64,0.25l-0.94,2.77l0.08,1.47l-0.73,1.14l-0.19,2.33l-0.89,2.2l-3.25,-0.36l-1.44,-1.76l-1.71,-0.24l-0.5,0.41l-0.26,2.17l0.19,1.3l-0.32,1.45l-0.49,0.45l-0.31,1.04l0.23,0.92l-1.58,2.44l-0.04,2.1l-0.52,2.0l-2.58,4.73l-0.75,3.16l0.14,0.76l1.14,0.55l-1.08,1.38l0.06,0.6l0.45,0.4l-2.16,2.13l-0.55,-0.7l-0.84,0.15l-3.12,2.53l-1.03,-0.56l-1.32,0.26l-0.44,0.91l0.45,1.17l-0.91,0.91l-0.73,-0.05l-2.27,1.0l-1.21,0.96l-2.18,-1.36l-0.73,-0.01l-0.82,1.58l-1.1,0.49l-1.22,1.46l-1.08,0.08l-1.98,-1.09l-1.31,-0.01l-0.61,-0.74l-1.19,-0.6l-0.31,-1.33l-0.89,-0.55l0.36,-0.67l-0.3,-0.81l-0.85,-0.37l-0.84,0.25l-1.33,-0.17l-1.26,-1.19l-2.06,-0.79l-0.76,-1.43l-1.58,-1.24l-0.7,-1.49l-1.0,-0.6l-0.12,-1.09l-1.38,-0.95l-2.0,-2.27l0.71,-2.03l-0.25,-1.62l-0.66,-1.46Z", "name": "West Virginia" }, "US-WY": { "path": "M218.53,207.02l10.1,-86.6l25.46,2.74l26.8,2.4l26.83,1.91l27.85,1.46l-3.67,87.11l-27.32,-1.41l-28.21,-1.97l-29.69,-2.63l-28.14,-3.02Z", "name": "Wyoming" }, "US-UT": { "path": "M178.67,180.38l41.53,5.44l-2.51,21.5l0.35,0.45l32.24,3.43l-8.33,87.15l-42.54,-4.67l-42.41,-5.77l16.08,-108.34l5.58,0.82ZM187.74,191.46l-0.3,0.04l-0.25,0.62l0.74,3.68l-0.81,0.19l-0.5,1.31l1.15,0.59l0.35,-0.84l0.37,-0.18l0.92,1.14l0.83,1.68l-0.25,1.0l0.16,1.45l-0.4,0.77l0.4,0.52l-0.05,0.56l1.58,1.84l0.02,0.59l1.13,1.92l0.71,-0.1l0.83,-1.74l0.08,2.28l0.53,0.94l0.06,1.8l0.99,0.47l1.65,-0.67l2.48,-1.77l0.37,-1.25l3.32,-1.44l0.17,-0.54l-0.52,-1.02l-0.68,-0.84l-1.36,-0.7l-1.87,-4.59l-0.87,-0.46l0.87,-0.92l1.3,0.6l1.33,-0.15l0.92,-0.83l-0.06,-1.12l-1.55,-0.5l-0.81,0.42l-1.17,-0.12l0.27,-0.76l-0.58,-0.79l-1.86,-0.22l-0.56,1.13l0.28,0.78l-0.35,0.69l0.55,2.44l-0.91,0.32l-0.34,-0.42l0.22,-1.8l-0.42,-0.69l-0.06,-1.74l-0.68,-0.6l-1.32,-0.11l-1.07,-1.55l-0.19,-0.69l0.64,-0.55l0.36,-1.29l-0.83,-1.38l-1.23,-0.28l-0.99,0.81l-2.73,0.2l-0.35,0.63l0.62,0.83l-0.28,0.43ZM199.13,204.0l0.03,0.02l0.04,0.11l-0.07,-0.13ZM199.17,204.81l0.31,0.91l-0.18,0.9l-0.39,-0.93l0.25,-0.88Z", "name": "Utah" }, "US-IN": { "path": "M600.86,189.63l1.43,0.87l2.1,0.14l1.52,-0.38l2.63,-1.39l2.73,-2.1l32.3,-4.83l8.81,57.45l-0.66,1.15l0.3,0.92l0.81,0.79l-0.66,1.14l0.49,0.8l1.12,0.04l-0.36,1.14l0.18,0.51l-1.81,0.29l-3.18,2.55l-0.43,0.17l-1.4,-0.81l-3.46,0.91l-0.09,0.78l1.19,3.1l-1.4,1.88l-1.18,0.49l-0.45,0.89l-0.31,2.6l-1.11,0.88l-1.06,-0.24l-0.47,0.47l-0.85,1.95l0.05,3.14l-0.39,1.0l-1.38,0.85l-0.93,-0.68l-1.24,0.01l-1.48,-0.69l-0.62,-1.84l-1.89,-0.73l-0.44,0.3l-0.04,0.5l0.83,0.68l-0.62,0.31l-0.89,-0.35l-0.36,0.29l-0.04,0.48l0.54,0.93l-1.08,0.68l0.14,2.37l-1.06,0.65l-0.0,0.83l-0.16,0.37l0.08,-0.5l-0.33,-0.51l-1.6,0.18l-1.4,-1.69l-0.5,-0.08l-1.67,1.5l-1.57,0.69l-1.07,2.89l-0.81,-1.07l-2.79,-0.77l-1.11,-0.61l-1.08,-0.18l-1.76,0.92l-0.64,-1.02l-0.58,-0.18l-0.53,0.56l0.64,1.86l-0.34,0.84l-0.28,0.09l-0.02,-1.18l-0.42,-0.4l-0.58,0.01l-1.46,0.79l-1.41,-0.84l-0.85,0.0l-0.48,0.95l0.71,1.55l-0.49,0.74l-1.15,-0.39l-0.07,-0.54l-0.53,-0.44l0.55,-0.63l-0.35,-3.09l0.96,-0.78l-0.07,-0.58l-0.44,-0.23l0.69,-0.46l0.25,-0.61l-1.17,-1.47l0.46,-1.16l0.32,0.19l1.39,-0.55l0.33,-1.8l0.55,-0.4l0.44,-0.92l-0.06,-0.83l1.52,-1.07l0.06,-0.69l-0.41,-0.93l0.57,-0.86l0.14,-1.29l0.87,-0.51l0.4,-1.91l-1.08,-2.54l0.22,-0.8l-0.16,-1.11l-0.93,-0.91l-0.61,-1.5l-1.05,-0.78l-0.04,-0.59l0.92,-1.39l-0.63,-2.25l1.27,-1.31l-6.5,-50.68Z", "name": "Indiana" }, "US-IL": { "path": "M540.07,225.55l0.86,-0.35l0.37,-0.67l-0.23,-2.33l-0.73,-0.93l0.15,-0.41l0.72,-0.69l2.42,-0.98l0.71,-0.65l0.63,-1.68l0.17,-2.11l1.65,-2.47l0.27,-0.94l-0.03,-1.22l-0.59,-1.95l-2.23,-1.88l-0.11,-1.77l0.67,-2.38l0.45,-0.37l4.6,-0.85l0.81,-0.41l0.82,-1.12l2.55,-1.0l1.43,-1.56l-0.01,-1.57l0.4,-1.71l1.42,-1.46l0.29,-0.74l0.33,-4.37l-0.76,-2.14l-4.02,-2.47l-0.28,-1.5l-0.48,-0.82l-3.64,-2.48l44.58,-4.64l-0.01,2.66l0.57,2.59l1.37,2.49l1.31,0.95l0.76,2.6l1.26,2.71l1.42,1.84l6.6,51.49l-1.22,1.13l-0.1,0.69l0.67,1.76l-0.84,1.09l-0.03,1.11l1.19,1.09l0.56,1.41l0.89,0.82l-0.1,1.8l1.06,2.31l-0.28,1.49l-0.87,0.56l-0.21,1.47l-0.59,0.93l0.34,1.2l-1.48,1.13l-0.23,0.41l0.28,0.7l-0.93,1.17l-0.31,1.19l-1.64,0.67l-0.63,1.67l0.15,0.8l0.97,0.83l-1.27,1.15l0.42,0.76l-0.49,0.23l-0.13,0.54l0.43,2.94l-1.15,0.19l0.08,0.45l0.92,0.78l-0.48,0.17l-0.03,0.64l0.83,0.29l0.04,0.42l-1.31,1.97l-0.25,1.19l0.59,1.22l0.7,0.64l0.37,1.08l-3.31,1.22l-1.19,0.82l-1.24,0.24l-0.77,1.01l-0.18,2.04l0.3,0.88l1.4,1.93l0.07,0.54l-0.53,1.19l-0.96,0.03l-6.3,-2.43l-1.08,-0.08l-1.57,0.64l-0.68,0.72l-1.44,2.95l0.06,0.66l-1.18,-1.2l-0.79,0.14l-0.35,0.47l0.59,1.13l-1.24,-0.79l-0.01,-0.68l-1.6,-2.21l-0.4,-1.12l-0.76,-0.37l-0.05,-0.49l0.94,-1.35l0.2,-1.03l-0.32,-1.01l-1.44,-2.02l-0.47,-3.18l-2.26,-0.99l-1.55,-2.14l-1.95,-0.82l-1.72,-1.34l-1.56,-0.14l-1.82,-0.96l-2.32,-1.78l-2.34,-2.44l-0.36,-1.95l2.37,-6.85l-0.25,-2.32l0.98,-2.06l-0.38,-0.84l-2.66,-1.45l-2.59,-0.67l-1.29,0.45l-0.86,1.45l-0.46,0.28l-0.44,-0.13l-1.3,-1.9l-0.43,-1.52l0.16,-0.87l-0.54,-0.91l-0.29,-1.65l-0.83,-1.36l-0.94,-0.9l-4.11,-2.52l-1.01,-1.64l-4.53,-3.53l-0.73,-1.9l-1.04,-1.21l-0.04,-1.6l-0.96,-1.48l-0.75,-3.54l0.1,-2.94l0.6,-1.28ZM585.52,295.52l0.05,0.05l0.04,0.04l-0.05,-0.0l-0.04,-0.09Z", "name": "Illinois" }, "US-AK": { "path": "M89.36,517.03l0.84,0.08l0.09,0.36l-0.3,0.32l-0.64,0.3l-0.15,-0.15l0.25,-0.4l-0.12,-0.31l0.04,-0.2ZM91.79,517.2l0.42,-0.02l0.19,-0.11l0.26,-0.56l1.74,-0.37l2.26,0.07l1.57,0.63l0.84,0.69l0.02,1.85l0.32,0.18l0.0,0.34l0.25,0.27l-0.35,0.09l-0.25,-0.16l-0.23,0.08l-0.41,-0.33l-0.29,-0.04l-0.69,0.23l-0.91,-0.21l-0.07,-0.26l-0.24,-0.17l0.27,-0.21l0.74,0.72l0.46,-0.02l0.2,-0.48l-0.28,-0.44l-0.03,-0.3l-0.31,-0.67l-0.96,-0.52l-1.05,0.27l-0.57,0.69l-1.04,0.3l-0.44,-0.3l-0.48,0.12l-0.06,0.12l-0.63,-0.14l-0.26,0.06l-0.22,0.24l0.2,-0.3l-0.1,-0.55l0.12,-0.79ZM99.83,520.19l0.3,-0.07l0.29,-0.28l-0.03,-0.55l0.31,0.2l-0.06,0.45l0.83,0.92l-0.93,-0.51l-0.44,0.41l-0.13,-0.54l-0.13,-0.04ZM100.07,520.81l0.0,0.04l-0.03,0.0l0.02,-0.04ZM102.01,520.78l0.05,-0.34l0.33,-0.2l0.01,-0.12l-0.58,-1.24l0.1,-0.2l0.59,-0.24l0.29,-0.3l0.65,-0.34l0.62,-0.01l0.41,-0.13l0.81,0.1l1.42,-0.06l0.64,0.15l0.49,0.27l0.88,0.11l0.27,0.15l0.23,-0.22l0.27,-0.05l0.39,0.09l0.2,0.21l0.26,-0.05l0.2,0.38l0.44,0.31l0.1,0.23l0.7,-0.06l0.3,-0.77l0.44,-0.61l0.47,-0.21l1.78,-0.45l0.5,0.04l0.37,0.23l1.13,-0.38l0.66,0.04l-0.11,0.41l0.43,0.51l0.42,0.26l0.62,0.06l0.42,-0.43l0.14,-0.42l-0.34,-0.29l-0.31,-0.03l0.15,-0.44l-0.15,-0.38l1.04,-1.0l0.83,-0.99l0.12,-0.08l0.34,0.17l0.38,-0.02l0.32,0.3l0.19,0.37l0.66,-0.29l-0.1,-0.57l-0.43,-0.58l-0.46,-0.24l0.15,-0.44l0.77,-0.47l0.36,0.04l0.68,-0.2l0.8,-0.08l0.58,0.18l0.45,-0.16l-0.12,-0.52l0.66,-0.6l0.4,0.06l0.26,-0.11l0.43,-0.52l0.34,-0.12l0.23,-0.46l-0.42,-0.3l-0.38,0.03l-0.33,0.15l-0.36,0.39l-0.51,-0.09l-0.5,0.27l-2.19,-0.52l-1.69,-0.24l-0.71,-0.26l-0.12,-0.2l0.17,-0.32l0.04,-0.44l-0.28,-0.56l0.45,-0.35l0.43,-0.13l0.36,0.38l0.04,0.25l-0.15,0.44l0.07,0.39l0.56,0.12l0.32,-0.15l-0.03,-0.3l0.16,-0.35l-0.05,-0.75l-0.84,-1.05l0.01,-0.7l-0.67,-0.19l-0.19,0.24l-0.06,0.48l-0.41,0.22l-0.09,0.03l-0.26,-0.56l-0.34,-0.09l-0.51,0.41l-0.02,0.26l-0.15,0.15l-0.38,-0.02l-0.48,0.27l-0.24,0.54l-0.22,1.13l-0.13,0.32l-0.19,0.05l-0.31,-0.31l0.1,-2.67l-0.23,-0.99l0.19,-0.33l0.02,-0.27l-0.16,-0.29l-0.53,-0.27l-0.46,0.26l-0.1,-0.07l-0.35,0.13l-0.01,-0.54l-0.54,-0.61l0.19,-0.22l0.08,-0.65l-0.16,-0.37l-0.55,-0.26l-1.89,-0.01l-0.58,-0.34l-1.01,-0.12l-0.16,-0.12l-0.07,-0.22l-0.23,-0.07l-1.06,0.53l-0.75,-0.16l-0.12,-0.44l0.3,0.09l0.48,-0.08l0.31,-0.44l-0.21,-0.49l0.37,-0.49l0.83,0.04l0.43,-0.16l0.12,-0.35l-0.14,-0.42l-1.11,-0.64l0.09,-0.27l0.34,-0.17l0.38,-0.44l1.12,-0.0l0.23,-0.09l0.19,-0.32l0.03,-0.95l0.22,-0.54l0.07,-1.42l0.25,-0.45l-0.08,-0.58l0.07,-0.2l0.88,-0.74l0.02,-0.1l-0.09,-0.02l0.19,-0.16l-0.31,-0.35l-0.27,0.05l-0.04,-0.25l-0.09,-0.04l0.57,-0.22l0.33,-0.25l0.51,-0.1l0.24,-0.25l0.42,-0.0l0.19,0.18l0.41,0.08l0.29,-0.08l0.44,-0.55l-0.3,-0.34l-0.39,-0.07l-0.05,-0.33l-0.27,-0.31l-0.6,0.4l-0.43,-0.07l-1.12,0.62l-1.04,0.06l-0.34,0.18l-0.48,-0.03l-0.12,0.5l0.4,0.64l-0.26,0.19l-0.29,0.45l-0.19,-0.09l-0.17,-0.27l-0.76,-0.04l-1.16,-0.25l-0.81,-0.4l-1.05,-0.59l-0.78,-0.61l-0.52,-0.69l0.01,-0.21l0.6,-0.1l-0.06,-0.4l0.1,-0.24l-0.51,-1.06l0.1,-0.78l-0.18,-0.52l0.33,-0.54l-0.4,-0.34l-0.23,0.0l-0.44,-0.69l-0.01,-0.2l0.59,-0.14l0.3,-0.37l-0.05,-0.44l-0.36,-0.26l0.72,0.04l0.29,-0.13l0.18,-0.25l0.63,0.01l0.08,0.51l0.56,0.51l0.32,0.49l-0.03,0.09l-0.79,0.11l-0.53,0.51l0.31,0.45l0.94,-0.08l0.4,0.24l0.26,-0.01l0.39,-0.22l0.29,0.03l0.08,0.07l-0.51,0.6l-0.05,0.38l0.22,0.43l0.46,0.24l1.42,0.07l0.28,-0.17l0.16,-0.35l0.19,-0.08l-0.2,-0.74l0.35,-0.35l-0.02,-0.33l-0.18,-0.25l0.15,-0.43l-0.08,-0.13l-0.52,-0.26l-0.77,-0.01l-0.34,0.1l-1.51,-1.2l-0.01,-0.53l-0.35,-0.39l-0.26,-0.12l-0.15,-0.38l0.55,0.15l0.53,-0.4l-0.17,-0.41l-0.7,-0.51l0.4,-0.45l-0.14,-0.5l0.31,-0.15l0.27,0.08l0.44,-0.1l0.45,0.27l0.75,-0.04l0.67,-0.44l-0.08,-0.48l-0.18,-0.19l-0.48,-0.03l-0.51,0.16l-0.43,-0.19l-1.02,-0.02l-0.26,0.14l-0.44,0.04l-0.36,0.29l-0.62,0.09l-0.15,0.12l-0.15,0.42l-0.13,-0.19l0.27,-0.52l0.36,-0.24l-0.1,-0.44l-0.48,-0.6l0.03,-0.1l0.37,0.1l0.4,-0.18l0.16,-0.22l0.07,-0.36l-0.22,-0.6l0.55,0.23l0.42,-0.5l-0.44,-0.59l0.38,0.32l0.94,0.37l0.2,-0.44l0.14,0.01l-0.04,-0.54l0.12,-0.36l0.48,-0.28l0.49,0.01l1.96,-0.47l0.8,-0.03l0.3,0.25l-0.01,0.44l0.19,0.27l-0.27,0.16l0.13,0.47l0.35,0.15l0.74,0.01l0.29,-0.39l-0.13,-0.45l0.08,-0.34l1.21,-0.11l0.29,-0.63l-0.31,-0.24l-0.93,-0.04l0.03,-0.08l0.41,-0.03l0.15,-0.63l0.72,-0.27l0.86,0.88l0.32,0.11l0.38,-0.28l0.08,-0.27l-0.04,-0.41l-0.18,-0.26l0.34,0.0l0.69,0.32l0.35,0.31l0.54,0.81l-0.06,0.29l-0.38,-0.09l-0.52,0.21l-0.13,0.47l0.43,0.24l1.07,0.06l0.05,0.52l0.31,0.3l0.91,0.49l1.02,0.09l0.53,-0.18l0.41,0.17l0.49,-0.0l1.61,-0.32l0.1,0.49l1.67,0.97l0.28,0.31l0.53,0.32l1.06,0.37l1.81,-0.2l0.56,-0.21l0.47,-0.49l0.2,-0.57l0.15,-0.95l0.61,-1.1l0.01,-0.29l-0.24,-0.88l0.14,-0.05l-0.03,-0.19l0.58,0.25l0.2,-0.1l0.86,0.0l0.36,-0.17l0.41,-0.47l0.07,-0.93l-0.19,-0.43l0.22,-0.03l0.11,-0.44l-0.23,-0.32l-0.73,-0.39l-0.29,0.12l-0.43,-0.04l-0.52,0.2l-0.21,-0.12l-0.29,-0.6l-0.31,-0.29l-0.51,0.0l-0.02,0.1l-0.52,-0.04l-0.43,-0.31l-0.56,-0.02l-0.32,0.1l-1.04,-0.24l-0.48,0.03l-0.33,0.16l0.04,-0.42l-0.29,-0.71l-0.21,-0.97l-0.49,-0.23l-0.55,-0.08l-0.29,0.09l-0.47,-0.64l-0.48,-0.4l-0.5,-0.25l-1.14,-1.02l-0.95,-0.24l-0.2,-0.27l-0.49,-0.27l-0.11,-0.23l-0.63,-0.01l-0.04,0.13l-0.9,-1.22l-1.86,-2.14l-0.25,-0.55l-0.0,-0.32l0.07,-0.19l0.27,0.06l0.27,-0.13l0.35,-0.76l-0.41,-1.02l0.05,-0.11l0.4,0.19l0.51,-0.05l0.41,-0.17l0.51,0.66l0.43,0.23l0.48,-0.4l-0.02,-0.33l-0.32,-0.66l-0.48,-0.41l-0.46,-0.78l-0.84,-0.88l-0.12,-0.02l-0.98,-1.16l-0.33,-0.52l-0.04,-0.3l-0.46,-0.96l0.41,0.03l0.54,0.45l0.34,0.15l0.44,-0.1l0.12,-0.17l0.2,0.03l0.06,-0.15l0.18,0.03l0.17,0.41l0.2,0.18l1.09,0.35l1.08,-0.18l1.53,0.45l0.14,0.13l-0.06,0.06l0.19,0.45l0.88,0.89l1.03,0.47l0.56,-0.36l-0.06,-0.35l-0.37,-0.64l1.48,0.48l0.36,0.26l0.11,0.4l0.61,0.16l1.2,0.07l0.48,0.24l1.49,0.99l0.18,0.45l-0.34,0.04l-0.1,0.06l-0.4,0.34l-0.16,0.3l-0.6,-0.28l-0.52,-0.06l-0.12,0.69l0.62,0.52l0.02,0.52l0.16,0.37l0.28,0.32l0.91,0.59l0.18,0.29l0.46,0.4l0.69,0.3l0.39,0.29l-0.14,0.25l0.02,0.32l0.38,0.24l0.2,-0.05l0.26,0.12l0.44,0.49l0.56,0.16l0.39,0.46l-0.08,0.39l0.24,0.31l0.41,0.19l0.41,-0.15l0.03,-0.15l1.39,-0.46l0.24,0.52l0.24,0.25l-0.25,0.06l0.01,0.5l0.38,0.29l0.43,0.02l0.5,-0.24l0.36,-0.41l-0.05,-0.98l-0.45,-0.65l0.19,0.01l0.65,1.54l0.23,0.25l1.6,0.95l0.53,-0.01l0.29,-0.27l0.34,-0.59l-0.02,-0.44l0.3,-0.38l-0.16,-0.23l-0.72,-0.38l-0.44,-0.04l-0.49,-0.92l-0.89,-0.53l-0.42,-0.12l-0.61,0.21l-0.32,-0.28l-0.0,-0.43l-0.16,-0.19l-0.23,-0.71l0.64,-0.39l0.29,-0.02l0.35,0.29l0.32,0.05l0.37,-0.41l-0.0,-0.15l-0.75,-1.21l-1.13,-0.68l-0.06,-0.29l0.18,-0.28l-0.15,-0.48l-0.43,-0.23l-0.43,0.29l-0.42,0.07l-0.25,-0.44l-0.53,-0.4l-0.31,-0.1l-0.25,-0.41l-1.35,-1.4l0.59,-1.11l0.15,-1.07l-0.1,-1.05l-0.51,-1.13l-0.29,-1.11l-0.36,-0.48l-0.85,-2.25l-1.06,-1.45l-0.08,-0.73l-0.38,-0.89l0.17,-0.17l0.91,-0.32l1.04,-1.04l1.08,1.08l1.75,1.29l0.84,0.44l1.33,0.95l1.37,0.54l1.36,0.24l1.49,-0.09l0.3,0.11l0.42,-0.05l0.4,-0.16l0.23,-0.26l0.3,-0.14l0.42,-0.5l0.56,-0.03l0.17,-0.31l1.66,0.14l0.96,-0.29l0.5,0.12l0.03,0.15l0.87,0.52l0.35,0.13l0.52,-0.01l0.77,0.56l0.91,0.33l0.1,0.2l0.28,-0.04l0.42,0.16l1.99,0.27l-0.05,0.31l0.11,0.18l-0.18,0.06l-0.15,0.66l0.44,0.21l0.04,0.83l0.28,0.36l0.44,-0.14l0.1,-0.13l0.05,-0.46l0.22,-0.51l1.1,0.62l0.73,0.1l0.29,-0.35l-0.22,-0.39l-0.74,-0.5l-0.43,-0.14l-0.07,-0.18l0.03,-0.25l0.76,-0.07l0.26,0.1l0.01,0.3l0.27,0.62l0.54,0.33l0.14,-0.17l0.45,0.24l0.16,-0.08l0.63,0.55l1.13,0.63l0.13,-0.03l0.81,0.55l0.59,0.22l1.21,0.25l1.27,0.12l1.06,-0.17l1.19,0.0l0.01,0.22l0.26,0.49l0.68,0.48l0.08,0.62l0.56,0.17l0.57,0.45l-0.61,-0.02l-0.77,-0.42l-0.42,0.03l-0.44,0.21l0.1,0.48l0.23,0.26l-0.19,0.32l0.18,0.59l0.33,0.11l0.33,-0.12l0.64,0.36l0.3,0.06l0.31,-0.08l0.23,-0.23l0.33,-0.02l0.39,0.36l0.26,0.01l0.25,0.18l0.33,0.02l0.27,-0.16l0.13,0.09l0.16,0.38l-0.54,-0.04l-0.29,0.34l0.21,0.4l0.2,0.11l0.07,0.35l0.89,0.58l-0.04,0.13l0.18,0.3l0.49,0.21l0.94,-0.04l0.96,0.68l0.58,0.26l0.32,0.03l0.37,0.42l0.23,0.1l0.1,0.31l0.34,0.26l0.21,0.38l0.34,0.08l0.26,-0.12l0.25,0.23l-0.55,0.05l-0.29,0.34l-0.41,0.04l-0.18,0.63l0.35,0.33l1.4,0.72l-0.08,0.69l1.48,0.96l0.49,0.67l0.27,0.15l0.49,-0.16l1.05,0.48l0.24,-0.05l0.38,0.32l0.16,0.58l1.1,0.42l0.72,0.06l0.21,0.19l0.85,0.38l0.32,0.34l0.31,0.09l0.59,0.53l0.2,0.37l0.73,0.47l0.25,0.29l0.1,0.53l0.48,0.29l0.55,0.03l0.31,0.44l0.56,0.33l-0.11,0.34l0.39,0.41l1.66,1.19l0.76,0.36l0.16,-0.03l1.78,1.0l0.42,0.4l0.69,0.34l0.47,0.65l0.08,-0.08l-0.02,0.25l0.22,0.06l0.5,0.55l0.02,0.21l0.5,0.23l0.54,0.42l1.19,0.58l0.8,0.03l0.63,0.31l0.03,0.31l0.43,0.12l0.33,-0.2l0.19,-0.0l0.43,0.12l1.02,0.51l0.05,0.25l0.41,0.27l0.22,-0.19l0.58,0.53l0.31,0.09l0.53,0.55l-0.01,0.24l0.49,0.42l0.02,0.24l0.27,0.43l0.55,0.34l0.18,0.4l0.42,0.15l0.58,0.51l0.56,0.96l0.35,0.26l0.53,0.01l0.15,0.11l-23.69,51.51l0.09,0.46l1.53,1.4l0.52,0.02l0.19,-0.15l1.17,1.29l0.41,0.12l1.37,-0.4l1.79,0.68l-0.86,0.96l-0.08,0.38l0.35,1.01l0.91,0.92l-0.08,0.65l0.1,0.44l2.43,4.76l-0.2,1.48l-0.29,0.38l0.19,0.62l0.58,0.12l0.83,-0.25l0.54,-0.07l0.07,0.08l0.03,0.1l-0.66,0.3l-0.33,0.34l0.29,0.54l0.35,-0.0l0.37,-0.18l0.25,0.12l0.02,0.21l0.44,0.11l0.09,0.11l0.26,1.19l-0.17,0.03l-0.1,0.51l0.24,0.32l0.94,0.22l0.04,0.16l-0.27,0.18l0.01,0.12l0.21,0.32l0.21,0.09l-0.05,0.37l-0.24,-0.02l-0.1,-0.46l-0.35,-0.31l-0.11,0.06l-0.28,-0.47l-0.47,-0.03l-0.26,0.35l-0.45,0.01l-0.08,0.13l-0.26,-0.63l-0.14,0.01l-0.35,-0.41l-0.47,-0.12l-0.89,-1.43l0.11,-0.01l0.32,-0.49l-0.08,-0.26l-0.34,-0.28l-0.51,0.01l-0.47,-0.93l-0.05,-0.15l0.12,-0.53l-0.08,-0.41l-0.52,-1.06l-0.46,-0.7l-0.19,-0.07l0.1,-0.61l-0.29,-0.28l-0.72,-0.14l-1.24,-1.44l-0.27,-0.47l-0.01,-0.21l-0.32,-0.23l-0.24,-0.34l-0.28,-0.11l-0.49,-0.63l0.39,-0.11l0.12,-0.23l0.05,0.05l0.59,-0.3l-0.02,0.13l-0.16,0.06l-0.16,0.55l0.3,0.41l0.38,0.07l0.43,-0.3l0.25,-1.03l0.15,-0.22l0.42,0.2l0.36,0.46l0.36,0.04l0.35,-0.35l-0.47,-0.83l-0.69,-0.39l-0.27,-0.91l-0.35,-0.63l-0.4,-0.17l-0.67,0.44l-0.39,0.06l-0.79,0.37l-1.9,-0.05l-1.0,-0.5l-0.45,-0.34l-1.46,-1.5l0.23,-0.14l0.21,-0.32l0.16,-0.74l-0.43,-0.94l-0.52,-0.09l-0.33,0.19l-0.12,0.52l-0.6,-0.04l-0.85,-0.89l-2.81,-1.97l-1.68,-0.48l-1.62,-0.65l-1.13,-0.19l-0.1,-0.53l-0.27,-0.5l0.13,-0.25l-0.02,-0.26l-0.22,-0.25l-0.8,-0.28l-0.36,-0.35l-0.17,-0.01l-0.13,-0.55l-0.2,-0.34l-0.2,-0.12l0.7,-0.5l0.09,-0.27l-0.09,-0.08l0.21,-0.27l0.23,-0.09l0.38,0.08l0.38,-0.17l0.18,-0.32l-0.03,-0.34l-0.35,-0.22l-0.55,-0.07l-0.81,0.27l-0.24,0.2l-0.57,0.02l-0.56,0.35l-0.61,0.15l-0.2,-0.13l-0.19,-0.59l-0.58,-0.63l0.77,-0.37l0.19,-0.38l-0.32,-0.45l-0.53,-0.01l-0.15,-0.48l-0.19,-0.17l0.09,-0.49l-0.16,-0.25l0.04,-0.22l-0.31,-0.55l-0.43,-0.22l-0.53,0.17l-0.07,-0.2l-0.27,-0.03l-0.09,-0.14l0.22,-0.56l0.26,0.03l0.08,-0.09l0.65,0.37l0.38,0.07l0.42,-0.49l-0.14,-0.42l-0.27,-0.26l-1.05,-0.52l-1.54,0.27l-0.1,-0.21l-0.41,-0.3l-0.42,-0.01l-0.08,-0.23l-0.47,0.02l-0.21,-0.16l0.21,-0.26l-0.05,-0.39l0.14,-0.4l-0.28,-0.27l-0.25,-0.05l0.21,-0.77l-0.33,-0.28l-0.29,0.02l-1.36,0.57l0.02,-0.11l-0.34,-0.35l-1.19,-0.19l-0.14,0.25l-0.55,0.26l0.08,0.49l0.21,0.14l-0.01,0.1l-0.83,-0.27l-0.63,-0.03l-0.23,0.49l-0.51,0.38l0.12,0.52l0.31,0.16l0.46,-0.02l-0.05,0.11l-0.98,0.16l-0.3,0.14l-0.16,0.16l-0.05,0.46l0.37,0.28l0.83,-0.12l0.12,0.14l-0.04,0.25l0.31,0.21l-0.27,0.12l-0.15,0.24l-0.51,-0.02l-0.23,0.34l-0.3,0.12l0.05,0.54l-0.3,0.32l-0.12,-0.14l-0.66,0.24l-0.32,-0.27l-0.44,-0.13l-0.32,-0.39l0.11,-0.5l-0.38,-0.29l-0.64,0.04l0.13,-0.4l-0.05,-0.34l-0.23,-0.26l-0.26,-0.07l-0.4,0.16l-0.47,0.73l-0.25,-0.01l-0.23,-0.49l-0.46,-0.07l-0.37,0.4l-0.4,-0.06l-0.16,0.33l-0.29,-0.31l-0.42,-0.03l-0.26,0.25l-0.01,0.21l-0.31,-0.08l-0.11,-0.32l-0.12,-0.03l-0.37,0.06l-0.72,0.4l-0.01,-0.27l-0.13,-0.08l-0.8,-0.04l-0.38,0.2l-0.0,0.45l-0.09,0.05l-1.16,0.08l-0.3,0.13l-0.87,-0.77l-0.22,-0.05l-0.29,0.29l-0.4,-0.28l-1.02,-0.03l0.03,-0.13l-0.35,-0.39l-0.01,-0.13l0.45,0.02l0.16,-0.37l0.53,0.01l0.43,0.3l0.3,0.45l0.49,-0.04l0.2,-0.43l0.23,0.09l0.44,-0.04l0.48,-0.17l0.06,-0.15l0.45,-0.23l0.46,-0.08l0.32,-0.52l-0.21,-0.37l-0.49,-0.19l-1.84,0.04l-0.57,-0.71l-0.07,-0.28l1.28,-0.98l1.62,-0.44l0.37,-0.26l0.33,-0.45l0.46,-0.1l0.65,-0.89l0.14,-1.04l0.36,-0.03l0.74,0.3l1.54,-0.17l1.4,0.03l0.01,0.5l0.23,0.42l0.56,0.48l1.06,0.16l0.14,0.1l0.28,0.41l0.4,0.26l1.19,1.07l0.2,0.34l0.25,0.13l0.5,-0.37l0.0,-0.44l-0.13,-0.39l-0.42,-0.46l-0.43,-0.13l-0.32,-0.52l-0.43,-0.35l-0.69,-1.19l0.45,-0.11l0.44,-0.3l0.35,0.02l0.33,-0.17l1.56,0.33l0.37,-0.06l0.15,-0.62l-0.09,-0.11l-0.67,-0.46l-0.84,-0.3l-0.61,-0.04l-0.74,0.14l-0.37,0.19l-0.29,0.35l-0.76,-0.52l-0.11,-0.24l-0.42,-0.02l-0.16,-0.12l0.14,-0.2l-0.17,-0.67l-0.09,-0.02l-1.07,0.27l-0.85,-0.19l-0.49,0.0l-0.85,0.41l-0.65,-0.15l-0.6,-0.29l-1.18,0.04l-0.71,0.35l-0.19,0.5l-0.35,-0.15l-0.65,0.04l-0.5,0.24l-0.62,0.03l-0.54,0.15l-0.41,0.33l-0.12,0.36l-0.49,0.22l-0.59,-0.02l-0.4,-0.27l-0.26,-0.68l-0.43,-0.32l-0.3,-0.11l-0.42,0.02l-0.3,0.28l0.16,0.51l0.31,0.08l0.01,0.37l0.37,0.61l0.21,0.72l-0.38,0.08l-0.35,0.26l-0.33,-0.06l-0.56,-0.39l-0.98,-0.37l-0.58,0.21l0.02,0.44l-0.07,-0.38l-0.32,-0.34l-0.42,0.19l-0.23,0.4l-0.2,-0.38l-0.81,0.14l-0.08,0.05l-0.02,0.41l-0.37,-0.32l-0.33,-0.04l-0.36,0.28l0.13,0.39l-1.49,-0.27l-0.16,0.49l-0.25,0.14l-0.28,0.36l-0.51,0.04l-0.02,0.17l-0.2,0.09l0.03,0.42l-0.16,0.27l-0.01,0.39l0.33,0.34l0.59,-0.05l0.39,0.38l0.56,0.31l0.08,0.49l0.23,0.34l0.3,0.19l0.03,0.3l-0.64,0.54l-0.5,-0.05l-0.44,0.18l-0.88,-0.46l-0.37,0.02l-0.48,0.41l-0.2,-0.12l-0.45,-0.01l-0.34,0.59l-0.75,-0.12l-0.4,0.05l-0.27,0.3l-0.1,-0.02l0.07,0.06l-0.11,0.01l0.0,0.1l-0.42,-0.28l-0.36,0.33l-0.19,-0.1l-0.32,0.19l-0.3,-0.11l-0.37,0.07l-0.53,-0.44l-0.45,-0.15l-0.9,0.53l-0.18,-0.15l-0.71,-0.02l-0.45,0.28l-0.15,-0.37l-0.41,-0.28l-0.42,0.1l-0.43,0.49l-0.37,-0.15l-0.28,0.31l-0.47,-0.08l-0.4,-0.43l-0.4,0.07l-0.3,0.24l-0.14,-0.11l-0.43,-0.05l-0.14,0.08l-1.45,-0.04l-0.31,0.12l-0.22,0.28l0.24,0.95l-0.31,-0.03l-0.15,0.18l-0.69,-0.24l-0.41,-0.28l-0.26,0.05l-0.26,0.26l-0.2,-0.24l-0.49,0.22l-0.65,0.09l-0.32,-0.22l-0.27,0.2l-0.19,-0.65l-0.39,-0.22l-0.43,0.08l-0.28,0.31l-0.44,0.09l-0.26,-0.07l-0.14,0.34l-0.06,-0.31l-0.26,-0.25l-0.54,-0.14l-1.29,-0.05l-0.62,0.31l-0.42,-0.34l-0.51,-0.04l-0.84,0.27l-0.73,0.11l-0.16,0.12l-0.11,0.56l-0.26,-0.07l-0.44,0.3l-0.03,0.21l-0.23,0.15l-0.26,-0.25l-0.37,-0.03l-0.36,0.17l-0.6,-0.33l-0.87,-0.22l-0.41,-0.18l-0.09,-0.37l-0.55,-0.15l-0.25,0.15l-0.71,-0.67l-0.41,0.02l-0.78,-0.24l-0.4,0.21ZM111.25,502.71l-0.44,0.21l-0.03,-0.02l0.24,-0.26l0.23,0.07ZM128.45,468.26l-0.1,0.14l-0.06,0.02l0.02,-0.15l0.14,-0.02ZM191.55,470.09l-0.0,0.04l-0.02,-0.04l0.03,-0.01ZM191.85,541.2l-0.08,-0.21l0.06,-0.51l0.25,-0.06l0.08,0.39l-0.31,0.39ZM165.84,518.29l-0.19,0.37l-0.34,0.04l-0.07,0.31l-0.27,-0.07l-0.45,0.06l-0.04,-0.09l0.46,-0.29l0.06,-0.15l0.84,-0.19ZM162.12,521.34l0.09,0.0l-0.06,0.02l-0.02,-0.03ZM162.26,521.34l0.08,-0.02l0.01,0.04l-0.04,0.04l-0.05,-0.05ZM141.64,514.73l0.19,0.06l0.26,0.22l-0.46,0.03l-0.07,-0.12l0.08,-0.19ZM132.07,521.13l-0.0,0.0l0.0,-0.0l0.0,0.0ZM132.06,520.84l-0.02,-0.07l0.06,-0.01l-0.03,0.08ZM109.91,522.38l0.07,-0.02l0.05,0.12l-0.03,0.01l-0.09,-0.11ZM107.83,523.67l0.01,0.02l-0.02,0.0l0.0,-0.02l0.01,-0.01ZM136.02,515.64l-0.01,-0.04l0.07,0.01l-0.06,0.03ZM199.71,549.76l0.43,-0.06l0.87,0.3l0.36,-0.05l0.76,-0.54l0.39,-0.87l0.67,-0.03l0.47,-0.34l0.17,-0.49l0.96,0.19l1.89,-0.14l0.49,0.7l0.06,0.43l0.38,0.59l-0.1,0.26l-0.29,0.17l-0.1,0.55l0.11,0.16l-0.11,0.33l0.13,0.53l0.17,0.24l0.69,0.46l0.02,0.37l0.3,0.56l0.35,0.24l0.08,0.34l-0.15,0.26l0.26,1.28l1.33,1.5l0.24,0.78l-0.64,-0.19l-0.38,0.04l-0.33,0.37l-0.51,0.26l-0.01,0.29l-0.38,0.15l-0.21,0.29l-0.52,-0.98l-0.84,-0.64l0.11,-0.44l-0.27,-1.06l0.14,-0.11l0.26,-1.09l-0.26,-0.26l0.04,-0.09l-0.12,-0.01l0.04,-0.06l-0.09,0.05l-0.1,-0.1l-0.04,0.1l-0.12,-0.01l-0.03,-0.07l0.24,-0.92l0.1,-1.07l-0.15,-1.05l0.51,-0.94l0.02,-0.37l-0.66,-0.25l-0.5,0.69l-0.24,-0.13l-0.45,0.11l0.01,0.55l-0.32,0.35l0.3,1.04l-0.34,0.85l0.13,1.32l-0.11,0.36l0.04,0.39l-0.27,0.34l0.03,1.86l-0.28,0.29l-0.27,-0.31l0.02,-1.36l-0.28,-0.43l-0.53,0.1l-0.08,0.1l-0.88,-0.14l0.22,-0.05l0.2,-0.25l0.2,-0.91l-0.12,-0.1l-0.13,-1.06l0.88,0.13l0.45,-0.45l-0.11,-0.33l-0.74,-0.45l-0.23,0.1l0.0,-0.84l-0.33,-0.34l-0.31,-0.01l-0.29,0.56l-0.24,0.06l-0.27,0.41l0.12,0.13l-0.5,-0.23l0.24,-0.5l-0.28,-0.54l-0.29,-0.02l-0.18,-0.5l-0.47,-0.15l-0.19,0.31l-0.22,-0.47ZM201.64,551.89l0.21,0.2l-0.19,0.19l-0.03,-0.38ZM210.83,558.1l0.42,0.83l-0.23,0.38l0.09,0.66l0.47,1.27l0.06,1.07l0.15,0.48l-0.33,-0.38l-1.31,-0.73l-0.26,-0.05l0.19,-0.2l-0.17,-0.39l0.14,-0.1l0.31,-0.63l-0.47,-0.31l-0.27,0.01l-0.75,0.68l-0.11,-0.36l0.09,-0.18l-0.03,-0.41l0.26,-0.33l0.36,-0.19l0.16,-0.56l0.43,-0.42l0.36,0.09l0.44,-0.23ZM211.88,563.05l1.25,5.46l-0.54,0.45l0.03,0.64l0.81,0.55l-0.47,0.67l0.05,0.52l0.58,0.54l-0.08,0.3l0.06,0.48l-0.14,0.55l0.15,0.3l0.2,0.13l0.9,0.26l1.46,1.84l1.18,0.8l0.34,0.76l0.55,0.42l-0.01,0.53l0.1,0.24l0.78,0.58l0.49,0.11l0.03,0.16l-0.16,0.69l-0.68,0.46l-0.31,0.4l-0.04,0.78l-0.31,0.67l0.11,0.99l-0.15,0.54l0.03,0.33l-0.4,0.17l-1.34,1.4l-0.41,0.31l-0.48,0.16l-0.2,-0.13l-0.28,0.01l0.12,-0.5l-0.16,-0.42l-0.64,0.07l-0.08,0.17l-0.1,-0.51l0.24,-0.03l0.12,0.14l0.5,0.14l1.27,-0.81l0.75,-0.65l-0.23,-0.63l-0.48,0.07l0.01,-0.13l-0.37,-0.36l-0.54,0.12l0.59,-1.72l0.0,-0.38l0.15,-0.3l-0.06,-0.43l0.09,-0.51l-0.36,-0.24l-0.06,-0.35l-0.27,-0.49l0.49,-0.15l0.35,-0.35l0.18,-0.48l-0.43,-0.27l-0.43,0.08l-0.61,0.31l-0.45,0.04l-0.55,-0.29l-1.43,0.28l-0.59,-0.05l0.17,-0.09l0.2,-0.36l0.21,-0.85l0.32,0.02l0.81,0.41l0.31,0.03l0.71,-0.34l-0.07,-0.49l-0.33,-0.19l-0.4,0.02l-0.88,-0.43l0.03,-0.84l-0.23,-0.29l-0.46,-0.26l0.02,-0.43l-0.43,-0.61l0.27,-0.3l-0.16,-0.68l-0.35,-0.03l0.1,-0.07l0.01,-0.21l0.42,-0.17l0.22,-0.62l-0.38,-0.26l-0.67,0.18l-0.27,-0.29l-0.2,-0.32l-0.06,-0.35l0.33,-0.21l0.18,-1.04l-0.39,-0.3l-0.47,0.16l-0.17,-0.08l-0.29,-0.36l0.13,-0.2l-0.14,-0.35l-0.45,-0.27l1.08,-0.08l0.35,-0.42l-0.28,-0.52l-0.49,0.08l-0.44,-0.14l0.18,-0.32l-0.03,-0.32l-0.51,-0.26l0.04,-0.13l0.64,0.01l0.41,0.72l0.28,0.23l0.31,0.02l0.28,-0.15l0.04,-0.52l-0.24,-0.23l-0.1,-0.4l-0.37,-0.63l-0.78,-0.91l0.12,-0.39l1.23,0.83l0.52,-0.45ZM214.19,585.45l-0.17,0.68l-0.05,-0.01l0.09,-0.42l0.13,-0.25ZM215.44,583.76l-0.46,0.24l-0.25,-0.22l-0.63,0.14l0.05,-0.14l0.52,-0.28l0.76,0.25ZM211.63,577.78l-0.08,0.43l0.26,0.27l-0.46,0.4l-0.51,-0.23l-0.26,0.45l0.06,0.32l-0.15,-0.2l0.08,-0.67l0.25,-0.15l0.49,-0.04l0.32,-0.57ZM209.08,567.17l-0.25,-0.24l0.08,-0.14l0.49,0.2l-0.32,0.18ZM138.39,458.34l-0.47,-0.44l0.06,-0.45l0.41,0.27l0.0,0.62ZM108.63,500.59l-0.13,0.01l0.09,-0.03l0.04,0.02ZM211.75,580.86l0.58,-0.24l-0.2,0.44l0.02,0.52l-0.22,-0.23l-0.18,-0.5ZM212.61,580.43l0.18,-0.49l-0.1,-0.18l0.52,-0.05l0.31,-0.26l0.18,-0.36l0.14,-0.03l0.14,-0.52l0.57,-0.03l0.29,1.05l0.12,1.09l-0.15,0.19l0.03,0.12l-0.16,0.04l-0.27,0.73l-0.28,0.21l-0.2,-0.36l0.13,-1.47l-0.39,-0.42l-0.41,0.19l-0.18,0.46l-0.46,0.07ZM211.52,574.36l0.23,0.31l0.37,0.12l0.01,0.48l-0.14,0.07l-0.12,-0.08l-0.4,-0.44l-0.11,-0.22l0.15,-0.24ZM209.53,575.0l0.17,-0.21l0.28,-0.04l-0.06,0.38l0.09,0.09l0.27,0.14l0.34,0.0l0.41,0.28l0.04,0.12l-0.35,0.14l0.09,0.38l-0.06,0.17l-0.28,0.08l0.14,-0.47l-0.34,-0.41l-0.06,-0.25l-0.69,-0.39ZM210.36,574.41l0.1,-0.07l0.07,0.06l-0.0,0.01l-0.16,-0.0ZM209.54,571.91l0.03,-0.1l0.32,-0.15l0.14,-0.29l-0.04,-0.37l0.05,-0.1l0.34,1.01l-0.09,-0.09l-0.52,-0.06l-0.15,0.21l-0.08,-0.04ZM206.97,580.16l0.1,-0.52l-0.42,-0.36l0.1,-0.03l-0.05,-0.5l-0.28,-0.2l0.14,-0.17l0.28,-0.1l0.36,0.03l0.21,-0.67l-0.39,-0.23l-1.18,-0.03l-0.2,-0.17l0.19,-0.17l0.46,-0.05l0.67,-0.52l0.19,-0.54l-0.08,-0.32l-0.26,-0.01l0.23,-0.63l0.14,0.22l0.53,0.22l0.24,0.31l0.4,0.27l0.42,1.0l0.12,0.56l-0.14,0.62l-0.17,-0.03l-0.11,0.19l-0.32,0.19l0.02,0.34l-0.75,0.25l-0.08,0.43l0.07,0.45l0.56,-0.01l-0.02,0.13l0.38,0.45l0.22,-0.01l0.23,0.23l0.25,-0.06l0.21,0.38l-0.39,-0.07l-0.32,0.43l-0.06,0.32l0.22,0.37l0.41,0.04l0.21,0.09l-0.2,-0.03l-0.41,0.47l-0.47,0.15l0.11,0.7l0.38,0.27l-0.13,0.2l0.18,0.53l-0.2,0.06l-0.06,0.23l-0.22,-0.08l0.18,-0.35l-0.4,-1.09l0.11,-0.08l0.05,-0.73l-0.28,-0.13l-0.15,-0.32l0.01,-0.81l-0.21,-0.78l-0.46,-0.01l-0.11,0.08l-0.05,-0.39ZM207.26,574.01l-0.02,-0.27l-0.21,-0.27l0.29,-0.14l0.03,0.3l0.15,0.15l-0.04,0.21l-0.2,0.0ZM206.9,573.41l-0.43,-0.14l-0.38,-0.35l0.21,-0.11l0.28,0.14l0.04,0.28l0.27,0.18ZM208.72,573.09l0.26,-0.17l0.43,0.23l0.25,-0.0l-0.15,0.15l-0.09,0.37l-0.14,0.04l-0.23,-0.02l-0.33,-0.6ZM206.49,567.38l1.0,0.59l0.81,0.7l0.06,0.4l-0.46,0.04l-0.19,0.76l0.03,0.31l0.19,0.26l-0.17,0.31l0.43,0.76l-0.15,0.1l-0.85,-0.57l-0.44,0.12l-0.01,0.16l-0.22,-0.06l0.24,-0.51l-0.06,-0.27l0.08,0.03l0.08,-0.27l-0.06,-0.29l0.42,-0.7l0.08,-0.44l-0.28,-0.43l0.06,-0.22l-0.32,-0.31l-0.25,-0.5ZM208.6,569.24l0.34,0.07l0.2,-0.33l0.2,0.07l0.2,0.44l-0.0,0.19l-0.3,0.2l-0.13,0.86l-0.14,-0.44l-0.01,-0.6l-0.07,-0.17l-0.2,-0.03l-0.09,-0.25ZM209.57,569.66l0.0,-0.0l0.03,-0.02l-0.04,0.02ZM204.29,565.52l0.44,-0.15l-0.03,-0.36l0.29,-0.2l0.29,0.26l0.51,-0.3l-0.08,0.47l-0.15,0.23l-0.33,-0.04l-0.36,0.3l-0.27,-0.06l-0.16,0.09l0.02,0.12l-0.36,0.07l0.19,-0.44ZM206.36,564.27l-0.49,0.31l-0.02,-0.59l-0.46,-0.14l-0.02,-0.1l0.53,-0.05l0.24,-0.65l-0.35,-0.23l-0.51,-0.03l-0.1,-0.28l0.09,-0.84l0.2,-0.34l0.16,-0.72l0.07,-1.03l0.34,-0.33l0.69,0.17l0.26,0.31l-0.04,0.27l-0.16,0.12l0.03,0.24l-0.13,0.05l-0.05,0.65l-0.22,0.57l0.02,0.09l0.33,0.11l0.23,1.01l-0.15,0.27l0.43,0.45l-0.08,0.23l-0.57,-0.12l-0.09,0.19l-0.15,0.04l-0.01,0.39ZM206.15,574.28l-0.13,-0.03l0.0,-0.02l0.15,-0.04l-0.02,0.09ZM205.18,574.32l-0.02,0.0l0.01,-0.01l0.01,0.0ZM204.96,570.25l-0.05,-0.24l0.09,0.22l-0.04,0.01ZM205.25,569.02l-0.25,0.19l-0.3,-0.19l-0.18,-0.37l-0.42,-0.07l0.04,-0.08l0.41,0.09l0.15,-0.2l0.31,0.17l0.28,-0.13l0.03,0.52l-0.07,0.07ZM198.99,558.2l0.09,-0.07l0.23,0.49l-0.21,-0.07l-0.11,-0.35ZM199.36,558.71l0.38,0.44l0.56,-0.45l-0.44,-1.09l0.59,0.02l0.03,-0.77l0.24,0.32l0.51,0.01l0.2,-0.29l0.29,-0.06l0.19,0.34l0.24,0.12l0.18,0.27l-0.28,0.14l-0.69,-0.17l-0.13,0.26l-0.17,-0.1l-0.57,0.26l0.08,0.42l0.27,0.54l0.56,0.48l0.25,0.5l0.39,0.36l-0.12,0.15l0.09,0.44l-0.94,-1.32l-0.28,-0.2l-0.61,0.35l0.06,0.34l-0.2,0.14l0.2,0.7l0.21,0.07l-0.14,0.51l0.2,0.13l0.05,0.18l-0.28,0.06l-0.12,-0.56l-0.37,-0.57l0.25,-0.15l-0.16,-0.49l-0.21,-0.17l-0.02,-0.33l-0.28,-0.49l-0.01,-0.31ZM202.27,558.92l0.38,-0.28l0.43,-0.1l0.76,0.39l0.05,0.17l0.43,0.38l-0.11,0.18l-0.41,-0.45l-0.58,-0.11l-0.2,0.41l0.19,0.59l-0.97,-1.19ZM202.11,560.96l0.33,0.1l0.14,0.21l0.26,0.09l0.85,-0.01l-0.23,1.25l-0.31,-0.14l-1.03,-1.5ZM201.29,562.69l0.18,0.07l0.33,-0.09l0.0,0.25l0.48,0.21l0.22,0.28l-0.11,0.08l0.12,0.52l-0.05,0.29l0.23,0.34l-0.06,0.8l0.13,0.32l-0.1,0.03l-0.14,0.56l-0.14,0.99l0.02,0.73l-0.25,0.74l-0.22,-0.02l-0.19,0.34l-0.01,0.5l-0.44,1.06l-0.2,-0.86l-0.08,-0.92l0.3,-0.02l0.63,-0.49l-0.06,-0.73l-0.22,-0.05l0.02,-0.45l-0.19,-0.26l-0.25,-0.01l-0.16,-0.59l-0.47,-0.03l0.24,-0.17l0.01,-0.27l0.65,-0.05l0.22,-0.32l-0.13,-0.51l-0.53,-0.24l0.57,-0.27l-0.34,-1.16l-0.33,-0.12l0.28,-0.19l0.04,-0.3ZM199.27,560.14l0.0,0.0l-0.01,0.0l0.0,-0.0ZM199.1,564.31l0.25,-0.07l0.1,-0.06l-0.12,0.15l-0.23,-0.02ZM199.63,563.32l0.06,-0.2l-0.05,-0.13l0.09,0.13l-0.1,0.2ZM162.15,525.49l0.25,-0.21l0.11,-0.0l-0.2,0.31l-0.16,-0.1ZM136.7,524.68l0.22,0.25l0.59,-0.1l0.04,-0.44l0.61,0.38l0.29,-0.23l0.18,-0.67l0.1,-0.05l0.25,0.13l0.16,-0.06l-0.14,0.5l0.39,0.72l-0.5,0.38l-0.19,-0.72l-0.36,-0.02l-0.69,0.57l-0.12,-0.24l-0.46,0.06l-0.15,0.16l-0.22,-0.52l-0.13,-0.04l0.04,-0.14l0.07,0.07ZM139.88,525.13l-0.03,-0.01l0.02,-0.02l0.01,0.03ZM127.78,528.13l0.49,-0.13l0.09,0.05l-0.34,0.29l-0.18,0.01l-0.06,-0.22ZM128.01,526.82l0.09,-0.93l-0.34,-0.41l0.27,-0.06l0.19,-0.29l0.22,-0.02l0.24,-0.25l0.44,0.22l0.16,-0.11l0.5,0.1l0.1,-0.23l0.15,-0.03l0.38,0.09l0.25,0.25l-0.43,0.12l0.02,0.5l0.44,0.31l-0.25,0.64l0.13,1.11l0.36,0.59l0.43,0.15l-0.37,0.07l-0.19,0.39l-0.11,-0.05l0.03,-0.41l-0.23,-0.36l-0.69,-0.05l-0.43,-0.59l-0.47,-0.4l-0.65,-0.34l-0.26,-0.01ZM131.4,528.57l0.28,-0.39l-0.19,-0.6l0.07,-0.55l0.15,-0.28l0.3,0.13l0.31,-0.27l0.44,0.14l0.52,-0.02l0.3,-0.22l0.26,0.17l0.23,-0.03l0.19,0.33l0.66,-0.29l0.18,-0.29l0.28,0.22l-0.13,0.25l-0.0,0.39l0.26,0.35l0.46,-0.02l0.28,-0.39l0.28,0.18l0.44,-0.16l0.31,0.17l0.08,-0.05l-0.05,0.23l-0.73,0.21l-0.21,0.41l0.22,0.27l-0.07,0.65l0.3,0.23l0.29,0.05l-0.5,0.18l-0.19,-0.24l-0.3,-0.08l-0.09,-0.22l-0.26,-0.17l-0.13,-0.32l-0.96,-0.67l-0.23,0.18l-0.65,0.18l-0.19,0.27l0.12,0.28l-0.38,-0.39l-0.44,0.12l-0.19,0.46l-0.91,-0.26l-0.07,0.08l-0.35,-0.23ZM134.19,529.01l0.07,-0.02l0.09,0.03l-0.15,-0.01l-0.01,0.0ZM134.4,529.04l0.27,0.1l0.23,0.58l-0.25,-0.11l0.04,-0.1l-0.29,-0.47ZM135.83,526.14l0.09,-0.06l0.01,0.01l-0.11,0.04ZM132.89,525.47l-0.57,-0.58l0.11,-0.17l0.27,-0.08l0.34,0.07l0.08,0.37l-0.22,0.39ZM98.14,450.76l0.34,-0.44l0.56,-0.16l0.06,0.49l-0.13,0.02l0.1,0.29l0.7,0.54l0.29,0.6l0.36,0.4l-0.66,-0.36l-1.21,-0.26l-0.45,-0.8l0.04,-0.32ZM100.81,452.78l1.01,0.2l0.26,0.2l0.38,0.11l0.3,0.33l0.23,0.8l-0.26,0.19l-0.26,0.4l0.43,0.51l0.28,0.71l0.39,0.33l-0.09,0.31l0.05,0.32l0.21,0.31l0.5,0.32l0.0,0.35l-0.82,-0.26l-0.09,0.09l-0.51,-0.1l-0.33,0.07l-0.08,-0.93l-0.57,-1.1l0.12,-0.48l-0.3,-0.98l-0.39,-0.84l-0.28,-0.35l-0.01,-0.23l-0.17,-0.28ZM104.84,458.76l0.28,0.01l0.41,0.53l-0.25,0.05l-0.44,-0.59ZM96.98,478.79l0.06,-0.22l1.37,1.26l0.38,-0.0l0.32,-0.21l0.21,0.06l0.2,0.25l0.72,-0.01l-0.01,0.32l0.69,0.19l0.2,0.27l-0.05,0.32l0.09,0.16l0.27,0.29l0.49,0.19l0.07,0.2l-0.23,0.33l-0.32,0.22l-0.42,1.13l-0.7,-0.22l-0.36,-0.42l-0.19,0.11l-0.26,-0.08l-0.29,-0.35l-0.42,-0.13l-0.26,-0.41l-0.51,-0.41l-0.61,-1.56l0.07,-0.19l-0.47,-0.5l0.04,-0.31l-0.09,-0.3ZM97.68,522.17l0.05,-0.07l0.04,-0.11l0.07,0.18l-0.15,-0.01ZM98.03,522.39l0.04,0.02l-0.0,0.03l-0.03,-0.05ZM80.23,514.88l0.08,-0.15l0.69,0.24l0.38,-0.02l1.55,-0.69l0.18,0.0l0.16,0.37l0.44,0.39l0.27,0.08l0.4,-0.16l0.54,0.24l0.6,-0.01l0.53,0.26l0.44,0.41l0.03,0.72l-0.26,0.4l-0.13,0.44l-0.31,0.06l-0.22,0.21l-0.27,0.01l-0.3,-0.08l-0.46,-0.58l-1.38,-0.93l-0.45,-0.11l-0.76,0.03l-0.42,0.3l-0.21,0.03l-0.91,-0.42l-0.33,-0.34l0.14,-0.67ZM74.26,514.0l0.03,-0.25l0.32,0.05l0.02,0.35l-0.37,-0.15ZM64.81,513.23l0.09,-0.01l0.13,0.09l-0.17,0.0l-0.05,-0.08ZM70.29,514.35l-0.12,-0.05l-0.16,0.39l-0.25,-0.27l-0.36,0.08l0.24,-0.12l0.32,0.02l0.41,-0.61l-0.31,-0.35l-0.31,-0.63l-0.3,-0.24l0.05,-0.29l0.13,-0.06l0.67,0.13l0.43,0.28l0.16,0.24l-0.29,0.4l0.11,0.51l-0.06,0.17l-0.33,0.11l-0.04,0.31ZM68.8,514.2l-0.28,0.32l-0.09,-0.1l0.24,-0.29l-0.1,-0.27l0.19,-0.02l0.04,0.36ZM59.97,511.71l0.2,-0.13l0.18,-0.38l0.48,-0.06l0.27,0.03l0.13,0.21l0.36,0.14l0.1,0.15l-0.09,0.12l-0.23,-0.03l-0.61,0.18l-0.41,-0.22l-0.36,0.0ZM62.67,511.56l0.07,-0.35l0.28,-0.32l0.75,-0.02l0.67,0.35l0.17,0.49l-0.28,0.29l-1.25,-0.24l-0.41,-0.2ZM37.79,498.38l0.07,-0.23l-0.1,-0.23l0.32,0.03l0.09,0.49l-0.29,0.05l-0.1,-0.11ZM36.41,498.87l-0.02,0.01l0.01,-0.02l0.01,0.01ZM36.85,498.71l-0.0,-0.07l-0.0,-0.01l0.02,0.01l-0.01,0.07ZM30.2,493.17l-0.02,-0.03l0.04,-0.04l0.0,0.08l-0.02,-0.0ZM26.76,492.74l0.41,-0.33l0.12,0.35l-0.02,0.08l-0.25,0.01l-0.26,-0.12ZM25.01,490.83l0.02,0.0l-0.01,0.01l-0.02,-0.01ZM23.18,488.38l-0.09,0.01l0.05,-0.17l0.04,0.08l0.01,0.08ZM23.19,487.9l-0.06,0.1l-0.14,-0.54l0.19,0.18l0.0,0.26ZM15.95,478.85l0.25,0.07l-0.02,0.19l-0.14,-0.01l-0.09,-0.25ZM1.23,449.67l0.23,0.17l0.21,0.66l0.47,0.45l-0.25,0.16l0.12,0.39l-0.24,-0.38l-0.54,-0.19l-0.11,-0.3l0.19,-0.08l0.2,-0.42l-0.28,-0.47Z", "name": "Alaska" }, "US-NJ": { "path": "M801.67,165.24l1.31,-1.55l0.48,-1.57l0.5,-0.62l0.54,-1.45l0.11,-2.05l0.68,-1.35l0.92,-0.71l14.12,4.17l-0.3,5.66l-0.51,0.83l-0.13,-0.3l-0.65,-0.07l-0.34,0.44l-0.56,1.46l-0.46,2.72l0.26,1.55l0.63,0.61l1.06,0.15l1.23,-0.43l2.46,0.29l0.66,1.87l-0.2,4.55l0.29,0.47l-0.54,0.44l0.27,0.81l-0.72,0.74l0.03,0.35l0.43,0.22l-0.21,0.6l0.48,0.6l-0.17,3.8l0.59,0.52l-0.36,1.36l-1.14,1.82l-0.11,0.94l-1.36,0.07l0.09,1.21l0.64,0.83l-0.82,0.56l-0.18,1.15l1.05,0.77l-0.31,0.29l-0.17,-0.44l-0.53,-0.18l-0.5,0.22l-0.44,1.51l-1.28,0.61l-0.2,0.45l0.46,0.55l0.8,0.06l-0.66,1.26l-0.26,1.5l-0.68,0.65l0.19,0.48l0.4,0.04l-0.89,1.57l0.07,0.95l-1.56,1.66l-0.17,-1.65l0.33,-2.07l-0.11,-0.87l-0.58,-0.82l-0.89,-0.28l-1.11,0.34l-0.81,-0.35l-1.51,0.88l-0.31,-0.71l-1.62,-0.96l-1.0,0.04l-0.65,-0.71l-0.7,0.07l-3.24,-2.03l-0.06,-1.72l-1.02,-0.94l0.48,-0.68l0.0,-0.88l0.43,-0.83l-0.12,-0.73l0.51,-1.19l1.2,-1.16l2.6,-1.49l0.54,-0.86l-0.38,-0.85l0.5,-0.37l0.47,-1.44l1.24,-1.7l2.52,-2.22l0.18,-0.67l-0.47,-0.82l-4.26,-2.78l-0.75,-1.05l-0.9,0.24l-0.48,-0.33l-1.24,-2.46l-1.62,-0.02l-1.0,-3.45l1.02,-1.03l0.36,-2.23l-1.87,-1.91Z", "name": "New Jersey" }, "US-ME": { "path": "M837.04,56.27l0.86,-1.15l1.42,1.7l0.84,0.04l0.39,-2.12l-0.46,-2.19l1.7,0.36l0.73,-0.42l0.21,-0.52l-0.32,-0.7l-1.18,-0.47l-0.44,-0.62l0.19,-1.43l0.86,-2.02l2.08,-2.25l0.01,-0.98l-0.52,-0.93l1.02,-1.64l0.39,-1.51l-0.22,-0.91l-1.02,-0.35l-0.07,-1.42l-0.4,-0.43l0.55,-0.96l-0.04,-0.63l-1.0,-1.26l0.13,-1.73l0.37,-0.63l-0.15,-0.97l1.22,-1.93l-0.96,-6.17l5.58,-18.88l2.25,-0.23l1.15,3.18l0.55,0.43l2.54,0.56l1.83,-1.73l1.68,-0.83l1.24,-1.72l1.25,-0.12l0.64,-0.47l0.25,-1.43l0.42,-0.3l1.36,0.04l3.68,1.41l1.14,0.96l2.36,1.05l8.38,22.7l0.64,0.65l-0.25,0.95l0.72,1.02l-0.1,1.41l0.54,1.3l0.67,0.47l1.05,-0.12l1.12,0.58l0.97,0.1l2.47,-0.53l0.4,0.95l-0.59,1.42l1.69,1.86l0.28,2.69l2.72,1.68l0.98,-0.1l0.47,-0.74l-0.06,-0.5l1.21,0.25l2.95,2.8l0.04,0.47l-0.52,-0.14l-0.38,0.41l0.18,0.77l-0.76,-0.15l-0.35,0.4l0.15,0.63l1.84,1.62l0.16,-0.88l0.39,-0.17l0.8,0.32l0.27,-0.83l0.33,0.41l-0.31,0.85l-0.53,0.19l-1.21,3.24l-0.62,-0.04l-0.31,0.44l-0.55,-1.05l-0.72,0.03l-0.3,0.5l-0.56,0.06l-0.02,0.49l0.58,0.85l-0.91,-0.45l-0.32,0.63l0.26,0.52l-1.2,-0.28l-0.37,0.3l-0.37,0.78l0.08,0.45l0.44,0.08l0.07,1.21l-0.37,-0.57l-0.54,-0.06l-0.39,0.45l-0.2,1.09l-0.48,-1.53l-1.14,0.01l-0.68,0.75l-0.36,1.48l0.59,0.63l-0.83,0.63l-0.7,-0.46l-0.73,1.04l0.1,0.64l0.99,0.63l-0.35,0.21l-0.1,0.82l-0.45,-0.2l-0.85,-1.82l-1.03,-0.46l-0.39,0.22l-0.45,-0.41l-0.57,0.63l-1.25,-0.19l-0.26,0.86l0.78,0.4l0.01,0.37l-0.51,-0.06l-0.56,0.4l-0.09,0.69l-0.49,-1.02l-1.17,-0.02l-0.16,0.64l0.52,0.87l-1.44,0.96l0.84,1.11l0.08,1.06l0.53,0.65l-0.96,-0.41l-0.96,0.22l-1.2,-0.42l-0.17,-0.91l0.74,-0.28l-0.08,-0.55l-0.43,-0.5l-0.67,-0.12l-0.3,0.33l-0.23,-2.37l-0.37,-0.22l-1.1,0.26l0.04,1.96l-1.85,1.92l0.02,0.49l1.25,1.47l-0.64,0.96l-0.19,3.87l0.77,1.41l-0.57,0.53l0.0,0.63l-0.51,0.55l-0.8,-0.19l-0.45,0.93l-0.62,-0.06l-0.41,-1.15l-0.73,-0.21l-0.52,1.03l0.11,0.69l-0.45,0.59l0.12,2.41l-0.95,-1.01l0.14,-1.28l-0.24,-0.59l-0.81,0.29l-0.08,2.01l-0.44,-0.25l0.15,-1.55l-0.48,-0.4l-0.68,0.49l-0.76,3.04l-0.75,-1.84l0.07,-1.51l-0.77,0.05l-1.06,2.76l0.51,0.55l0.73,-0.25l0.91,2.04l-0.28,-0.59l-0.52,-0.23l-0.66,0.3l-0.07,0.64l-1.38,-0.1l-2.16,3.18l-0.53,1.86l0.29,0.6l-0.68,0.65l0.51,0.43l0.91,-0.21l0.37,0.92l-0.77,0.3l-0.2,0.39l-0.4,-0.04l-0.51,0.57l-0.14,1.03l0.67,1.37l-0.08,0.68l-0.79,1.29l-0.94,0.61l-0.41,1.07l-0.1,1.28l0.44,0.9l-0.4,2.81l-0.8,-0.33l-0.41,0.6l-1.02,-0.76l-0.57,-1.86l-0.93,-0.37l-2.36,-1.99l-0.76,-3.45l-13.25,-35.55ZM863.92,80.85l0.09,0.26l-0.08,0.23l0.03,-0.29l-0.04,-0.2ZM865.33,81.07l0.47,0.7l-0.04,0.47l-0.32,-0.25l-0.1,-0.93ZM867.67,77.93l0.43,0.83l-0.16,0.14l-0.42,-0.19l0.16,-0.77ZM877.04,64.5l-0.14,0.2l-0.03,-0.24l0.17,0.04ZM873.08,74.84l0.01,0.02l-0.03,0.03l0.01,-0.06ZM882.73,63.41l0.04,-1.17l0.41,-0.66l-0.18,-0.44l0.4,-0.5l0.62,-0.11l1.54,1.36l-0.49,0.65l-1.08,0.04l-0.27,0.43l0.57,1.3l-0.99,-0.18l-0.14,-0.57l-0.44,-0.16ZM879.31,65.98l0.61,0.41l-0.35,0.29l0.15,0.96l-0.39,-0.63l0.19,-0.53l-0.21,-0.5ZM878.07,70.51l0.09,-0.01l0.48,-0.08l-0.25,0.46l-0.32,-0.37Z", "name": "Maine" }, "US-MD": { "path": "M740.69,219.66l-2.04,-10.06l19.85,-4.49l-0.66,1.29l-0.94,0.08l-1.55,0.81l0.16,0.7l-0.42,0.49l0.23,0.78l-1.04,0.09l-0.72,0.41l-1.48,0.03l-1.14,-0.39l0.21,-0.36l-0.3,-0.49l-1.11,-0.31l-0.47,1.8l-1.63,2.85l-1.37,-0.39l-1.03,0.62l-0.41,1.26l-1.6,1.93l-0.36,1.04l-0.88,0.45l-1.3,1.87ZM760.76,204.58l37.02,-9.15l8.22,26.4l0.48,0.26l8.48,-2.22l0.24,0.71l0.6,0.03l0.38,0.95l0.52,-0.05l-0.38,1.96l-0.12,-0.26l-0.47,0.06l-0.73,0.86l-0.17,2.7l-0.6,0.19l-0.36,0.71l-0.02,1.47l-3.64,1.51l-0.37,0.76l-2.25,0.43l-0.56,0.65l-0.3,-1.09l0.5,-0.31l0.87,-1.85l-0.4,-0.51l-0.45,0.12l0.08,-0.5l-0.44,-0.42l-2.29,0.63l0.3,-0.6l1.15,-0.83l-0.17,-0.69l-1.36,-0.18l0.38,-2.24l-0.18,-1.02l-0.91,0.16l-0.53,1.76l-0.34,-0.69l-0.62,-0.07l-0.44,0.47l-0.5,1.39l0.53,1.02l-2.87,-2.14l-0.43,-0.19l-0.61,0.36l-0.73,-0.76l0.37,-0.84l-0.04,-0.84l0.76,-0.6l-0.08,-1.35l2.08,0.1l0.89,-0.45l0.36,-0.9l-0.32,-1.42l-0.43,-0.05l-0.54,1.31l-0.39,0.09l-1.05,-0.72l0.06,-0.4l-0.52,-0.28l-0.55,0.23l-0.22,-0.68l-0.73,0.1l-0.12,0.28l0.07,-0.74l0.65,-0.01l0.49,-0.37l0.22,-1.04l-0.54,-0.55l-0.57,0.71l-0.2,-0.53l0.88,-0.87l-0.25,-0.65l-0.54,-0.08l-0.09,-0.48l-0.42,-0.27l-0.35,0.15l-0.66,-0.53l0.89,-0.8l-0.24,-1.03l0.94,-2.38l-0.17,-0.43l-0.46,0.02l-0.66,0.66l-0.56,-0.16l-0.61,0.95l-0.74,-0.6l0.49,-3.59l0.6,-0.52l0.06,-0.61l4.22,-1.21l0.12,-0.7l-0.51,-0.3l-2.38,0.43l0.76,-1.27l1.42,-0.05l0.35,-0.5l-0.99,-0.67l0.44,-1.9l-0.63,-0.32l-1.2,1.82l0.05,-1.5l-0.59,-0.34l-0.68,1.1l-1.62,0.67l-0.31,1.65l0.39,0.54l0.65,0.12l-1.45,1.92l-0.2,-1.64l-0.64,-0.42l-0.61,0.73l0.07,1.45l-0.85,-0.29l-1.16,0.64l0.02,0.71l1.01,0.27l-0.37,0.54l-0.83,0.22l-0.05,0.34l-0.44,-0.04l-0.35,0.64l1.15,1.2l-1.88,-0.67l-1.21,0.59l0.16,0.69l1.56,0.58l0.91,0.93l0.72,-0.12l0.56,0.75l-0.98,-0.07l-1.15,1.36l0.32,0.77l1.57,0.92l-0.67,0.12l-0.21,0.41l0.8,1.08l-0.32,0.56l0.32,0.97l0.58,0.45l-0.52,1.09l0.99,1.25l0.96,3.54l0.61,0.84l2.07,1.63l0.42,0.81l-0.58,0.17l-0.64,-0.75l-1.45,-0.31l-1.64,-1.26l-1.33,-3.16l-0.73,-0.68l-0.3,0.37l0.11,0.7l1.28,3.54l1.14,1.31l2.05,0.74l1.03,1.11l0.64,0.14l0.91,-0.36l-0.03,1.11l1.66,1.54l0.1,1.1l-0.89,-0.35l-0.51,-1.29l-0.63,-0.45l-0.45,0.04l-0.13,0.44l0.27,0.79l-0.67,0.09l-0.65,-0.82l-1.41,-0.67l-2.39,0.63l-0.7,-0.67l-0.71,-1.49l-1.26,-0.71l-0.46,0.14l0.01,0.48l1.13,1.84l-0.22,-0.08l-1.62,-1.2l-1.66,-2.28l-0.45,-0.02l-0.37,1.44l-0.32,-0.79l-0.74,0.2l-0.21,0.27l0.33,0.72l-0.11,0.56l-0.76,0.53l-0.94,-1.5l0.07,-1.68l0.76,-0.6l-0.19,-0.74l0.78,-0.47l0.21,-1.61l1.07,-1.03l-0.0,-1.03l-0.46,-0.86l1.27,-2.19l-0.14,-0.54l-2.72,-1.68l-0.56,0.14l-0.63,1.08l-1.87,-0.26l-0.52,-0.83l-1.11,-0.51l-2.41,0.07l-1.25,-0.91l0.61,-1.35l-0.4,-0.97l-1.19,-0.3l-0.89,-0.66l-2.69,0.07l-0.36,-0.23l-0.11,-1.26l-1.04,-0.6l0.09,-1.2l-0.51,-0.29l-0.49,0.19l-0.23,-0.64l-0.52,-0.13l0.26,-0.83l-0.45,-0.58l-0.69,-0.12l-1.81,0.67l-2.24,-1.27ZM790.04,212.1l1.14,0.18l0.3,0.17l-0.52,0.29l-0.93,-0.63ZM803.05,225.67l-0.02,0.33l-0.21,-0.15l0.23,-0.19ZM807.02,229.13l-0.16,0.3l-0.13,0.07l0.02,-0.24l0.26,-0.12ZM797.57,220.61l-0.06,0.01l-0.09,0.03l0.12,-0.07l0.03,0.02ZM797.24,220.74l-0.26,0.56l-0.18,0.12l0.15,-0.61l0.29,-0.07ZM795.94,216.76l-0.29,0.29l-0.72,-0.27l0.02,-0.33l0.26,-0.36l0.72,0.67ZM794.58,212.85l-0.34,0.78l-0.59,0.23l0.02,-1.48l0.92,0.47ZM802.18,228.89l0.1,-0.11l0.12,0.08l-0.22,0.03Z", "name": "Maryland" }, "US-AR": { "path": "M498.73,376.99l-1.42,-38.01l-4.48,-23.98l37.68,-2.58l39.02,-3.58l0.8,1.6l1.01,0.7l0.11,1.77l-0.77,0.57l-0.22,0.94l-1.42,0.93l-0.29,1.04l-0.83,0.54l-1.19,2.59l0.02,0.7l0.53,0.26l10.94,-1.46l0.86,0.93l-1.18,0.37l-0.52,0.96l0.25,0.49l0.84,0.41l-3.6,2.7l0.02,0.84l0.83,1.04l-0.6,1.15l0.62,0.97l-1.42,0.74l-0.11,1.44l-1.45,2.09l0.12,1.64l0.91,3.1l-0.15,0.27l-1.08,-0.01l-0.33,0.26l-0.51,1.73l-1.52,0.95l-0.04,0.51l0.79,0.91l0.05,0.65l-1.11,1.21l-2.02,1.13l-0.21,0.62l0.43,1.0l-0.19,0.27l-1.23,0.03l-0.42,0.67l-0.32,1.89l0.47,1.57l0.02,3.08l-1.27,1.09l-1.54,0.13l0.23,1.49l-0.21,0.48l-0.93,0.25l-0.59,1.77l-1.49,1.19l-0.02,0.93l1.39,0.76l-0.03,0.7l-1.23,0.3l-2.24,1.23l0.03,0.67l0.99,0.82l-0.45,1.14l0.53,1.38l-1.09,0.62l-1.9,2.57l0.52,0.7l1.0,0.49l0.01,0.58l-0.98,0.29l-0.42,0.64l0.51,0.84l1.63,1.01l0.06,1.77l-0.59,0.98l-0.09,0.84l0.29,0.4l1.05,0.39l0.5,2.17l-1.09,1.01l0.06,2.11l-51.46,4.07l-0.83,-11.53l-1.18,-0.85l-0.9,0.16l-0.83,-0.35l-0.93,0.39l-1.22,-0.33l-0.57,0.72l-0.47,0.01l-0.49,-0.48l-0.82,-0.15l-0.63,-1.0Z", "name": "Arkansas" }, "US-MA": { "path": "M877.65,135.84l1.07,-0.19l0.85,-1.13l0.45,0.58l-1.06,0.64l-1.31,0.1ZM831.87,132.65l-0.46,-0.28l-10.4,2.53l-0.25,-0.18l-0.27,-14.8l29.99,-7.86l1.53,-1.8l0.34,-1.48l0.95,-0.35l0.61,-1.04l1.3,-1.08l1.23,-0.08l-0.44,1.05l1.36,0.55l-0.16,0.61l0.44,0.83l1.0,0.36l-0.06,0.32l0.39,0.28l1.31,0.19l-0.16,0.56l-2.52,1.87l-0.05,1.07l0.45,0.16l-1.11,1.41l0.23,1.08l-1.01,0.96l0.58,1.41l1.4,0.45l0.5,0.63l1.36,-0.57l0.33,-0.59l1.2,0.09l0.79,0.47l0.23,0.68l1.78,1.37l-0.07,1.25l-0.36,0.29l0.11,0.61l1.58,0.82l1.19,-0.14l0.68,1.2l0.22,1.14l0.89,0.68l1.33,0.41l1.48,-0.12l0.43,0.38l1.05,-0.23l3.35,-2.76l0.39,-0.69l0.54,0.02l0.56,1.86l-3.32,1.52l-0.94,0.82l-2.75,0.98l-0.49,1.65l-1.94,1.27l-0.81,-2.53l0.11,-1.35l-0.55,-0.31l-0.5,0.39l-0.93,-0.11l-0.3,0.51l0.25,0.92l-0.26,0.79l-0.4,0.06l-0.63,1.1l-0.6,-0.2l-0.5,0.48l0.22,1.86l-0.9,0.87l-0.63,-0.8l-0.47,0.01l-0.11,0.55l-0.26,0.03l-0.7,-2.02l-1.02,-0.35l0.44,-2.5l-0.21,-0.4l-0.77,0.4l-0.29,1.47l-0.69,0.2l-1.4,-0.64l-0.78,-2.12l-0.8,-0.22l-0.78,-2.15l-0.49,-0.24l-6.13,2.0l-0.3,-0.15l-14.84,4.19l-0.28,0.5ZM860.89,110.08l-0.02,-0.37l-0.14,-0.48l0.51,0.23l-0.35,0.62ZM876.37,122.8l-0.42,-0.66l0.06,-0.05l0.44,0.67l-0.09,0.05ZM875.46,121.25l-0.86,-0.11l-0.94,-1.42l1.44,1.0l0.36,0.54ZM871.54,119.46l-0.06,0.25l-0.35,-0.2l0.13,0.02l0.29,-0.07ZM871.87,135.18l0.01,-0.02l0.01,0.04l-0.02,-0.02ZM867.18,137.63l0.78,-0.56l0.28,-1.17l0.84,-1.19l0.17,0.26l0.46,-0.11l0.34,0.52l0.71,-0.01l0.19,0.38l-2.11,0.73l-1.34,1.31l-0.33,-0.17Z", "name": "Massachusetts" }, "US-AL": { "path": "M608.66,337.47l25.17,-2.91l19.4,-2.75l14.04,43.3l0.79,1.4l0.22,1.05l1.17,1.59l0.59,1.87l2.24,2.5l0.92,1.8l-0.11,2.13l1.8,1.13l-0.17,0.74l-0.63,0.1l-0.16,0.7l-0.98,0.84l-0.22,2.29l0.25,1.48l-0.77,2.3l-0.14,1.84l1.1,2.94l1.21,1.52l0.53,1.6l-0.08,5.02l-0.25,0.81l0.48,2.03l1.35,1.16l1.14,2.07l-47.65,6.92l-0.42,0.61l-0.08,2.99l2.64,2.75l2.0,0.97l-0.34,2.7l0.56,1.6l0.43,0.39l-0.94,1.69l-1.24,1.0l-1.13,-0.75l-0.34,0.49l0.66,1.46l-2.82,1.05l0.29,-0.64l-0.45,-0.86l-0.99,-0.77l-0.1,-1.11l-0.57,-0.22l-0.53,0.61l-0.32,-0.1l-0.89,-1.53l0.41,-1.67l-0.97,-2.21l-0.46,-0.45l-0.86,-0.2l-0.3,-0.89l-0.56,-0.17l-0.37,0.61l0.14,0.35l-0.77,3.1l-0.01,5.08l-0.59,0.0l-0.24,-0.71l-2.22,-0.44l-1.65,0.31l-5.46,-31.99l-0.99,-66.49l-0.02,-0.37l-1.07,-0.63l-0.69,-1.02Z", "name": "Alabama" }, "US-MO": { "path": "M468.68,225.54l24.71,-0.73l18.94,-1.43l22.11,-2.58l0.42,0.35l0.39,0.91l2.43,1.65l0.29,0.74l1.21,0.87l-0.51,1.37l-0.1,3.21l0.78,3.65l0.95,1.44l0.03,1.59l1.11,1.37l0.46,1.55l4.96,4.1l1.06,1.69l4.93,3.31l0.7,1.15l0.27,1.62l0.5,0.82l-0.18,0.69l0.47,1.8l0.97,1.63l0.77,0.73l1.04,0.16l0.83,-0.56l0.84,-1.4l0.57,-0.19l2.41,0.61l1.68,0.76l0.84,0.77l-0.97,1.95l0.26,2.28l-2.37,6.86l0.01,1.02l0.7,1.92l4.67,4.05l1.99,1.05l1.46,0.09l1.66,1.31l1.91,0.8l1.51,2.11l2.04,0.83l0.42,2.96l1.72,2.9l-1.1,1.94l0.18,1.38l0.75,0.33l2.31,4.25l1.94,0.92l0.55,-0.32l0.0,-0.65l0.87,1.1l1.07,-0.08l0.14,1.85l-0.37,1.07l0.53,1.6l-1.07,3.86l-0.51,0.07l-1.37,-1.13l-0.65,0.13l-0.78,3.34l-0.52,0.74l0.13,-1.06l-0.56,-1.09l-0.97,-0.2l-0.74,0.63l0.02,1.05l0.53,0.66l-0.04,0.7l0.58,1.34l-0.2,0.4l-1.2,0.39l-0.17,0.41l0.15,0.55l0.86,0.84l-1.71,0.37l-0.14,0.62l1.53,1.97l-0.89,0.75l-0.63,2.13l-10.61,1.42l1.06,-2.28l0.87,-0.61l0.18,-0.87l1.44,-0.96l0.25,-0.96l0.63,-0.37l0.29,-0.59l-0.22,-2.28l-1.05,-0.75l-0.2,-0.77l-1.09,-1.18l-39.24,3.61l-37.72,2.58l-3.21,-58.2l-1.03,-0.63l-1.2,-0.02l-1.52,-0.73l-0.19,-0.93l-0.76,-0.59l-0.34,-0.71l-0.36,-1.55l-0.55,-0.09l-0.3,-0.56l-1.13,-0.66l-1.4,-1.84l0.73,-0.51l0.09,-1.24l1.12,-1.27l0.09,-0.79l1.01,0.16l0.56,-0.43l-0.2,-2.24l-1.02,-0.74l-0.32,-1.1l-1.17,-0.01l-1.31,0.96l-0.81,-0.7l-0.73,-0.17l-2.67,-2.35l-1.05,-0.28l0.13,-1.6l-1.32,-1.72l0.1,-1.02l-0.37,-0.36l-1.01,-0.18l-0.59,-0.85l-0.84,-0.26l0.07,-0.53l-1.24,-2.88l-0.0,-0.74l-0.4,-0.49l-0.85,-0.29l-0.05,-0.54ZM583.77,294.59l-0.1,-0.1l-0.08,-0.15l0.11,-0.01l0.07,0.26Z", "name": "Missouri" }, "US-MN": { "path": "M439.34,42.76l26.81,-1.05l0.34,1.46l1.28,0.84l1.79,-0.5l1.05,-1.43l0.78,-0.31l2.13,2.19l1.71,0.28l0.31,1.2l1.83,1.4l1.79,0.48l2.64,-0.41l0.39,0.85l0.67,0.4l5.12,0.01l0.37,0.23l0.54,1.59l0.71,0.61l4.27,-0.78l0.77,-0.65l0.07,-0.69l2.43,-0.79l3.97,-0.02l1.42,0.7l3.39,0.66l-1.01,0.79l0.0,0.82l1.18,0.54l2.23,-0.16l0.52,2.08l1.58,2.29l0.71,0.05l1.03,-0.78l-0.04,-1.73l2.67,-0.46l1.43,2.17l2.01,0.79l1.54,0.18l0.54,0.57l-0.03,0.83l0.58,0.35l1.32,0.06l0.38,0.83l1.43,-0.19l1.12,0.22l2.22,-0.85l2.78,-2.55l2.49,-1.54l1.24,2.52l0.96,0.51l2.23,-0.66l0.87,0.36l5.98,-1.3l0.56,0.18l1.32,1.64l1.24,0.59l0.62,-0.01l1.61,-0.83l1.35,0.08l-0.93,1.03l-4.69,3.07l-6.35,2.82l-3.68,2.48l-2.15,2.49l-0.95,0.58l-6.63,8.66l-0.95,0.61l-1.08,1.56l-1.96,1.96l-4.17,3.55l-0.86,1.79l-0.55,0.44l-0.14,0.96l-0.78,-0.01l-0.46,0.51l0.98,12.22l-0.79,1.2l-1.05,0.08l-0.52,0.82l-0.83,0.15l-0.61,0.83l-2.06,1.19l-0.94,1.86l0.06,0.72l-1.69,2.39l-0.01,2.06l0.38,0.91l2.15,0.39l1.42,2.49l-0.52,1.92l-0.71,1.25l-0.05,2.12l0.45,1.32l-0.71,1.23l0.91,3.14l-0.51,4.08l3.95,3.03l3.02,0.4l1.89,2.25l2.87,0.5l2.45,1.93l2.39,3.59l2.64,1.8l2.09,0.09l1.07,0.71l0.88,0.1l0.82,1.36l1.03,0.45l0.23,0.39l0.28,2.03l0.68,1.3l0.39,4.82l-40.63,3.2l-40.63,2.09l-1.46,-38.98l-0.7,-1.27l-0.83,-0.78l-2.57,-0.79l-0.94,-1.91l-1.46,-1.79l0.21,-0.68l2.83,-2.34l0.97,-2.12l0.4,-2.44l-0.35,-1.58l0.23,-1.58l-0.18,-1.79l-0.5,-1.03l-0.18,-2.33l-1.81,-2.59l-0.47,-1.13l-0.21,-2.16l-0.66,-0.98l0.15,-1.66l-0.35,-1.52l0.53,-2.69l-1.08,-1.85l-0.49,-8.33l-0.42,-0.79l0.06,-3.92l-1.58,-3.96l-0.53,-0.65l-0.4,-1.37l0.05,-1.19l-0.48,-0.53l-1.36,-3.77l0.0,-3.22l-0.47,-1.97l0.27,-1.12l-0.57,-2.32l0.73,-2.56l-2.06,-6.9ZM468.97,33.61l1.22,0.46l0.99,-0.2l0.33,0.45l-0.05,1.72l-1.78,1.12l-0.15,-0.47l-0.4,-0.14l-0.16,-2.95Z", "name": "Minnesota" }, "US-CA": { "path": "M2.95,175.4l0.78,-1.24l0.46,0.46l0.59,-0.08l0.52,-1.18l0.8,-0.86l1.3,-0.26l0.56,-0.53l-0.15,-0.71l-0.93,-0.32l1.53,-2.79l-0.3,-1.58l0.14,-0.87l2.04,-3.3l1.31,-3.03l0.36,-2.12l-0.28,-1.0l0.16,-3.11l-1.36,-2.16l1.18,-1.38l0.67,-2.53l32.73,8.13l32.58,7.34l-13.67,64.68l25.45,34.66l36.6,51.1l13.3,17.72l-0.19,2.73l0.73,0.94l0.21,1.71l0.85,0.63l0.81,2.56l-0.07,0.91l0.63,1.46l-0.16,1.36l3.8,3.82l0.01,0.5l-1.95,1.53l-3.11,1.26l-1.2,1.99l-1.72,1.14l-0.33,0.81l0.38,1.03l-0.51,0.51l-0.1,0.9l0.08,2.29l-0.6,0.72l-0.64,2.44l-2.02,2.47l-1.6,0.14l-0.42,0.51l0.33,0.89l-0.59,1.34l0.54,1.12l-0.01,1.19l-0.78,2.68l0.57,1.02l2.74,1.13l0.34,0.83l-0.19,2.4l-1.18,0.78l-0.42,1.37l-2.27,-0.62l-1.25,0.6l-43.38,-3.34l0.17,-1.15l0.67,-0.51l-0.17,-1.06l-1.17,-1.38l-1.04,-0.15l0.23,-1.2l-0.28,-1.07l0.78,-1.33l-0.3,-4.25l-0.6,-2.3l-1.92,-4.07l-3.56,-4.07l-1.29,-1.98l-2.42,-2.11l-2.04,-3.01l-2.22,-0.89l-0.94,0.3l-0.39,0.96l-0.62,-0.73l-0.88,-0.22l-0.15,-0.31l0.61,-0.76l0.17,-1.57l-0.44,-2.06l-1.01,-1.95l-1.0,-0.74l-4.44,-0.19l-3.33,-1.81l-1.36,-1.26l-0.7,-0.12l-1.02,-1.19l-0.44,-2.6l-0.97,-0.47l-1.68,-2.31l-2.19,-1.73l-1.24,-0.41l-1.66,0.37l-1.15,-1.01l-1.25,0.03l-2.48,-1.83l-1.06,0.01l-1.49,-0.69l-4.91,-0.52l-1.12,-2.35l-1.43,-0.76l1.34,-2.45l-0.25,-1.36l0.74,-1.99l-0.63,-1.35l1.27,-2.45l0.33,-2.44l-0.99,-1.24l-1.26,-0.23l-1.4,-1.28l0.41,-1.62l0.79,-0.09l0.25,-0.45l-0.47,-2.2l-0.65,-0.77l-1.47,-0.84l-1.78,-3.97l-1.82,-1.25l-0.36,-2.75l-1.61,-2.58l0.07,-1.39l-0.33,-1.26l-1.16,-0.94l-0.74,-2.95l-2.41,-2.69l-0.55,-1.25l-0.02,-4.63l0.59,-0.57l-0.59,-1.14l0.51,-0.59l0.53,0.61l0.78,-0.02l0.84,-0.81l0.56,-1.33l0.8,0.04l0.21,-0.88l-0.43,-0.27l0.47,-1.19l-1.22,-3.68l-0.62,-0.48l-1.05,0.08l-1.93,-0.51l-1.04,-1.06l-1.89,-3.21l-0.8,-2.28l0.86,-2.39l0.09,-1.11l-0.27,-2.38l-0.32,-0.64l-0.54,-0.24l0.25,-1.19l0.69,-1.07l0.24,-2.71l0.47,-0.64l0.88,0.13l0.18,0.94l-0.7,2.13l0.05,1.15l1.18,1.32l0.55,0.1l0.58,1.28l1.16,0.78l0.4,1.01l0.89,0.41l0.83,-0.21l-0.21,-1.45l-0.65,-0.43l-0.18,-0.58l-0.24,-3.57l-0.56,-0.71l0.26,-0.69l-1.48,-1.06l0.5,-1.07l0.09,-1.06l-1.2,-1.58l0.78,-0.74l0.79,0.06l1.24,-0.73l1.25,1.02l1.87,-0.32l5.55,2.41l0.61,-0.09l0.64,-1.38l0.69,-0.04l1.92,2.53l0.25,0.18l0.63,-0.24l0.02,-0.38l-0.39,-0.93l-1.57,-1.89l-1.66,-0.32l0.27,-0.62l-0.28,-0.54l-0.48,0.09l-1.05,1.01l-1.84,-0.22l-0.43,0.28l-0.15,-0.51l-1.05,-0.4l0.24,-1.05l-0.85,-0.47l-1.0,0.28l-0.6,0.84l-1.09,0.4l-1.35,-0.9l-0.39,-0.88l-1.51,-1.44l-0.58,0.03l-0.64,0.61l-0.92,-0.12l-0.48,0.36l-0.33,1.88l0.21,0.78l-0.76,1.36l0.36,0.65l-0.47,0.59l-0.04,0.69l-2.16,-2.89l-0.44,-0.15l-0.25,0.32l-0.73,-1.0l-0.21,-1.03l-1.2,-1.17l-0.4,-1.05l-0.61,-0.18l0.65,-1.48l0.11,0.95l0.76,1.49l0.44,0.25l0.33,-0.38l-1.45,-5.21l-1.08,-1.42l-0.31,-2.68l-2.5,-2.87l-1.8,-4.48l-3.05,-5.54l1.09,-1.7l0.25,-1.97l-0.46,-2.11l-0.14,-3.61l1.34,-2.92l0.7,-0.74l-0.07,-1.54l0.42,-1.53l-0.41,-1.63l0.11,-1.96l-1.41,-4.06l-0.97,-1.15l0.06,-0.8l-0.42,-1.19l-2.91,-4.03l0.51,-1.35l-0.21,-2.69l2.23,-3.44ZM31.5,240.45l-0.06,0.1l-0.34,0.04l0.21,-0.05l0.19,-0.09ZM64.32,351.64l0.27,0.13l0.19,0.18l-0.31,-0.18l-0.15,-0.13ZM65.92,352.88l1.32,0.84l0.76,1.73l-0.89,-0.66l-1.14,0.03l-0.05,-1.94ZM62.72,363.08l1.36,2.08l0.57,0.53l-0.46,0.06l-0.83,-0.79l-0.65,-1.88ZM43.54,333.81l0.88,0.73l1.37,0.36l1.36,1.0l-2.82,-0.18l-0.71,-0.58l0.24,-0.66l-0.32,-0.67ZM47.89,335.89l0.94,-0.5l0.32,0.36l-0.37,0.14l-0.88,-0.0ZM46.05,352.4l0.29,-0.06l0.95,0.92l-0.61,-0.17l-0.64,-0.69ZM37.57,334.04l2.57,0.16l0.2,0.74l0.6,0.45l-1.21,0.64l-1.17,-0.1l-0.49,-0.44l-0.5,-1.44ZM34.94,332.37l0.06,-0.02l0.05,0.06l-0.01,-0.0l-0.1,-0.04Z", "name": "California" }, "US-IA": { "path": "M452.9,162.25l42.83,-2.19l40.56,-3.19l0.96,2.52l2.0,1.0l0.08,0.59l-0.9,1.8l-0.16,1.04l0.9,5.09l0.92,1.26l0.39,1.75l1.46,1.72l4.95,0.85l1.27,2.03l-0.3,1.03l0.29,0.66l3.61,2.37l0.85,2.41l3.84,2.31l0.62,1.68l-0.31,4.21l-1.64,1.98l-0.5,1.94l0.13,1.28l-1.26,1.36l-2.51,0.97l-0.89,1.18l-0.55,0.25l-4.56,0.83l-0.89,0.73l-0.61,1.71l-0.15,2.56l0.4,1.08l2.01,1.47l0.54,2.65l-1.87,3.25l-0.22,2.24l-0.53,1.42l-2.88,1.39l-1.02,1.02l-0.2,0.99l0.72,0.87l0.2,2.15l-0.58,0.23l-1.34,-0.82l-0.31,-0.76l-1.29,-0.82l-0.29,-0.51l-0.88,-0.36l-0.3,-0.82l-0.95,-0.68l-22.3,2.61l-15.13,1.17l-7.59,0.51l-20.78,0.47l-0.22,-1.06l-1.3,-0.73l-0.33,-0.67l0.58,-1.16l-0.21,-0.95l0.22,-1.39l-0.36,-2.19l-0.6,-0.73l0.07,-3.65l-1.05,-0.5l0.05,-0.91l0.71,-1.02l-0.05,-0.44l-1.31,-0.56l0.33,-2.54l-0.41,-0.45l-0.89,-0.16l0.23,-0.8l-0.3,-0.58l-0.51,-0.25l-0.74,0.23l-0.42,-2.81l0.5,-2.36l-0.2,-0.67l-1.36,-1.71l-0.08,-1.92l-1.78,-1.54l-0.36,-1.74l-1.09,-0.94l0.03,-2.18l-1.1,-1.87l0.21,-1.7l-0.27,-1.08l-1.38,-0.67l-0.42,-1.58l-0.45,-0.59l0.05,-0.63l-1.81,-1.82l0.56,-1.61l0.54,-0.47l0.73,-2.68l0.0,-1.68l0.55,-0.69l0.21,-1.19l-0.51,-2.24l-1.33,-0.29l-0.05,-0.73l0.45,-0.56l-0.0,-1.71l-0.95,-1.42l-0.05,-0.87Z", "name": "Iowa" }, "US-MI": { "path": "M612.24,185.84l1.83,-2.17l0.7,-1.59l1.18,-4.4l1.43,-3.04l1.01,-5.05l0.09,-5.37l-0.86,-5.54l-2.4,-5.18l0.61,-0.51l0.3,-0.79l-0.57,-0.42l-1.08,0.55l-3.82,-7.04l-0.21,-1.11l1.13,-2.69l-0.01,-0.97l-0.74,-3.13l-1.28,-1.65l-0.05,-0.62l1.73,-2.73l1.22,-4.14l-0.21,-5.34l-0.77,-1.6l1.09,-1.15l0.81,-0.02l0.56,-0.47l-0.27,-3.49l1.08,-0.11l0.67,-1.43l1.19,0.48l0.65,-0.33l0.76,-2.59l0.82,-1.2l0.56,-1.68l0.55,-0.18l-0.58,0.87l0.6,1.65l-0.71,1.8l0.71,0.42l-0.48,2.61l0.88,1.42l0.73,-0.06l0.52,0.56l0.65,-0.24l0.89,-2.26l0.66,-3.52l-0.08,-2.07l-0.76,-3.42l0.58,-1.02l2.13,-1.64l2.74,-0.54l0.98,-0.63l0.28,-0.64l-0.25,-0.54l-1.76,-0.1l-0.96,-0.86l-0.52,-1.99l1.85,-2.98l-0.11,-0.73l1.72,-0.23l0.74,-0.94l4.16,2.0l0.83,0.13l1.98,-0.4l1.37,0.39l1.19,1.04l0.53,1.14l0.77,0.49l2.41,-0.29l1.7,1.02l1.92,0.09l0.8,0.64l3.27,0.45l1.1,0.78l-0.01,1.12l1.04,1.31l0.64,0.21l0.38,0.92l-0.16,0.54l-0.66,-0.25l-0.94,0.57l-0.23,1.83l0.81,1.29l1.6,0.99l0.69,1.37l0.65,2.26l-0.12,1.73l0.77,5.57l-0.14,0.6l-0.57,0.2l-0.48,0.96l-0.75,0.08l-0.79,0.81l-0.17,4.47l-1.12,0.49l-0.18,0.82l-1.86,0.43l-0.73,0.6l-0.58,2.61l0.26,0.45l-0.21,0.52l0.25,2.58l1.38,1.31l2.9,0.84l0.91,-0.07l1.08,-1.23l0.6,-1.44l0.62,0.19l0.38,-0.24l1.01,-3.59l0.6,-1.06l-0.08,-0.52l0.97,-1.45l1.39,-0.39l1.07,-0.69l0.83,-1.1l0.87,-0.44l2.06,0.59l1.13,0.7l1.0,1.09l1.21,2.16l2.0,5.91l0.82,1.6l1.03,3.71l1.49,3.63l1.27,1.73l-0.33,3.93l0.45,2.49l-0.48,2.79l-0.34,0.44l-0.24,-0.33l-0.31,-1.71l-1.46,-0.52l-0.47,0.08l-1.48,1.36l-0.06,0.83l0.55,0.67l-0.83,0.57l-0.29,0.79l0.28,2.94l-0.49,0.75l-1.62,0.92l-1.06,1.85l-0.43,3.73l0.27,1.55l-0.33,0.93l-0.42,0.19l0.02,0.91l-0.64,0.3l-0.37,1.08l-0.52,0.52l-0.5,1.28l-0.02,1.05l-0.52,0.78l-20.37,4.25l-0.14,-0.86l-0.46,-0.33l-31.6,4.74ZM621.47,115.87l0.0,-0.07l0.12,-0.12l-0.01,0.03l-0.11,0.16ZM621.73,114.95l-0.07,-0.16l0.07,-0.14l-0.0,0.3ZM543.48,88.04l4.87,-2.38l3.55,-3.62l5.77,-1.36l1.39,-0.84l2.36,-2.71l0.97,0.04l1.52,-0.73l1.0,-2.25l2.82,-2.84l0.23,1.72l1.85,0.59l0.05,1.45l0.66,0.14l0.51,0.6l-0.17,3.14l0.44,0.95l-0.34,0.47l0.2,0.47l0.74,-0.02l1.08,-2.21l1.08,-0.9l-0.42,1.15l0.59,0.45l0.82,-0.67l0.52,-1.22l1.0,-0.43l3.09,-0.25l1.51,0.21l1.18,0.93l1.54,0.44l0.47,1.05l2.31,2.58l1.17,0.55l0.53,1.55l0.73,0.34l1.87,0.07l0.73,-0.4l1.07,-0.06l0.52,-0.65l0.88,-0.43l1.0,1.11l1.1,0.64l1.02,-0.25l0.68,-0.82l1.87,1.06l0.64,-0.34l1.65,-2.59l2.81,-1.89l1.7,-1.65l0.91,0.11l3.27,-1.21l5.17,-0.25l4.49,-2.72l2.56,-0.37l-0.01,3.24l0.29,0.71l-0.36,1.1l0.67,0.85l0.66,0.11l0.71,-0.39l2.2,0.7l1.14,-0.43l1.03,-0.87l0.66,0.48l0.21,0.71l0.85,0.22l1.27,-0.8l0.95,-1.55l0.66,-0.02l0.84,0.75l1.98,3.78l-0.86,1.04l0.48,0.89l0.47,0.36l1.37,-0.42l0.58,0.46l0.64,0.04l0.18,1.2l0.98,0.87l1.53,0.52l-1.17,0.68l-4.96,-0.14l-0.53,0.29l-1.35,-0.17l-0.88,0.41l-0.66,-0.76l-1.63,-0.07l-0.59,0.47l-0.07,1.22l-0.49,0.75l0.38,2.05l-0.92,-0.22l-0.89,-0.92l-0.77,-0.13l-1.96,-1.65l-2.41,-0.6l-1.6,0.04l-1.04,-0.5l-2.89,0.47l-0.61,0.45l-1.18,2.52l-3.48,0.73l-0.58,0.77l-2.06,-0.34l-2.82,0.93l-0.68,0.83l-0.56,2.51l-0.78,0.28l-0.81,0.87l-0.65,0.28l0.16,-1.96l-0.75,-0.91l-1.02,0.34l-0.76,0.92l-0.97,-0.39l-0.68,0.17l-0.37,0.4l0.1,0.83l-0.73,2.01l-1.2,0.59l-0.11,-1.38l-0.46,-1.06l0.34,-1.69l-0.17,-0.37l-0.66,-0.17l-0.45,0.58l-0.6,2.12l-0.22,2.57l-1.12,0.91l-1.26,3.02l-0.62,2.66l-2.56,5.33l-0.69,0.74l0.12,0.91l-1.4,-1.28l0.18,-1.75l0.63,-1.69l-0.41,-0.81l-0.62,-0.31l-1.36,0.85l-1.16,0.09l0.04,-1.29l0.81,-1.45l-0.41,-1.34l0.3,-1.09l-0.58,-0.98l0.15,-0.83l-1.9,-1.55l-1.1,-0.06l-0.59,-0.44l-0.86,0.2l-0.62,-0.2l0.3,-1.36l-0.94,-1.45l-1.13,-0.51l-2.23,-0.1l-3.2,-0.71l-1.55,0.59l-1.43,-0.42l-1.62,0.17l-4.56,-1.94l-15.37,-2.5l-2.0,-3.4l-1.88,-0.96l-0.76,0.26l-0.1,-0.3ZM603.38,98.65l-0.01,0.52l-0.46,0.32l-0.7,1.39l0.08,0.57l-0.65,-0.58l0.91,-2.16l0.83,-0.06ZM643.87,87.47l1.99,-1.52l0.17,-0.57l-0.27,-0.64l1.05,0.16l0.8,1.24l0.81,0.19l-0.27,1.08l-0.36,0.19l-1.5,-0.34l-0.77,0.45l-1.63,-0.24ZM635.6,77.64l0.56,-0.83l0.52,0.05l-0.37,1.32l0.11,0.71l-0.35,-0.9l-0.46,-0.35ZM636.53,79.17l0.09,0.14l0.01,0.01l-0.02,-0.01l-0.08,-0.14ZM637.39,81.25l0.4,0.45l0.22,0.61l-0.63,-0.71l0.01,-0.34ZM633.73,93.13l1.41,0.25l0.36,-0.18l0.4,0.21l-0.17,0.52l-0.75,0.11l-1.24,-0.9ZM618.85,96.77l0.62,2.25l-0.8,0.78l-0.39,-0.27l0.56,-2.76ZM613.26,110.83l0.47,0.3l-0.09,0.57l-0.45,-0.69l0.06,-0.17ZM612.23,113.57l0.0,-0.03l0.02,-0.04l-0.03,0.07ZM599.41,82.64l-0.23,-0.37l0.03,-0.4l0.37,0.32l-0.17,0.45ZM570.51,72.75l-0.51,-0.27l-1.16,0.06l-0.04,-1.56l1.0,-1.03l1.17,-2.09l1.84,-1.49l0.63,-0.0l0.53,-0.58l2.08,-0.89l3.34,-0.42l1.1,0.66l-0.54,0.38l-1.31,-0.12l-2.27,0.78l-0.15,0.29l0.3,0.59l0.71,0.13l-1.19,0.98l-1.4,1.89l-0.7,0.29l-0.36,1.45l-1.15,1.37l-0.66,2.04l-0.67,-0.87l0.75,-0.97l0.14,-1.95l-0.63,-0.37l-0.21,0.15l-0.6,0.92l-0.05,0.67ZM558.28,58.21l0.75,-0.98l-0.39,-0.33l0.56,-0.53l4.62,-2.98l1.97,-1.72l0.62,-0.18l-0.45,0.65l0.1,0.79l-0.43,0.49l-4.25,2.56l-0.86,0.99l0.24,0.36l-1.87,1.17l-0.61,-0.28Z", "name": "Michigan" }, "US-GA": { "path": "M654.05,331.71l22.02,-3.57l20.65,-3.86l-1.48,1.42l-0.51,1.68l-0.66,0.82l-0.41,1.73l0.11,1.23l0.82,0.78l1.84,0.8l1.03,0.12l2.7,2.03l0.84,0.24l1.9,-0.37l0.6,0.25l0.8,1.64l1.51,1.6l1.04,2.5l1.33,0.82l0.84,1.16l0.56,0.26l1.0,1.77l1.07,0.3l1.17,0.99l3.81,1.85l2.41,3.16l2.25,0.58l2.53,1.67l0.5,2.34l1.25,1.02l0.47,-0.16l0.31,0.49l-0.1,0.62l0.79,0.73l0.79,0.09l0.56,1.21l4.99,1.89l0.4,1.78l1.54,1.73l1.02,2.01l-0.07,0.81l0.49,0.69l0.11,1.24l1.04,0.79l1.17,0.17l1.25,0.62l0.28,0.53l0.57,0.23l1.12,2.56l0.76,0.57l0.08,2.68l0.77,1.48l1.38,0.9l1.52,-0.27l1.44,0.76l1.45,0.11l-0.59,0.78l-0.56,-0.35l-0.47,0.28l-0.4,0.99l0.62,0.91l-0.38,0.48l-1.38,-0.16l-0.77,-0.55l-0.65,0.44l0.26,0.71l-0.49,0.52l0.36,0.61l0.94,-0.04l0.5,0.29l-0.58,1.35l-1.43,0.27l-1.33,-0.44l-0.44,0.39l0.34,0.85l1.23,0.35l-0.5,0.87l0.23,0.35l-0.2,0.64l0.83,0.64l-0.33,0.44l-0.72,-0.13l-0.96,0.51l-0.1,0.62l1.09,0.45l0.05,0.95l0.48,-0.07l1.2,-1.17l-0.92,2.31l-0.31,-0.58l-0.59,-0.08l-0.44,0.72l0.29,0.7l0.98,0.83l-2.32,0.04l-0.92,-0.28l-0.63,0.3l0.06,0.63l0.55,0.34l2.76,0.24l1.07,0.66l-0.02,0.34l-0.56,0.22l-0.88,1.95l-0.5,-1.41l-0.45,-0.13l-0.6,0.33l-0.15,0.84l0.34,0.96l-0.6,0.11l-0.03,0.84l-0.3,0.16l0.07,0.46l1.33,1.15l-1.09,1.03l0.32,0.47l0.77,0.07l-0.39,0.92l0.06,0.88l-0.46,0.51l1.1,1.66l0.03,0.76l-0.79,0.33l-2.64,-0.17l-4.06,-0.96l-1.31,0.35l-0.18,0.74l-0.68,0.26l-0.35,1.25l0.28,2.08l0.95,1.36l0.13,4.25l-1.97,0.4l-0.54,-0.92l-0.12,-1.3l-1.33,-1.82l-49.22,5.14l-0.72,-0.56l-0.86,-2.7l-0.94,-1.51l-0.56,-0.38l0.16,-0.68l-0.73,-1.51l-1.82,-1.81l-0.43,-1.75l0.25,-0.8l0.06,-5.18l-0.6,-1.81l-1.19,-1.47l-1.03,-2.65l0.12,-1.65l0.78,-2.36l-0.25,-1.53l0.19,-2.11l1.62,-1.33l0.46,-1.47l-0.55,-0.61l-1.42,-0.69l0.09,-2.15l-0.97,-1.87l-2.18,-2.42l-1.03,-2.81l-0.75,-0.68l-0.17,-0.96l-0.77,-1.37l-13.99,-43.12ZM745.21,389.83l0.7,-0.26l-0.07,0.82l-0.29,-0.33l-0.34,-0.24ZM743.75,406.73l0.05,0.87l-0.01,0.46l-0.34,-0.56l0.3,-0.76Z", "name": "Georgia" }, "US-AZ": { "path": "M128.39,384.21l0.44,-1.81l1.29,-1.29l0.54,-1.11l0.48,-0.25l1.66,0.62l0.96,-0.03l0.52,-0.46l0.28,-1.17l1.31,-1.0l0.24,-2.73l-0.46,-1.24l-0.84,-0.66l-2.07,-0.67l-0.3,-0.61l0.8,-2.4l0.0,-1.39l-0.52,-1.2l0.57,-0.86l-0.2,-0.87l1.57,-0.27l2.29,-2.81l0.65,-2.43l0.65,-0.81l0.02,-3.17l0.55,-0.62l-0.29,-1.43l1.71,-1.14l1.03,-1.85l3.16,-1.29l2.03,-1.58l0.26,-0.53l-0.13,-1.04l-3.25,-3.49l-0.51,-0.22l0.22,-1.26l-0.66,-1.46l0.07,-0.91l-0.88,-2.76l-0.84,-0.56l-0.19,-1.65l-0.69,-0.8l0.19,-3.54l0.58,-0.87l-0.3,-0.86l1.04,-0.4l0.4,-1.42l0.14,-3.2l-0.76,-3.66l0.47,-0.88l0.29,-1.67l-0.4,-3.0l0.85,-2.56l-0.8,-1.87l-0.03,-0.92l0.43,-0.52l0.34,-1.35l2.54,-0.63l1.75,0.99l1.43,-0.19l0.96,2.24l0.79,0.71l1.54,0.14l1.01,-0.5l1.02,-2.27l0.94,-1.19l2.57,-16.95l42.43,5.78l42.56,4.67l-11.82,123.66l-36.89,-4.05l-36.34,-18.98l-28.44,-15.56Z", "name": "Arizona" }, "US-MT": { "path": "M166.3,57.31l0.69,-0.1l0.33,-0.38l-0.9,-1.99l0.83,-0.96l-0.39,-1.3l0.09,-0.96l-1.24,-1.93l-0.24,-1.49l-1.03,-1.33l-1.19,-2.44l3.53,-20.65l43.66,6.71l43.06,5.23l42.75,3.84l43.15,2.53l-3.53,86.06l-28.11,-1.47l-26.82,-1.91l-26.78,-2.4l-25.84,-2.79l-0.44,0.35l-1.22,10.41l-1.51,-2.01l-0.03,-0.91l-1.19,-2.35l-1.25,-0.74l-1.8,0.92l0.03,1.05l-0.72,0.42l-0.34,1.56l-2.42,-0.41l-1.91,0.57l-0.92,-0.85l-3.36,0.09l-2.38,-0.96l-1.68,0.58l-0.84,1.49l-4.66,-1.6l-1.3,0.37l-1.12,0.9l-0.31,0.67l-1.65,-1.4l0.22,-1.43l-0.9,-1.71l0.4,-0.36l0.07,-0.62l-1.17,-3.08l-1.45,-1.25l-1.44,0.36l-0.21,-0.64l-1.08,-0.9l-0.41,-1.37l0.68,-0.61l0.2,-1.41l-0.77,-2.38l-0.77,-0.35l-0.31,-1.58l-1.51,-2.54l0.23,-1.51l-0.56,-1.26l0.34,-1.4l-0.73,-0.86l0.48,-0.98l-0.21,-0.74l-1.14,-0.75l-0.13,-0.59l-0.85,-0.91l-0.8,-0.4l-0.51,0.37l-0.07,0.74l-0.7,0.27l-1.13,1.22l-1.75,0.37l-1.21,1.07l-1.08,-0.85l-0.64,-1.01l-1.06,-0.44l0.02,-0.86l0.74,-0.63l0.24,-1.06l-0.61,-1.6l0.9,-1.09l1.07,-0.08l0.83,-0.8l-0.26,-1.14l0.38,-1.07l-0.95,-0.81l-0.04,-0.81l0.66,-1.28l-0.59,-1.07l0.74,-0.07l0.38,-0.42l-0.04,-1.77l1.83,-3.73l-0.14,-1.05l0.89,-0.62l0.6,-3.17l-0.78,-0.5l-1.8,0.37l-1.33,-0.11l-0.64,-0.55l0.37,-0.83l-0.62,-0.97l-0.66,-0.23l-0.72,0.35l-0.07,-0.95l-1.74,-1.63l0.04,-1.84l-1.68,-1.82l-0.08,-0.69l-1.55,-2.88l-1.07,-1.29l-0.57,-1.63l-2.35,-1.34l-0.95,-1.95l-1.44,-1.19Z", "name": "Montana" }, "US-MS": { "path": "M555.49,431.1l0.67,-0.97l-1.05,-1.76l0.18,-1.63l-0.81,-0.87l1.69,-0.25l0.47,-0.54l0.4,-2.74l-0.77,-1.82l1.56,-1.79l0.25,-3.58l0.74,-2.26l1.89,-1.25l1.15,-1.97l1.4,-1.04l0.34,-0.78l-0.04,-0.99l-0.63,-0.96l1.14,-0.28l0.96,-2.59l0.91,-1.31l-0.16,-0.86l-1.54,-0.43l-0.35,-0.96l-1.83,-1.04l-0.07,-2.14l-0.93,-0.74l-0.45,-0.84l-0.02,-0.37l1.14,-0.29l0.47,-0.69l-0.26,-0.89l-1.41,-0.49l0.23,-1.77l0.98,-1.54l-0.77,-1.06l-1.08,-0.31l-0.15,-2.82l0.9,-0.54l0.23,-0.8l-0.62,-2.52l-1.25,-0.66l0.7,-1.33l-0.07,-2.22l-2.02,-1.52l1.14,-0.47l0.12,-1.41l-1.34,-0.89l1.58,-2.04l0.93,-0.31l0.36,-0.69l-0.52,-1.56l0.42,-1.35l-0.9,-0.89l1.6,-0.83l1.24,-0.27l0.59,-0.77l-0.09,-1.07l-1.41,-0.95l1.39,-1.08l0.62,-1.77l0.5,0.11l0.45,-0.28l0.34,-0.98l-0.2,-0.77l1.48,-0.43l1.22,-1.21l0.07,-3.53l-0.46,-1.53l0.36,-1.78l0.73,0.09l0.68,-0.33l0.42,-0.87l-0.41,-1.06l2.72,-1.71l0.58,-1.06l-0.29,-1.28l36.45,-4.1l0.86,1.26l0.85,0.45l0.99,66.5l5.52,32.95l-0.73,0.69l-1.53,-0.3l-0.91,-0.94l-1.32,1.06l-1.23,0.17l-2.17,-1.26l-1.85,-0.19l-0.83,0.36l-0.34,0.44l0.32,0.41l-0.56,0.36l-3.96,1.66l-0.05,-0.5l-0.96,-0.52l-1.0,0.04l-0.59,1.0l0.76,0.61l-1.59,1.21l-0.32,1.28l-0.69,0.3l-1.34,-0.06l-1.16,-1.86l-0.08,-0.89l-0.92,-1.47l-0.21,-1.01l-1.4,-1.63l-1.16,-0.54l-0.47,-0.78l0.1,-0.62l-0.69,-0.92l0.21,-1.99l0.5,-0.93l0.66,-2.98l-0.06,-1.23l-0.43,-0.29l-34.66,3.41Z", "name": "Mississippi" }, "US-SC": { "path": "M697.56,324.11l4.86,-2.69l1.02,-0.05l1.11,-1.38l3.93,-1.9l0.45,-0.88l0.63,0.22l22.71,-3.36l0.07,1.22l0.42,0.57l0.71,0.01l1.21,-1.3l2.82,2.54l0.46,2.48l0.55,0.52l19.74,-3.49l22.74,15.07l0.02,0.55l-2.48,2.18l-2.44,3.67l-2.41,5.72l-0.09,2.74l-1.08,-0.21l0.85,-2.73l-0.64,-0.23l-0.76,0.87l-0.56,1.38l-0.11,1.55l0.84,0.95l1.05,0.23l0.44,0.91l-0.75,0.08l-0.41,0.56l-0.87,0.02l-0.24,0.68l0.94,0.45l-1.1,1.13l-0.07,1.02l-1.34,0.63l-0.5,-0.61l-0.5,-0.08l-1.07,0.87l-0.56,1.76l0.43,0.87l-1.2,1.23l-0.61,1.44l-1.2,1.01l-0.9,-0.4l0.27,-0.6l-0.53,-0.74l-1.38,0.31l-0.11,0.43l0.36,0.77l-0.52,0.03l0.05,0.76l0.72,0.58l1.3,0.43l-0.12,0.39l-0.88,0.94l-1.22,0.23l-0.25,0.51l0.33,0.45l-2.3,1.34l-1.42,-0.85l-0.56,0.11l-0.11,0.67l1.19,0.78l-1.54,1.57l-0.72,-0.75l-0.5,0.52l-0.0,0.74l-0.69,-0.37l-0.85,-0.0l-1.34,-0.84l-0.45,0.5l0.16,0.53l-1.73,0.17l-0.44,0.37l-0.06,0.77l0.65,0.23l1.43,-0.17l-0.26,0.55l0.42,0.25l1.91,-0.15l0.11,0.22l-0.97,0.86l-0.32,0.78l0.57,0.49l0.94,-0.53l0.03,0.21l-1.12,1.09l-0.99,0.43l-0.21,-2.04l-0.69,-0.27l-0.22,-1.55l-0.88,-0.15l-0.31,0.58l0.86,2.7l-1.12,-0.66l-0.63,-1.0l-0.4,-1.76l-0.65,-0.2l-0.52,-0.63l-0.69,0.0l-0.27,0.6l0.84,1.02l0.01,0.68l1.11,1.83l-0.02,0.86l1.22,1.17l-0.62,0.35l0.03,0.98l-1.2,3.56l-1.52,-0.78l-1.52,0.26l-0.97,-0.68l-0.54,-1.03l-0.17,-2.93l-0.86,-0.75l-1.06,-2.47l-1.04,-0.95l-3.23,-1.33l-0.49,-2.65l-1.12,-2.17l-1.43,-1.58l-0.06,-1.07l-0.76,-1.21l-4.82,-1.69l-0.58,-1.27l-1.21,-0.37l0.02,-0.7l-0.53,-0.87l-0.87,0.0l-0.73,-0.61l0.03,-1.21l-0.66,-1.26l-2.7,-1.78l-2.16,-0.52l-2.36,-3.12l-3.93,-1.93l-1.22,-1.03l-0.83,-0.12l-1.05,-1.81l-0.51,-0.22l-0.91,-1.21l-1.18,-0.68l-0.99,-2.42l-1.54,-1.65l-1.02,-1.87l-1.06,-0.37l-1.93,0.37l-0.46,-0.16l-2.75,-2.19l-1.06,0.02l-1.7,-0.74l-0.52,-0.53l0.36,-2.22l0.64,-0.78l0.34,-1.39l1.36,-1.23l0.4,-0.98ZM750.38,375.27l0.73,-0.08l0.51,0.45l-1.23,1.9l0.28,-1.22l-0.3,-1.06Z", "name": "South Carolina" }, "US-RI": { "path": "M859.15,133.1l0.33,0.01l1.02,2.65l-0.31,0.56l-1.04,-3.22ZM858.41,136.77l-0.28,-0.34l0.24,-1.5l0.41,1.53l-0.37,0.31ZM851.13,141.49l0.22,-0.46l-0.53,-2.22l-3.14,-10.0l5.61,-1.84l0.76,2.06l0.8,0.25l0.19,0.73l0.08,0.41l-0.77,0.25l0.03,0.29l0.51,1.45l0.59,0.5l-0.6,0.15l-0.46,0.73l0.87,0.97l-0.14,1.22l0.94,2.18l-0.32,2.08l-1.33,0.23l-3.15,2.19l-0.16,-1.21ZM855.93,131.57l0.26,0.1l0.01,0.09l-0.17,-0.08l-0.1,-0.11ZM857.32,132.24l0.23,0.48l-0.2,0.31l-0.04,-0.39l0.01,-0.4ZM855.92,145.03l0.11,0.11l-0.18,0.1l-0.03,-0.14l0.11,-0.07Z", "name": "Rhode Island" }, "US-CT": { "path": "M823.44,156.54l2.83,-3.23l-0.07,-0.54l-1.31,-1.25l-3.5,-15.89l9.81,-2.41l0.6,0.46l0.65,-0.26l0.23,-0.58l14.16,-4.0l3.2,10.18l0.47,1.96l-0.04,1.69l-1.65,0.32l-0.91,0.81l-0.69,-0.36l-0.5,0.11l-0.18,0.91l-1.15,0.07l-1.27,1.27l-0.62,-0.14l-0.56,-1.02l-0.89,-0.09l-0.21,0.67l0.75,0.64l0.08,0.54l-0.89,-0.02l-1.02,0.87l-1.65,0.07l-1.15,0.94l-0.86,-0.09l-2.05,0.82l-0.4,-0.68l-0.61,0.11l-0.89,2.12l-0.59,0.29l-0.83,1.29l-0.79,-0.05l-0.94,0.74l-0.2,0.63l-0.53,0.05l-0.88,0.75l-2.77,3.07l-0.96,0.27l-1.24,-1.04Z", "name": "Connecticut" } }, "height": 589.0572567800147, "projection": { "type": "aea", "centralMeridian": -100.0 }, "width": 900.0 });

================================================
File: src/layouts/DefaultLayout.tsx
================================================
import { useState } from "react";
import Sidebar from "../components/Sidebar";
import Header from "../components/Header";
import Footer from "../components/Footer/Footer";

export default function DefaultLayout({
  children,
}: {
  children: any;
}) {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  return (
    <>
      {/* <!-- ===== Page Wrapper Star ===== --> */}
      <div className="flex h-screen overflow-hidden">
        {/* <!-- ===== Sidebar Star ===== --> */}
        <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
        {/* <!-- ===== Sidebar End ===== --> */}

        {/* <!-- ===== Content Area Star ===== --> */}
        <div className="relative flex flex-1 flex-col overflow-y-auto overflow-x-hidden">
          {/* <!-- ===== Header Star ===== --> */}
          <Header sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
          {/* <!-- ===== Header End ===== --> */}

          {/* <!-- ===== Main Content Star ===== --> */}
          <main className="min-h-[calc(100vh-64px)] sm:min-h-[calc(100vh-88px)] flex flex-col">
            <div className="flex-grow max-w-screen-2xl p-4 md:p-6 2xl:p-10">
              {children}
            </div>
            {/* // FOOTER  */}
            <Footer />
          </main>
          {/* <!-- ===== Main Content End ===== --> */}
        </div>
        {/* <!-- ===== Content Area End ===== --> */}
      </div>
      {/* <!-- ===== Page Wrapper End ===== --> */}
    </>
  );
}


================================================
File: src/routes/routes.ts
================================================
import CalendarBox from "../components/CalenderBox/CalenderBox";
import ProfileBox from "../components/ProfileBox";
import SettingBoxes from "../components/SettingBoxes";
import ApiIntegeration from "../Pages/ApiIntegeration/ApiIntegeration";
import EmployeeList from "../Pages/CallManage/EmployeeList";
import EmployeeReport from "../Pages/CallManage/EmployeeReport";
import ContactList from "../Pages/ContactsUpload/ContactList";
import ContactUpload from "../Pages/ContactsUpload/ContactUpload";
import AddLeads from "../Pages/Leads/AddLeads";
import AllLeads from "../Pages/Leads/AllLeads";
import FollowupLeads from "../Pages/Leads/FollowupLeads";
import ImportedLeads from "../Pages/Leads/ImportedLeads";
import ImportLeads from "../Pages/Leads/ImportLeads";
import LeadAction from "../Pages/Leads/LeadAction";
import OutsourcedLeads from "../Pages/Leads/OutsourcedLeads";
import Logout from "../Pages/Logout";
import ManageDoctors from "../Pages/ManageDoctors/ManageDoctors";
import ProductAndServiceDash from "../Pages/ProductAndServices/ProductAndServiceDash";
import CallReport from "../Pages/Reports/CallReport";
import ManageReports from "../Pages/Reports/ManageReports";
import Settings from "../Pages/Settings/Settings";
import SMSCompose from "../Pages/SMS/SMSCompose";
import SMSReport from "../Pages/SMS/SMSReport";
import WhatsAppCompose from "../Pages/WhatsAppPanel/WhatsAppCompose";
import WhatsAppReport from "../Pages/WhatsAppPanel/WhatsAppReport";

const navRoutes = [
  {
    path: "doctors",
    component: SMSReport,
  },
  {
    path: "patients",
    component: SMSReport,
  },
  {
    path: "pharmacy",
    component: SMSReport,
  },
  {
    path: "billing",
    component: SMSReport,
  },
  {
    path: "logout",
    component: Logout,
  },
  {
    path: "api-integeration",
    component: ApiIntegeration,
  },
  {
    path: "calendar",
    component: CalendarBox,
  },
  {
    path: "call-manage/employee",
    component: EmployeeList,
  },
  {
    path: "call-manage/employees-report",
    component: EmployeeReport,
  },
  {
    path: "/leads/add",
    component: AddLeads,
  },
  {
    path: "/leads/all",
    component: AllLeads,
  },
  {
    path: "/leads/followup",
    component: FollowupLeads,
  },
  {
    path: "/leads/imported-leads",
    component: ImportedLeads,
  },
  {
    path: "/leads/outsourced-leads",
    component: OutsourcedLeads,
  },
  {
    path: "/leads/:leadId",
    component: LeadAction,
  },
  {
    path: "/import",
    component: ImportLeads,
  },
  {
    path: "/reports/call",
    component: CallReport,
  },
  {
    path: "/reports/manage",
    component: ManageReports,
  },
  {
    path: "products-service",
    component: ProductAndServiceDash,
  },
  {
    path: "settings",
    component: Settings,
  },
  {
    path: "settings/:id",
    component: Settings,
  },
  {
    path: "profile/settings",
    component: SettingBoxes,
  },
  {
    path: "profile",
    component: ProfileBox,
  },
  {
    path: "/sms/compose",
    component: SMSCompose,
  },
  {
    path: "/sms/report",
    component: SMSReport,
  },
  {
    path: "/whatsapp/compose",
    component: WhatsAppCompose,
  },
  {
    path: "/whatsapp/report",
    component: WhatsAppReport,
  },
  {
    path: "/Upload-contacts",
    component: ContactUpload,
  },
  {
    path: "/Upload-contacts/:id",
    component: ContactList,
  },
];

export default navRoutes;


================================================
File: src/types/Lead.ts
================================================
export type Lead = {
  avatar: string;
  name: string;
  email: string;
  project: string;
  duration: number;
  status: string;
};


================================================
File: src/types/UrlProvider.d.ts
================================================
// UrlProvider.d.ts
export interface EndPointType {
  LOGIN: string;
  SIGNUP: string;
  USER_REGISTER: string;
  PRODUCT_SERVICE: string;
  LEAD_SOURCES: string;
  LEAD_STATUS: string;
  LOST_REASON: string;
  GENERAL_DATA: string;
  EMPLOYEE_REPORT: string;
  LEADS_DATA: string;
  LEADS_FOLLOWUP_DATA: string;
  CALL_LIST: string;
  PRODUCT_SALE_REPORT: string;
  CALENDAR: string;
  GET_CURL: string;
  USERS: string;
  BULK_UPDATE: string;
  BULK_DELETE: string;
  UPDATE_NOTIFICATION: string;
  Funnel: string;
  Crefunel: string;
  SubscrPlane: string;
  Faq: string;
  PolicyQ: string;
  PolicyA: string;
  Policyf: string;
  planget: string;
  Notifi: string;
  Notifiborad: string;
  UserapiAl: string;
  Userme: string;
  Userapi: string;
  UserapiA: string;
  UserapiS: string;
  Rsetpas: string;
  Videoapi: string;
  Tages: string;
  Setintags: string;
  UserPost: string;
  Permission: string;
  feature: string;
}

export const BASE_URL: string;
export const END_POINT: EndPointType;


================================================
File: src/types/api.ts
================================================
// api.d.ts
import { NavigateFunction } from "react-router-dom";
import { AxiosResponse } from "axios";

export interface ApiResponse<T = any> {
  data?: T;
  error?: string;
  message?: string;
  options?: T;
}

export interface ApiConfig {
  method: string;
  url: string;
  headers: {
    "Content-Type"?: string;
    Authorization: string;
    timeout?: number;
  };
  maxBodyLength?: number;
  data?: any;
  params?: Record<string, any>;
}

export interface ApiMethods {
  getAuthAPI: <T = any>(
    endPoint: string,
    tokenRequired?: boolean,
    // Token?: string,
    // navigate?: NavigateFunction,
    params?: Record<string, any>
  ) => Promise<ApiResponse<T>>;

  postAuthAPI: <T = any>(
    body: any,
    endPoint: string,
    // navigate?: NavigateFunction | null,
    tokenRequired?: boolean
  ) => Promise<ApiResponse<T>>;

  postAuthAPI1: <T = any>(
    body: any,
    endPoint: string,
    Token?: string,
    navigate?: NavigateFunction | null,
    isFormData?: boolean,
    config?: any
  ) => Promise<ApiResponse<T>>;

  DeleteAuthAPI: <T = any>(
    id: string | number,
    endPoint: string,
    tokenRequired: boolean,
    body?: any
    // Token?: string,
    // navigate?: NavigateFunction
  ) => Promise<ApiResponse<T>>;

  updateAuthAPI: <T = any>(
    body: any,
    id: string | number | null,
    endPoint: string,
    tokenRequired?: boolean

    // Token?: string,
    // navigate?: NavigateFunction
  ) => Promise<ApiResponse<T>>;

  PutAuthAPI: <T = any>(
    body: any | null,
    id: string | null,
    endPoint: string,
    tokenRequired?: boolean
    // navigate?: NavigateFunction
  ) => Promise<ApiResponse<T>>;
}


================================================
File: src/types/brand.ts
================================================
export type BRAND = {
  logo: string;
  name: string;
  visitors: number;
  revenues: string;
  sales: number;
  conversion: number;
};


================================================
File: src/types/cards.ts
================================================
export type CardItemProps = {
  imageSrc?: string;
  name?: string;
  role?: string;
  cardImageSrc?: string;
  cardTitle?: string;
  cardContent?: string;
};


================================================
File: src/types/chat.ts
================================================
export type Chat = {
  active?: any;
  seen?: boolean;
  avatar: string;
  name: string;
  text: string;
  time: string;
  textCount: number;
  dot: number;
};


================================================
File: src/types/companyDetailsTypes.ts
================================================

export interface CompanySettings {
    dateFormat: string;
    timezone: string;
    currency: string;
    language: string;
    fiscalYearStart: string;
  }
  
  export interface PrimaryContact {
    name: string;
    email: string;
    phone: string;
  }
  
  export interface Subscription {
    plan: string;
    startDate: string;
    endDate: string;
    status: string;
    features?: string[];
  }
  
  export interface CompanyData {
    name: string;
    industry: string;
    address: string;
    phone: string;
    email: string;
    website: string;
    status: string;
    settings: CompanySettings;
    logo: string;
    size: string;
    taxId: string;
    billingAddress: string;
    primaryContact: PrimaryContact;
    subscription?: Subscription;
  }
  
  export interface UserData {
    _id: string;
    name: string;
    email: string;
    phone: string;
    companyCode: string;
    role: string;
    company: CompanyData;
  }

================================================
File: src/types/country.ts
================================================
export type Country = {
  name: string;
  flag: string;
  percentage: number;
};


================================================
File: src/types/dataStats.ts
================================================
import { ReactNode } from "react";

export type dataStats = {
  icon?: string | ReactNode;
  color?: string;
  title?: string;
  value?: string;
  growthRate?: number;
  percent?: number;
  webroute?: string;
};


================================================
File: src/types/deviceType.ts
================================================
export type DeviceType = 'mobile' | 'tablet' | 'desktop';


================================================
File: src/types/employeePerformance.ts
================================================
export type EMPLOYEE_PERFORMANCE = {
  active?: any;
  avatar: string;
  name: string;
  callDuration: string;
  revenues: string;
  closeDeals: number;
  openDeals: number;
  failDeals: number;
  conversion: number;
  assignedLeads: number
};

================================================
File: src/types/environment.d.ts
================================================
declare global {
    namespace NodeJS {
      interface ProcessEnv {
        MONGO_URI: string;
        SESSION_SECRET: string;
        REFRESH_SECRET: string;
        NODE_ENV: 'development' | 'production' | 'test';
      }
    }
  }
  
  export {};

================================================
File: src/types/faq.ts
================================================
export type FAQ = {
  header: string;
  id: number;
  text: string;
};


================================================
File: src/types/faqItem.ts
================================================
import { FAQ } from "./faq";

export type FaqItem = {
  active: number | null;
  handleToggle: (index: number) => void;
  faq: FAQ;
};


================================================
File: src/types/package.ts
================================================
export type Package = {
  name: string;
  price: number;
  invoiceDate: string;
  status: string;
};


================================================
File: src/types/product.ts
================================================
export type Product = {
  image: string;
  name: string;
  category: string;
  price: number;
  sold: number;
  profit: number;
};


================================================
File: src/types/scrollIndicatorTypes.ts
================================================
// types/ScrollIndicator.ts

export interface ScrollIndicatorHook {
    navRef: React.RefObject<HTMLElement>;
    isVisible: boolean;
    scrollToBottom: () => void;
  }
  
  export interface ScrollIndicatorButtonProps {
    onClick: () => void;
    className?: string;
  }

================================================
File: src/types/selectType.ts
================================================
export type SelectOption = {
  label: string;
  value: any;
};

export type SelectProps = {
  /**
   * Custom CSS classes for the select component
   */
  customClasses?: string;
  wrapperClasses?: string;

  /**
   * Custom inline styles for the select component
   */
  customStyles?: string;

  /**
   * Whether the select component is disabled
   */
  disabled?: boolean;

  /**
   * The label for the select component
   */
  label?: string;

  /**
   * Whether the select component is required
   */
  required?: boolean;

  /**
   * The options for the select component
   */
  options: SelectOption[];

  /**
   * The currently selected option
   */
  selectedOption?: any;

  placeholder?:string

  /**
   * A function to set the selected option
   */
  setSelectedOption?: (option: any) => void;
};


================================================
File: src/types/statusStats.ts
================================================
import { ReactNode } from "react";

export type statusStatsType = {
  icon?: string | ReactNode;
  color?: string;
  title?: string;
  value?: string | number;
  nextValue?: string | number;
  growthRate?: number;
  percent?: number;
  webroute?: string;
  statusId?: string;
};


================================================
File: src/types/targetStats.ts
================================================
import { ReactNode } from "react";

export type targetStatsType = {
  icon?: string | ReactNode;
  color?: string;
  title?: string;
  value?: string;
  salesValue?: number;
  growthRate?: number;
  positiveSentiment?: boolean;
  targetSalesValue?: number;
};


================================================
File: src/types/topData.ts
================================================
export type TopData = {
  url?: string;
  view?: string;
  unique?: string;
  percent?: number;
};


================================================
File: src/utils/GetLocation.tsx
================================================
import { useState } from 'react';

interface Location {
  latitude: number;
  longitude: number;
}

const GetLocation = () => {
  const [location, setLocation] = useState<Location | null>(null);
  const [error, setError] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);

  const getLocation = () => {
    setLoading(true);
    setError('');

    // Check if geolocation is supported by the browser
    if (!navigator.geolocation) {
      setError('Geolocation is not supported by your browser');
      setLoading(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      // Success callback
      (position) => {
        setLocation({
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
        });
        setLoading(false);
      },
      // Error callback
      (error: GeolocationPositionError) => {
        setError(error.message);
        setLoading(false);
      },
      // Options
      {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0,
      }
    );
  };

  const getGoogleMapsUrl = (latitude: number, longitude: number) => {
    return `https://www.google.com/maps?q=${latitude},${longitude}`;
  };

  return (
    <div className="p-4">
      <button
        onClick={getLocation}
        disabled={loading}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-400"
      >
        {loading ? 'Getting Location...' : 'Get Current Location'}
      </button>

      {error && (
        <div className="mt-4 text-red-500">
          Error: {error}
        </div>
      )}

      {location && (
        <div className="mt-4 space-y-2">
          <h3 className="font-bold">Your Location:</h3>
          <p>Latitude: {location.latitude}</p>
          <p>Longitude: {location.longitude}</p>
          <a
            href={getGoogleMapsUrl(location.latitude, location.longitude)}
            target="_blank"
            rel="noopener noreferrer"
            className="inline-block mt-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
          >
            View on Google Maps
          </a>
        </div>
      )}
    </div>
  );
};

export default GetLocation;

================================================
File: src/utils/TokenVerify.ts
================================================
import { jwtDecode } from "jwt-decode";
import { postAuthAPI } from "../api";
import { END_POINT } from "../api/UrlProvider";

interface TokenPayload {
  _id?: string;
  role?: string;
  companyId?: string;
  iat: number;
  exp: number;
}

export const isTokenValid = (token: string | null): boolean => {
  if (!token) return false;

  try {
    const decoded = jwtDecode<TokenPayload>(token);
    // Check if token is expired
    const currentTime = Math.floor(Date.now() / 1000);
    if (decoded.exp < currentTime) {
      return false;
    }

    // Validate required fields exist
    if (!decoded._id || !decoded.role || !decoded.companyId) {
      return false;
    }

    return true;
  } catch (error) {
    return false;
  }
};

export const getValidToken = async () => {
  // export const getValidToken = async (): Promise<string | null> => {
  try {
    // Get current access token from localStorage
    const accessToken = localStorage.getItem("accessToken");

    // Check if current token is valid
    if (!accessToken || !isTokenValid(accessToken)) {
      // No refresh token available, user needs to login again
      localStorage.clear();
      window.location.href = "/login";
      return null;
    }

    return accessToken;

    // If token is invalid, try to refresh
    // const refreshToken = localStorage.getItem('refreshToken');

    // if (!refreshToken) {
    //   // No refresh token available, user needs to login again
    //   localStorage.clear();
    //   window.location.href = '/login';
    //   return null;
    // }

    // Make refresh token API call
    // const response = await postAuthAPI(
    //   { refreshToken },
    //   END_POINT.REFRESH_TOKEN
    // );

    // if (response.error) {
    //   // Refresh token is invalid or expired
    //   localStorage.clear();
    //   window.location.href = '/login';
    //   return null;
    // }

    // Store new tokens
    // const { accessToken: newAccessToken, refreshToken: newRefreshToken } = response.data;
    // localStorage.setItem('accessToken', newAccessToken);
    // localStorage.setItem('refreshToken', newRefreshToken);

    // return newAccessToken;
  } catch (error) {
    // Handle any unexpected errors
    console.error("Error in getValidToken:", error);
    localStorage.clear();
    window.location.href = "/login";
    return null;
  }
};

// Optional: Helper function to use in API calls
export const getAuthHeader = async () => {
  const token = await getValidToken();
  return token ? `${token}` : "";
};


================================================
File: src/utils/handleApiError.ts
================================================
import { AxiosError } from "axios";
import { toast } from "react-toastify";
import { LocalStorage } from "../utils/localStorage";

export const handleApiError = (
  error: unknown,
  navigatePath?: string
): { error: string } => {
  const axiosError = error as AxiosError<{ message: string }>;

  console.error(axiosError);

  if (axiosError.response?.status === 401) {
    console.error("Error 401: Unauthorized");
    toast.error("Error 401: Unauthorized");
    // LocalStorage.ClearStorage();
    // window.location.href = "/login";
  }

  if (navigatePath) {
    window.location.href = "/" + navigatePath;
  }

  const errorMessage =
    axiosError.response?.data?.message ||
    axiosError.message ||
    "An unexpected error occurred";
  toast.error(errorMessage);

  return { error: errorMessage };
};


================================================
File: src/utils/handleLogOut.ts
================================================
import { toast } from "react-toastify";

export const handleLogout = () => {
  try {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    localStorage.removeItem("user");
    localStorage.removeItem("selectedMenu");
    localStorage.removeItem("crm_status");
    localStorage.removeItem("crm_sources");
    localStorage.removeItem("crm_agents");
    localStorage.removeItem("crm_lostReason");
    localStorage.removeItem("crm_products_services");
    localStorage.removeItem("crm_countries");
    localStorage.removeItem("fcmWebToken");
    toast.success("Logout successfully");
    window.location.href = "/login";
  } catch (err: any) {
    console.log(err);
    toast.error(err || "Unable to logout!");
  }
};


================================================
File: src/utils/useFullFunctions.ts
================================================
export const isWithinNext24Hours = (date: Date): boolean => {
  const now = new Date();
  const future = new Date(now.getTime() + 24 * 60 * 60 * 1000);
  return date > now && date <= future;
};

export const isWithinPast24Hours = (date: Date): boolean => {
  const now = new Date();
  // const past = new Date(now.getTime() - 48 * 60 * 60 * 1000);
  return date < now;
};


================================================
File: src/utils/Constants/UsefullJSON.tsx
================================================
const leadStatus = [
  {
    value: "Call Back",
    label: "Call Back",
  },
  {
    value: "Call Back-Re-visit",
    label: "Call Back-Re-visit",
  },
  {
    value: "Call Back-Schedule-visit",
    label: "Call Back-Schedule-visit",
  },
  {
    value: "Call Back-Visit",
    label: "Call Back-Visit",
  },
  {
    value: "Fake lead",
    label: "Fake lead",
  },
  {
    value: "Lost",
    label: "Lost",
  },
  {
    value: "Meeting",
    label: "Meeting",
  },
  {
    value: "Not Attempt",
    label: "Not Attempt",
  },
  {
    value: "Pending",
    label: "Pending",
  },
  {
    value: "SMS & Whatsapp Shoots",
    label: "SMS & Whatsapp Shoots",
  },
  {
    value: "Won",
    label: "Won",
  },
];

const lostReasonOptions = [
  { value: "notInterested", label: "Not Interested" },
  { value: "noRequirement", label: "No Requirement" },
  { value: "budgetIssue", label: "Budget Issue" },
  { value: "already_using", label: "Already Using" },
  { value: "noBusiness", label: "No Business" },
  { value: "noTeam", label: "No Team" },
];
const AGEND_NAMES = [
  {
    label: "Shashank",
    value: 8948492799,
  },
  {
    label: "Kiran",
    value: 9321220039,
  },
  {
    label: "Abhilekh",
    value: 33098938928,
  },
];

const serviceOptions = [
  { value: "Bhutani", label: "Bhutani" },
  { value: "Delhi NCR", label: "Delhi NCR" },
  { value: "Mumbai", label: "Mumbai" },
  { value: "Chennai", label: "Chennai" },
  { value: "Kolkata", label: "Kolkata" },
  { value: "Fairfox", label: "Fairfox" },
];

const leadSourceOptions = [
  { value: "Just Dial", label: "Just Dial" },
  { value: "Website", label: "Website" },
  { value: "Referral", label: "Referral" },
  { value: "Other", label: "Other" },
];

const leadStatusNewFormat = [
  {
    _id: "Call Back",
    name: "Call Back",
  },
  {
    _id: "Call Back-Re-visit",
    name: "Call Back-Re-visit",
  },
  {
    _id: "Call Back-Schedule-visit",
    name: "Call Back-Schedule-visit",
  },
  {
    _id: "Call Back-Visit",
    name: "Call Back-Visit",
  },
  {
    _id: "Fake lead",
    name: "Fake lead",
  },
  {
    _id: "Lost",
    name: "Lost",
  },
  {
    _id: "Meeting",
    name: "Meeting",
  },
  {
    _id: "Not Attempt",
    name: "Not Attempt",
  },
  {
    _id: "Pending",
    name: "Pending",
  },
  {
    _id: "SMS & Whatsapp Shoots",
    name: "SMS & Whatsapp Shoots",
  },
  {
    _id: "Won",
    name: "Won",
  },
];

const lostReasonOptionsNewFormat = [
  { _id: "notInterested", name: "Not Interested" },
  { _id: "noRequirement", name: "No Requirement" },
  { _id: "budgetIssue", name: "Budget Issue" },
  { _id: "already_using", name: "Already Using" },
  { _id: "noBusiness", name: "No Business" },
  { _id: "noTeam", name: "No Team" },
];
const AGEND_NAMESNewFormat = [
  {
    name: "Shashank",
    _id: 8948492799,
  },
  {
    name: "Kiran",
    _id: 9321220039,
  },
  {
    name: "Abhilekh",
    _id: 33098938928,
  },
];

const serviceOptionsNewFormat = [
  { _id: "Bhutani", name: "Bhutani" },
  { _id: "Delhi NCR", name: "Delhi NCR" },
  { _id: "Mumbai", name: "Mumbai" },
  { _id: "Chennai", name: "Chennai" },
  { _id: "Kolkata", name: "Kolkata" },
  { _id: "Fairfox", name: "Fairfox" },
];

const leadSourceOptionsNewFormat = [
  { _id: "Just Dial", name: "Just Dial" },
  { _id: "Website", name: "Website" },
  { _id: "Referral", name: "Referral" },
  { _id: "Other", name: "Other" },
];

const countryOptions = [
  {
    name: "Afghanistan",
    isoCode: "AF",
  },
  {
    name: "Aland Islands",
    isoCode: "AX",
  },
  {
    name: "Albania",
    isoCode: "AL",
  },
  {
    name: "Algeria",
    isoCode: "DZ",
  },
  {
    name: "American Samoa",
    isoCode: "AS",
  },
  {
    name: "Andorra",
    isoCode: "AD",
  },
  {
    name: "Angola",
    isoCode: "AO",
  },
];

interface IndustryOption {
  value: string;
  label: string;
  category?: string;
}

const INDUSTRY_TYPES: IndustryOption[] = [
  // Technology & IT
  {
    value: "software_development",
    label: "Software Development",
    category: "Technology",
  },
  {
    value: "it_services",
    label: "IT Services & Consulting",
    category: "Technology",
  },
  { value: "cybersecurity", label: "Cybersecurity", category: "Technology" },
  {
    value: "cloud_computing",
    label: "Cloud Computing",
    category: "Technology",
  },
  {
    value: "ai_ml",
    label: "Artificial Intelligence & Machine Learning",
    category: "Technology",
  },

  // Manufacturing & Industry
  { value: "manufacturing", label: "Manufacturing", category: "Manufacturing" },
  { value: "automotive", label: "Automotive", category: "Manufacturing" },
  {
    value: "aerospace",
    label: "Aerospace & Defense",
    category: "Manufacturing",
  },
  { value: "construction", label: "Construction", category: "Manufacturing" },
  {
    value: "electronics",
    label: "Electronics Manufacturing",
    category: "Manufacturing",
  },

  // Services
  {
    value: "financial_services",
    label: "Financial Services",
    category: "Services",
  },
  { value: "healthcare", label: "Healthcare & Medical", category: "Services" },
  { value: "education", label: "Education & Training", category: "Services" },
  { value: "consulting", label: "Business Consulting", category: "Services" },
  { value: "legal_services", label: "Legal Services", category: "Services" },

  // Retail & Consumer
  { value: "retail", label: "Retail & Consumer Goods", category: "Retail" },
  { value: "ecommerce", label: "E-commerce", category: "Retail" },
  { value: "food_beverage", label: "Food & Beverage", category: "Retail" },
  { value: "hospitality", label: "Hospitality & Tourism", category: "Retail" },
  { value: "luxury_goods", label: "Luxury Goods", category: "Retail" },

  // Media & Entertainment
  { value: "media", label: "Media & Entertainment", category: "Media" },
  { value: "advertising", label: "Advertising & Marketing", category: "Media" },
  { value: "gaming", label: "Gaming & Interactive Media", category: "Media" },
  { value: "publishing", label: "Publishing", category: "Media" },
  { value: "broadcasting", label: "Broadcasting", category: "Media" },

  // Energy & Resources
  { value: "energy", label: "Energy & Utilities", category: "Energy" },
  { value: "oil_gas", label: "Oil & Gas", category: "Energy" },
  { value: "mining", label: "Mining & Metals", category: "Energy" },
  { value: "renewable_energy", label: "Renewable Energy", category: "Energy" },
  { value: "agriculture", label: "Agriculture & Farming", category: "Energy" },

  // Transportation & Logistics
  {
    value: "logistics",
    label: "Logistics & Supply Chain",
    category: "Transportation",
  },
  {
    value: "transportation",
    label: "Transportation",
    category: "Transportation",
  },
  { value: "warehousing", label: "Warehousing", category: "Transportation" },
  { value: "shipping", label: "Shipping & Marine", category: "Transportation" },
  { value: "aviation", label: "Aviation", category: "Transportation" },

  // Professional Services
  { value: "real_estate", label: "Real Estate", category: "Professional" },
  { value: "insurance", label: "Insurance", category: "Professional" },
  { value: "banking", label: "Banking", category: "Professional" },
  {
    value: "accounting",
    label: "Accounting & Bookkeeping",
    category: "Professional",
  },
  { value: "hr_services", label: "HR Services", category: "Professional" },

  // Healthcare & Life Sciences
  {
    value: "pharmaceuticals",
    label: "Pharmaceuticals",
    category: "Healthcare",
  },
  { value: "biotech", label: "Biotechnology", category: "Healthcare" },
  {
    value: "medical_devices",
    label: "Medical Devices",
    category: "Healthcare",
  },
  { value: "healthcare_it", label: "Healthcare IT", category: "Healthcare" },
  { value: "telemedicine", label: "Telemedicine", category: "Healthcare" },

  // Non-Profit & Government
  { value: "non_profit", label: "Non-Profit Organization", category: "Other" },
  {
    value: "government",
    label: "Government & Public Sector",
    category: "Other",
  },
  {
    value: "education_institution",
    label: "Educational Institution",
    category: "Other",
  },
  { value: "research", label: "Research & Development", category: "Other" },
  { value: "other", label: "Other", category: "Other" },
];

// Helper function to get industries by category
export const getIndustriesByCategory = (category: string): IndustryOption[] => {
  return INDUSTRY_TYPES.filter((industry) => industry.category === category);
};

// Helper function to get all unique categories
export const getIndustryCategories = (): string[] => {
  return Array.from(
    new Set(INDUSTRY_TYPES.map((industry) => industry.category || ""))
  );
};

// Helper function to find industry label by value
export const getIndustryLabel = (value: string): string => {
  const industry = INDUSTRY_TYPES.find((industry) => industry.value === value);
  return industry ? industry.label : "";
};

export {
  leadStatus,
  lostReasonOptions,
  AGEND_NAMES,
  INDUSTRY_TYPES,
  serviceOptions,
  leadSourceOptions,
  countryOptions,
  leadStatusNewFormat,
  lostReasonOptionsNewFormat,
  AGEND_NAMESNewFormat,
  serviceOptionsNewFormat,
  leadSourceOptionsNewFormat,
};


================================================
File: src/utils/localStorage/index.ts
================================================
// index.ts
export const LocalStorage_Identifiers = {
    UserToken: 'UserToken',
} as const;

export const getStringData = async (
    key: string,
    callback?: (value: string | null) => void
): Promise<string | undefined> => {
    try {
        const value = localStorage.getItem(key);
        if (callback) callback(value);
        if (value !== null) {
            return value;
        }
    } catch (e) {
        // error reading value
        console.error('Error reading from localStorage:', e);
    }
    return undefined;
};

export const setStringData = async (
    key: string,
    value: string,
    callback?: (success: boolean) => void
): Promise<void> => {
    try {
        localStorage.setItem(key, value);
        if (callback) callback(true);
    } catch (error) {
        console.error('Error writing to localStorage:', error);
        if (callback) callback(false);
    }
};

export const getObjectData = async <T>(
    key: string,
    callback?: (value: T | null) => void
): Promise<T | null> => {
    try {
        const value = localStorage.getItem(key);
        if (value !== null) {
            const parsedData = JSON.parse(value) as T;
            if (callback) callback(parsedData);
            return parsedData;
        } else {
            if (callback) callback(null);
            return null;
        }
    } catch (e) {
        console.error('Error reading object from localStorage:', e);
        if (callback) callback(null);
        return null;
    }
};

export const setObjectData = async <T>(
    key: string,
    value: T,
    callback?: (success: boolean) => void
): Promise<void> => {
    try {
        localStorage.setItem(key, JSON.stringify(value));
        if (callback) callback(true);
    } catch (error) {
        console.error('Error writing object to localStorage:', error);
        if (callback) callback(false);
    }
};

export const ClearStorage = async (): Promise<void> => {
    localStorage.clear();
};

export const loadState = (): any | undefined => {
    try {
        const serializedState = localStorage.getItem('state');
        if (serializedState === null) {
            return undefined;
        }
        return JSON.parse(serializedState);
    } catch (err) {
        console.error('Could not load state from local storage:', err);
        return undefined;
    }
};

export const saveState = (state: { user: any }): void => {
    try {
        const serializedState = JSON.stringify({ user: state.user });
        localStorage.setItem('state', serializedState);
    } catch (err) {
        console.error('Could not save state to local storage:', err);
    }
};

export const LocalStorage = {
    getStringData,
    setStringData,
    getObjectData,
    setObjectData,
    ClearStorage
};

================================================
File: src/utils/localStorage/localStorage.d.ts
================================================
// localStorage.d.ts
export interface LocalStorage_IdentifiersType {
    UserToken: string;
}

export interface LocalStorageType {
    getStringData: (key: string, callback?: (value: string | null) => void) => Promise<string | undefined>;
    setStringData: (key: string, value: string, callback?: (success: boolean) => void) => Promise<void>;
    getObjectData: <T>(key: string, callback?: (value: T | null) => void) => Promise<T | null>;
    setObjectData: <T>(key: string, value: T, callback?: (success: boolean) => void) => Promise<void>;
    ClearStorage: () => Promise<void>;
}

export const LocalStorage_Identifiers: LocalStorage_IdentifiersType;
export const LocalStorage: LocalStorageType;

export function loadState(): any | undefined;
export function saveState(state: { user: any }): void;

export function getStringData(key: string, callback?: (value: string | null) => void): Promise<string | undefined>;
export function setStringData(key: string, value: string, callback?: (success: boolean) => void): Promise<void>;
export function getObjectData<T>(key: string, callback?: (value: T | null) => void): Promise<T | null>;
export function setObjectData<T>(key: string, value: T, callback?: (success: boolean) => void): Promise<void>;
export function ClearStorage(): Promise<void>;

